/*
 * Copyright (c) Joachim Ansorg, mail@ansorg-it.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/*** JFlex specification for Bash ****
    The Bash language is a beast. It contains many strange or unusual constructs
    and has a great flexibility in what is possible.
    The lexer tries to do as much as possible in the lexing phase to help the parser
    later on.

    A major problem is that tokens have to interpreted according to their context.
    e.g. a=b echo a=b
    has an assignment in front and a string as parameter to the echo command. So the EQ
    token (for the = character) has to be remapped to a WORD later on (see BashTokenTypeRemapper).

    Another problem is that string can contain unescaped substrings, e.g.
        "$(echo hello "$(echo "world")")" is just one stringParsingState(). But this string contains
    two levels of embedded strings in the embedded subshell command.
    The lexer parses a string as STRING_BEGIN, STRING_DATA and STRING_END. These
    tokens are mapped to a STRING later on by the lexer.MergingLexer class.

    Lexing all as a STRING token was the way to go. This worked, but for some strange
    reason the lexer got wrong offsets for this complex setup (returning the string only at the
    last occurence of "). That's why the token merging strategy was established.

    If you really want to hack on this lexer: Be careful :)
    There are unit tests for the lexer but there's no 100% coverage for all cases.

     @author Joachim Ansorg, mail@ansorg-it.com
**/

/** Based on the arc lexer (http://code.google.com/p/intelli-arc/) **/

package com.ansorgit.plugins.bash.lang.lexer;

import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>src/com/ansorgit/plugins/bash/lang/lexer/bash.flex</tt>
 */
public abstract class _BashLexerBase implements BashLexerDef {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int S_TEST = 2;
  public static final int S_TEST_COMMAND = 4;
  public static final int S_ARITH = 6;
  public static final int S_ARITH_SQUARE_MODE = 8;
  public static final int S_ARITH_ARRAY_MODE = 10;
  public static final int S_CASE = 12;
  public static final int S_CASE_PATTERN = 14;
  public static final int S_SUBSHELL = 16;
  public static final int S_DOLLAR_PREFIXED = 18;
  public static final int S_ARRAY = 20;
  public static final int S_ASSIGNMENT_LIST = 22;
  public static final int S_STRINGMODE = 24;
  public static final int S_PARAM_EXPANSION = 26;
  public static final int S_BACKQUOTE = 28;
  public static final int S_HEREDOC_MARKER = 30;
  public static final int S_HEREDOC_MARKER_IGNORE_TABS = 32;
  public static final int S_HEREDOC = 34;
  public static final int S_HERE_STRING = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    15, 15, 16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13824 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\100\1\36\1\56\1\102\1\1\1\60\1\53\1\103\1\100\1"+
    "\36\1\13\1\104\1\60\1\105\1\53\1\106\1\107\1\110\1\13\1\111\1\112\1\1\1\65"+
    "\1\1\1\25\2\13\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2"+
    "\1\1\71\1\1\1\114\1\1\1\123\1\13\1\124\1\1\1\125\7\1\2\13\1\30\1\105\1\114"+
    "\1\126\1\127\1\130\1\131\1\114\2\13\1\132\2\13\1\133\24\13\1\134\1\135\2\13"+
    "\1\134\2\13\1\136\1\137\1\140\3\13\1\137\3\13\1\30\2\1\1\13\1\1\5\13\1\141"+
    "\1\25\45\13\1\142\1\13\1\25\1\30\4\13\1\30\1\143\1\144\1\16\1\13\1\16\1\13"+
    "\1\16\1\144\1\71\3\13\1\145\1\1\1\146\1\114\2\1\1\114\5\13\1\27\2\13\1\147"+
    "\4\13\1\40\1\13\1\150\2\1\1\65\1\13\1\151\1\47\2\13\1\152\1\13\1\77\1\114"+
    "\2\1\1\13\1\112\3\13\1\47\2\1\2\114\1\153\5\1\1\107\2\13\1\145\1\154\1\114"+
    "\2\1\1\155\1\13\1\156\1\42\2\13\1\40\1\1\2\13\1\145\1\1\1\157\1\42\1\13\1"+
    "\151\6\1\1\160\1\161\14\13\4\1\21\13\1\141\2\13\1\141\1\162\1\13\1\151\3\13"+
    "\1\163\1\164\1\165\1\124\1\164\2\1\1\166\4\1\1\167\1\1\1\124\6\1\1\170\1\171"+
    "\1\172\1\173\1\174\3\1\1\175\147\1\2\13\1\150\2\13\1\150\10\13\1\176\1\177"+
    "\2\13\1\132\3\13\1\200\1\1\1\13\1\112\4\201\4\1\1\105\35\1\1\202\2\1\1\203"+
    "\1\25\4\13\1\204\1\25\4\13\1\133\1\107\1\13\1\151\1\25\4\13\1\150\1\1\1\13"+
    "\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\124\4\1\2\13\1"+
    "\151\20\13\1\124\1\13\1\205\1\1\2\13\1\150\1\105\1\13\1\151\4\13\1\40\2\1"+
    "\1\206\1\207\5\13\1\210\1\13\1\151\1\27\3\1\1\206\1\211\1\13\1\31\1\1\3\13"+
    "\1\145\1\207\2\13\1\145\1\1\1\114\1\1\1\212\1\42\1\13\1\40\1\13\1\112\1\1"+
    "\1\13\1\124\1\50\2\13\1\31\1\105\1\114\1\213\1\214\2\13\1\46\1\1\1\215\1\114"+
    "\1\13\1\216\3\13\1\217\1\220\1\221\1\30\1\66\1\222\1\223\1\201\2\13\1\133"+
    "\1\40\7\13\1\31\1\114\72\13\1\145\1\13\1\224\2\13\1\152\20\1\26\13\1\151\6"+
    "\13\1\77\2\1\1\112\1\225\1\56\1\226\1\227\6\13\1\16\1\1\1\155\25\13\1\151"+
    "\1\1\4\13\1\207\2\13\1\27\2\1\1\152\7\1\1\213\7\13\1\124\1\1\1\114\1\25\1"+
    "\30\1\25\1\30\1\230\4\13\1\150\1\231\1\232\2\1\1\233\1\13\1\140\1\234\2\151"+
    "\2\1\7\13\1\30\30\1\1\13\1\124\3\13\1\71\2\1\2\13\1\1\1\13\1\235\2\13\1\40"+
    "\1\13\1\151\2\13\1\236\3\1\11\13\1\151\1\114\5\1\2\13\1\27\3\13\1\145\11\1"+
    "\23\13\1\112\1\13\1\40\1\27\11\1\1\237\2\13\1\240\1\13\1\40\1\13\1\112\1\13"+
    "\1\150\4\1\1\13\1\241\1\13\1\40\1\13\1\77\4\1\3\13\1\242\4\1\1\71\1\243\1"+
    "\13\1\145\2\1\1\13\1\124\1\13\1\124\2\1\1\123\1\13\1\47\1\1\3\13\1\40\1\13"+
    "\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\155"+
    "\2\13\1\27\2\1\1\65\1\1\1\155\2\13\2\1\1\13\1\46\1\114\1\155\1\13\1\112\1"+
    "\65\1\1\2\13\1\244\1\155\2\13\1\31\1\245\1\246\2\1\1\13\1\22\1\152\5\1\1\247"+
    "\1\250\1\46\2\13\1\150\1\1\1\114\1\73\1\55\1\56\1\70\1\1\1\251\1\16\21\1\3"+
    "\13\1\1\1\252\1\114\12\1\2\13\1\150\2\1\1\253\2\1\3\13\1\1\1\254\1\114\2\1"+
    "\2\13\1\30\1\1\1\114\3\1\1\13\1\77\1\1\1\114\26\1\4\13\1\114\1\105\34\1\3"+
    "\13\1\46\20\1\71\13\1\77\16\1\14\13\1\145\53\1\2\13\1\150\75\1\44\13\1\112"+
    "\33\1\43\13\1\46\1\13\1\150\1\114\6\1\1\13\1\151\1\1\3\13\1\1\1\145\1\114"+
    "\1\155\1\255\1\13\67\1\4\13\1\47\1\71\3\1\1\155\6\1\1\16\77\1\6\13\1\30\1"+
    "\124\1\46\1\77\66\1\5\13\1\213\3\13\1\144\1\256\1\257\1\260\3\13\1\261\1\262"+
    "\1\13\1\263\1\264\1\36\24\13\1\265\1\13\1\36\1\133\1\13\1\133\1\13\1\213\1"+
    "\13\1\213\1\150\1\13\1\150\1\13\1\56\1\13\1\56\1\13\1\266\3\267\14\13\1\47"+
    "\123\1\1\260\1\13\1\270\1\271\1\272\1\273\1\274\1\275\1\276\1\152\1\277\1"+
    "\152\24\1\55\13\1\112\2\1\103\13\1\47\15\13\1\151\150\13\1\16\25\1\41\13\1"+
    "\151\36\1");

  /* The ZZ_CMAP_A table has 3072 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\1\1\40\1\41\1\2\22\0\1\43\1\6\1\10\1\5\1\7\1\100\1\35\1\11\1\51"+
    "\1\33\1\23\1\25\1\21\1\36\1\16\1\77\1\26\7\32\2\20\1\102\1\22\1\75\1\50\1"+
    "\74\1\101\1\24\6\30\1\76\4\17\1\76\1\17\2\76\3\17\1\76\7\17\1\42\1\3\1\15"+
    "\1\12\1\17\1\34\1\56\1\31\1\55\1\60\1\47\1\63\1\73\1\66\1\45\1\17\1\76\1\62"+
    "\1\46\1\54\1\61\1\70\1\72\1\64\1\57\1\44\1\65\1\17\1\67\1\27\1\17\1\76\1\52"+
    "\1\37\1\53\1\71\6\0\1\40\24\0\1\14\12\0\1\14\4\0\1\14\5\0\27\14\1\13\12\14"+
    "\4\0\14\14\16\0\5\14\7\0\1\14\1\0\1\14\1\0\5\14\1\0\2\14\2\0\4\14\1\0\1\14"+
    "\6\0\1\14\1\0\3\14\1\0\1\14\1\0\4\14\1\0\23\14\1\0\13\14\10\0\6\14\1\0\26"+
    "\14\2\0\1\14\6\0\10\14\10\0\13\14\5\0\3\14\15\0\12\13\4\0\6\14\1\0\1\14\17"+
    "\0\2\14\7\0\2\14\12\13\3\14\2\0\2\14\1\0\16\14\15\0\11\14\13\0\1\14\16\0\12"+
    "\13\6\14\4\0\2\14\4\0\1\14\5\0\6\14\4\0\1\14\11\0\1\14\3\0\1\14\7\0\11\14"+
    "\7\0\5\14\17\0\26\14\3\0\1\14\2\0\1\14\7\0\12\14\4\0\12\13\1\14\4\0\10\14"+
    "\2\0\2\14\2\0\26\14\1\0\7\14\1\0\1\14\3\0\4\14\3\0\1\14\20\0\1\14\15\0\2\14"+
    "\1\0\1\14\5\0\6\14\4\0\2\14\1\0\2\14\1\0\2\14\1\0\2\14\17\0\4\14\1\0\1\14"+
    "\7\0\12\13\2\0\3\14\20\0\11\14\1\0\2\14\1\0\2\14\1\0\5\14\3\0\1\14\2\0\1\14"+
    "\30\0\1\14\13\0\10\14\2\0\1\14\3\0\1\14\1\0\6\14\3\0\3\14\1\0\4\14\3\0\2\14"+
    "\1\0\1\14\1\0\2\14\3\0\2\14\3\0\3\14\3\0\14\14\13\0\10\14\1\0\2\14\10\0\3"+
    "\14\5\0\4\14\1\0\5\14\3\0\1\14\3\0\2\14\15\0\13\14\2\0\1\14\21\0\1\14\12\0"+
    "\6\14\5\0\22\14\3\0\10\14\1\0\11\14\1\0\1\14\2\0\7\14\11\0\1\14\1\0\2\14\14"+
    "\0\12\13\7\0\2\14\1\0\1\14\2\0\2\14\1\0\1\14\2\0\1\14\6\0\4\14\1\0\7\14\1"+
    "\0\3\14\1\0\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\0\2\14\11\0\1\14\2\0\5\14\1"+
    "\0\1\14\11\0\12\13\2\0\14\14\1\0\24\14\13\0\5\14\3\0\6\14\4\0\4\14\3\0\1\14"+
    "\3\0\2\14\7\0\3\14\4\0\15\14\14\0\1\14\1\0\6\14\1\0\1\14\5\0\1\14\2\0\13\14"+
    "\1\0\15\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\1\14\1\0\4\14\2\0\7\14"+
    "\1\0\1\14\1\0\4\14\2\0\17\14\1\0\16\14\2\0\6\14\2\0\15\14\2\0\1\14\1\0\10"+
    "\14\7\0\15\14\1\0\6\14\23\0\1\14\4\0\1\14\3\0\11\14\1\0\1\14\5\0\17\14\1\0"+
    "\16\14\2\0\14\14\13\0\1\14\15\0\7\14\7\0\16\14\15\0\2\14\12\13\3\0\3\14\11"+
    "\0\4\14\1\0\4\14\3\0\2\14\11\0\10\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\6\14\1"+
    "\0\7\14\1\0\1\14\3\0\3\14\1\0\7\14\3\0\4\14\2\0\6\14\14\0\2\40\7\0\1\14\15"+
    "\0\1\14\2\0\1\14\4\0\1\14\2\0\12\14\1\0\1\14\3\0\5\14\6\0\1\14\1\0\1\14\1"+
    "\0\1\14\1\0\4\14\1\0\13\14\2\0\4\14\5\0\5\14\4\0\1\14\4\0\2\14\13\0\5\14\6"+
    "\0\4\14\3\0\2\14\14\0\10\14\7\0\10\14\1\0\7\14\6\0\2\14\12\0\5\14\5\0\2\14"+
    "\3\0\7\14\6\0\3\14\12\13\2\14\13\0\11\14\2\0\27\14\2\0\7\14\1\0\3\14\1\0\4"+
    "\14\1\0\4\14\2\0\6\14\3\0\1\14\1\0\1\14\2\0\5\14\1\0\12\14\12\13\5\14\1\0"+
    "\3\14\1\0\10\14\4\0\7\14\3\0\1\14\3\0\2\14\1\0\1\14\3\0\2\14\2\0\5\14\2\0"+
    "\1\14\1\0\1\14\30\0\3\14\3\0\6\14\2\0\6\14\2\0\6\14\11\0\7\14\4\0\5\14\3\0"+
    "\5\14\5\0\1\14\1\0\10\14\1\0\5\14\1\0\1\14\1\0\2\14\1\0\2\14\1\0\12\14\6\0"+
    "\12\14\2\0\6\14\2\0\6\14\2\0\6\14\2\0\3\14\3\0\14\14\1\0\16\14\1\0\2\14\1"+
    "\0\2\14\1\0\10\14\6\0\4\14\4\0\16\14\2\0\1\14\1\0\14\14\1\0\2\14\3\0\1\14"+
    "\2\0\4\14\1\0\2\14\12\0\10\14\6\0\6\14\1\0\3\14\1\0\12\14\3\0\1\14\12\0\4"+
    "\14\13\0\12\13\1\14\1\0\1\14\3\0\7\14\1\0\1\14\1\0\4\14\1\0\17\14\1\0\2\14"+
    "\14\0\3\14\4\0\2\14\1\0\1\14\20\0\4\14\10\0\1\14\13\0\10\14\5\0\3\14\2\0\1"+
    "\14\2\0\2\14\2\0\4\14\1\0\14\14\1\0\1\14\1\0\7\14\1\0\21\14\1\0\4\14\2\0\10"+
    "\14\1\0\7\14\1\0\14\14\1\0\4\14\1\0\5\14\1\0\1\14\3\0\14\14\2\0\13\14\1\0"+
    "\10\14\2\0\22\13\1\0\2\14\1\0\1\14\2\0\1\14\1\0\12\14\1\0\4\14\1\0\1\14\1"+
    "\0\1\14\6\0\1\14\4\0\1\14\1\0\1\14\1\0\1\14\1\0\3\14\1\0\2\14\1\0\1\14\2\0"+
    "\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\2\14\1\0\1\14\2\0\4\14\1\0\7"+
    "\14\1\0\4\14\1\0\4\14\1\0\1\14\1\0\12\14\1\0\5\14\1\0\3\14\1\0\5\14\1\0\5"+
    "\14");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\24\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\2\11\1\12\1\13\1\14\1\11\1\12"+
    "\1\15\1\16\1\17\1\20\1\21\3\11\1\22\1\23"+
    "\1\24\1\25\7\11\1\26\1\27\1\30\1\31\1\17"+
    "\1\11\1\20\1\21\1\4\3\32\1\7\1\17\1\4"+
    "\1\33\1\3\1\34\1\35\1\7\1\36\1\1\1\37"+
    "\2\11\1\40\1\41\1\42\1\43\1\40\1\44\1\45"+
    "\1\46\1\47\1\22\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\1\1\62\1\11"+
    "\1\1\1\13\3\11\1\3\1\5\1\13\1\14\1\63"+
    "\1\16\1\17\1\11\1\24\1\25\1\26\1\27\1\64"+
    "\1\23\1\21\1\1\2\12\1\65\1\3\2\11\1\66"+
    "\1\26\1\27\4\67\1\70\1\71\1\3\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\17\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\2\114\1\113\1\4\3\113\1\115\1\116\1\117"+
    "\1\120\1\1\1\121\1\1\2\122\1\123\2\0\1\11"+
    "\1\0\3\5\1\124\1\0\1\125\1\0\1\125\1\126"+
    "\1\127\1\0\1\130\2\11\1\131\1\132\2\133\1\134"+
    "\1\135\1\136\1\137\1\11\1\140\3\11\1\141\1\142"+
    "\1\11\1\143\2\11\1\144\1\11\1\145\4\11\1\0"+
    "\1\146\1\147\1\0\1\150\1\151\5\32\2\11\1\152"+
    "\1\153\1\154\1\151\1\155\1\0\1\11\1\156\1\157"+
    "\2\0\1\160\1\0\1\161\1\162\1\163\1\164\1\165"+
    "\1\0\1\166\1\134\1\167\1\170\1\171\1\172\1\173"+
    "\1\174\1\175\1\176\1\177\1\0\1\160\2\0\1\200"+
    "\1\201\1\202\2\11\1\124\1\11\1\147\1\151\1\143"+
    "\1\11\1\0\1\76\1\203\1\0\1\204\1\205\1\206"+
    "\1\207\1\210\2\211\1\0\1\113\1\0\1\113\1\0"+
    "\1\117\2\212\1\122\11\0\2\4\3\124\1\0\1\213"+
    "\2\0\2\11\1\214\1\215\1\216\1\217\5\11\1\220"+
    "\3\11\1\221\1\222\3\11\1\0\2\223\1\0\2\224"+
    "\1\225\1\226\1\227\3\0\1\230\1\0\3\231\1\232"+
    "\1\233\1\234\1\235\2\11\1\225\1\0\2\4\4\113"+
    "\2\121\5\0\2\124\1\130\1\236\1\11\1\0\1\237"+
    "\1\240\1\241\1\242\1\243\1\244\1\245\1\11\1\246"+
    "\3\11\1\223\1\0\1\224\2\0\1\237\1\0\1\231"+
    "\1\0\1\247\1\250\1\113\2\0\1\113\3\0\2\11"+
    "\1\251\1\252\2\223\2\224\2\0\1\231\1\253\2\11"+
    "\1\254";

  private static int [] zzUnpackAction() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u053c\0\u0711\0\u068b\0\u0754"+
    "\0\u0797\0\u053c\0\u068b\0\u07da\0\u068b\0\u053c\0\u053c\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u053c\0\u09af\0\u053c"+
    "\0\u053c\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84"+
    "\0\u0bc7\0\u0c0a\0\u0c4d\0\u068b\0\u068b\0\u0c90\0\u0cd3\0\u068b"+
    "\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u053c"+
    "\0\u0eeb\0\u053c\0\u0f2e\0\u0f71\0\u053c\0\u0fb4\0\u053c\0\u0ff7"+
    "\0\u103a\0\u107d\0\u053c\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc"+
    "\0\u120f\0\u053c\0\u1252\0\u053c\0\u053c\0\u1295\0\u12d8\0\u131b"+
    "\0\u135e\0\u0ff7\0\u0ff7\0\u053c\0\u053c\0\u13a1\0\u13e4\0\u1427"+
    "\0\u1252\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u1533"+
    "\0\u1533\0\u053c\0\u1533\0\u1533\0\u15fc\0\u1533\0\u1533\0\u163f"+
    "\0\u1682\0\u053c\0\u16c5\0\u053c\0\u1708\0\u174b\0\u053c\0\u053c"+
    "\0\u178e\0\u17d1\0\u1814\0\u053c\0\u0d9c\0\u0ddf\0\u053c\0\u1857"+
    "\0\u0605\0\u189a\0\u053c\0\u053c\0\u18dd\0\u1920\0\u053c\0\u053c"+
    "\0\u053c\0\u1963\0\u053c\0\u053c\0\u053c\0\u053c\0\u053c\0\u19a6"+
    "\0\u053c\0\u053c\0\u053c\0\u053c\0\u053c\0\u053c\0\u19e9\0\u1a2c"+
    "\0\u053c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u0f71\0\u1d93\0\u053c"+
    "\0\u053c\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68"+
    "\0\u1fab\0\u05c2\0\u053c\0\u1fee\0\u2031\0\u053c\0\u053c\0\u0711"+
    "\0\u053c\0\u2074\0\u20b7\0\u20fa\0\u053c\0\u213d\0\u068b\0\u068b"+
    "\0\u2180\0\u053c\0\u053c\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf"+
    "\0\u0754\0\u0754\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461"+
    "\0\u0754\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u053c\0\u053c"+
    "\0\u25f3\0\u053c\0\u2636\0\u053c\0\u068b\0\u2679\0\u26bc\0\u26ff"+
    "\0\u26bc\0\u2742\0\u053c\0\u053c\0\u053c\0\u2785\0\u053c\0\u27c8"+
    "\0\u280b\0\u053c\0\u053c\0\u0fb4\0\u284e\0\u2891\0\u0eeb\0\u053c"+
    "\0\u053c\0\u053c\0\u053c\0\u28d4\0\u2917\0\u053c\0\u053c\0\u295a"+
    "\0\u053c\0\u053c\0\u053c\0\u299d\0\u053c\0\u29e0\0\u053c\0\u053c"+
    "\0\u13a1\0\u053c\0\u2a23\0\u2a66\0\u2aa9\0\u053c\0\u0754\0\u2aec"+
    "\0\u1576\0\u2b2f\0\u2b72\0\u1533\0\u2bb5\0\u053c\0\u2bf8\0\u178e"+
    "\0\u2c3b\0\u053c\0\u18dd\0\u053c\0\u053c\0\u053c\0\u053c\0\u053c"+
    "\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u053c"+
    "\0\u053c\0\u2e53\0\u2e96\0\u2ed9\0\u1d0d\0\u2f1c\0\u2f5f\0\u2fa2"+
    "\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u053c\0\u30f1\0\u053c\0\u3134"+
    "\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u053c"+
    "\0\u053c\0\u053c\0\u053c\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458"+
    "\0\u053c\0\u349b\0\u34de\0\u3521\0\u0754\0\u0754\0\u3564\0\u35a7"+
    "\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u053c"+
    "\0\u053c\0\u053c\0\u37bf\0\u3802\0\u3845\0\u2917\0\u3888\0\u38cb"+
    "\0\u390e\0\u053c\0\u053c\0\u053c\0\u053c\0\u053c\0\u3951\0\u3994"+
    "\0\u1533\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69"+
    "\0\u053c\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u2f1c\0\u068b"+
    "\0\u3cfb\0\u1fee\0\u053c\0\u3d3e\0\u3d81\0\u068b\0\u0754\0\u0754"+
    "\0\u0754\0\u0754\0\u0754\0\u0754\0\u3dc4\0\u0754\0\u3e07\0\u3e4a"+
    "\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u053c\0\u401f"+
    "\0\u4062\0\u40a5\0\u0754\0\u1533\0\u40e8\0\u412b\0\u416e\0\u41b1"+
    "\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u4300\0\u0754\0\u0754\0\u053c"+
    "\0\u4343\0\u053c\0\u4386\0\u295a\0\u43c9\0\u40a5\0\u0754\0\u440c"+
    "\0\u444f\0\u0754";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\2\37\1\40\2\37\1\40\1\41\1\37"+
    "\1\42\1\37\1\43\1\44\1\45\3\40\1\41\1\46"+
    "\1\47\1\50\1\37\1\51\1\0\1\31\1\52\1\31"+
    "\1\53\1\54\1\40\1\55\1\56\1\57\1\60\1\61"+
    "\1\40\1\62\1\40\1\63\1\64\1\40\1\65\1\66"+
    "\1\40\1\67\1\40\1\70\1\40\1\37\2\40\1\71"+
    "\1\72\1\40\4\37\1\25\1\26\1\27\1\30\1\31"+
    "\1\37\1\73\1\34\1\35\1\36\3\37\1\74\4\37"+
    "\1\42\1\37\1\43\6\37\1\25\1\47\1\75\1\76"+
    "\1\77\1\0\1\31\1\100\1\101\4\37\1\102\1\57"+
    "\1\60\1\61\20\37\1\103\1\104\5\37\1\25\1\26"+
    "\1\27\1\30\1\31\1\37\1\73\1\105\1\35\1\36"+
    "\10\37\1\42\1\37\1\43\6\37\1\46\1\47\1\106"+
    "\1\76\1\51\1\0\1\31\1\37\1\107\4\37\1\102"+
    "\1\110\1\60\1\61\20\37\1\103\1\104\5\37\1\25"+
    "\1\26\1\27\1\111\1\31\1\112\1\113\1\114\1\35"+
    "\1\36\1\115\1\25\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\42\1\124\1\120\1\125\1\126\3\121\1\122"+
    "\1\127\1\47\1\130\1\131\1\51\1\0\1\31\1\132"+
    "\1\31\4\121\1\133\1\134\1\60\1\61\15\121\1\135"+
    "\2\121\1\136\1\137\1\121\1\140\1\141\1\142\1\143"+
    "\1\25\1\26\1\27\1\111\1\31\1\112\1\113\1\114"+
    "\1\35\1\36\1\115\1\25\1\116\1\144\1\120\1\121"+
    "\1\122\1\123\1\42\1\124\1\120\1\125\1\126\3\121"+
    "\1\122\1\127\1\47\1\130\1\131\1\51\1\0\1\31"+
    "\1\145\1\31\4\121\1\133\1\134\1\60\1\61\15\121"+
    "\1\135\2\121\1\136\1\137\1\121\1\140\1\141\1\142"+
    "\1\143\1\25\1\26\1\27\1\111\1\31\1\112\1\113"+
    "\1\114\1\35\1\36\1\115\1\25\1\146\1\147\1\120"+
    "\1\150\1\122\1\123\1\42\1\124\1\120\1\125\1\126"+
    "\3\150\1\122\1\127\1\47\1\130\1\131\1\51\1\0"+
    "\1\31\1\25\1\31\4\150\1\151\1\134\1\60\1\61"+
    "\15\150\1\135\2\150\1\136\1\137\1\150\1\140\1\141"+
    "\1\142\1\143\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\114\1\35\1\36\2\37\1\40\2\37\1\40"+
    "\1\41\1\37\1\152\1\37\1\43\1\44\1\45\3\40"+
    "\1\41\1\46\1\47\1\50\1\37\1\51\1\0\1\31"+
    "\1\52\1\31\1\53\1\153\1\40\1\154\1\56\1\57"+
    "\1\60\1\61\1\40\1\62\1\40\1\63\1\64\1\40"+
    "\1\65\1\66\1\40\1\67\1\40\1\70\1\40\1\37"+
    "\2\40\1\71\1\72\1\40\4\37\1\155\1\26\1\27"+
    "\1\156\1\31\1\157\1\155\1\34\1\35\1\36\10\155"+
    "\1\160\1\155\1\161\6\155\1\162\1\163\1\164\1\155"+
    "\1\77\1\155\1\31\1\155\1\31\3\155\1\165\1\155"+
    "\1\110\1\166\1\167\20\155\1\170\1\171\5\155\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\37\1\40\2\37\1\40\1\41\1\37\1\42"+
    "\1\37\1\43\1\44\1\45\3\40\1\41\1\172\1\47"+
    "\1\50\1\37\1\51\1\0\1\31\1\52\1\31\1\53"+
    "\1\54\1\40\1\55\1\56\1\173\1\60\1\61\1\40"+
    "\1\62\1\40\1\63\1\64\1\40\1\65\1\66\1\40"+
    "\1\67\1\40\1\70\1\40\1\37\2\40\1\71\1\72"+
    "\1\40\4\37\1\25\2\0\35\25\2\0\1\174\6\25"+
    "\1\57\32\25\2\0\4\25\1\175\10\25\1\176\5\25"+
    "\1\177\3\25\1\176\5\25\2\0\1\200\10\25\1\61"+
    "\30\25\1\26\1\27\1\201\1\31\1\157\1\25\1\34"+
    "\1\35\1\36\1\202\1\25\1\202\1\25\7\202\1\203"+
    "\5\202\1\162\1\47\2\202\1\77\1\0\1\31\1\204"+
    "\1\31\4\202\1\56\1\110\1\60\1\61\20\202\1\205"+
    "\1\206\5\202\3\207\1\210\1\211\2\207\1\212\1\213"+
    "\23\207\1\214\4\207\1\211\1\207\1\211\37\207\1\25"+
    "\1\26\1\27\1\215\1\31\1\216\1\217\1\34\1\35"+
    "\1\36\1\220\2\25\1\117\1\221\3\222\1\42\1\223"+
    "\1\224\1\225\5\222\1\25\1\47\1\226\1\227\1\77"+
    "\1\0\1\31\1\230\1\31\4\222\1\231\1\57\1\232"+
    "\1\233\15\222\1\25\2\222\1\205\1\206\1\222\1\234"+
    "\1\235\1\236\1\237\1\25\1\26\1\27\1\30\1\31"+
    "\1\37\1\33\1\34\1\35\1\36\2\37\1\40\2\37"+
    "\1\40\1\41\1\37\1\42\1\37\1\43\1\44\1\45"+
    "\3\40\1\41\1\25\1\47\1\50\1\37\1\51\1\0"+
    "\1\31\1\52\1\31\1\53\1\54\1\40\1\55\1\56"+
    "\1\57\1\60\1\61\1\40\1\62\1\40\1\63\1\64"+
    "\1\40\1\65\1\66\1\40\1\67\1\40\1\70\1\40"+
    "\1\37\2\40\1\71\1\72\1\40\4\37\1\240\1\241"+
    "\1\242\1\243\1\244\2\240\1\245\1\246\1\247\10\240"+
    "\1\25\12\240\1\25\1\240\1\25\1\240\1\244\1\240"+
    "\1\244\37\240\1\250\2\251\1\252\3\250\1\253\73\250"+
    "\1\25\1\26\1\27\1\254\1\255\2\25\1\256\1\35"+
    "\1\36\3\257\1\260\4\257\1\25\10\257\1\261\1\47"+
    "\2\257\1\25\1\0\1\255\1\260\1\255\4\257\1\25"+
    "\1\110\2\260\20\257\2\25\5\257\14\0\1\262\2\0"+
    "\1\262\7\0\3\262\12\0\4\262\4\0\15\262\1\0"+
    "\2\262\2\0\1\262\21\0\1\263\171\0\1\26\101\0"+
    "\2\37\1\264\100\37\3\0\1\265\77\0\1\266\2\0"+
    "\1\267\1\266\1\270\1\271\3\266\10\270\1\266\10\270"+
    "\2\266\2\270\3\266\1\270\1\266\4\270\4\266\20\270"+
    "\2\266\5\270\3\0\1\272\1\0\2\37\3\0\10\37"+
    "\1\0\10\37\2\0\2\37\3\0\1\37\1\0\4\37"+
    "\4\0\20\37\2\0\5\37\5\0\3\273\1\35\1\274"+
    "\2\0\1\275\2\0\1\275\1\273\2\0\2\273\1\0"+
    "\1\273\3\275\1\273\3\0\1\273\3\0\1\276\1\0"+
    "\4\275\2\0\1\277\1\0\15\275\1\0\2\275\2\0"+
    "\1\275\2\0\1\273\1\0\11\300\1\301\71\300\3\0"+
    "\1\272\1\0\2\37\3\0\2\37\1\40\2\37\2\40"+
    "\1\37\1\0\2\37\1\302\5\40\2\0\2\37\3\0"+
    "\1\303\1\0\4\40\1\304\3\0\15\40\1\37\2\40"+
    "\2\0\1\40\4\37\3\0\1\272\1\0\2\37\3\0"+
    "\6\37\1\41\1\37\1\0\3\37\1\41\3\37\1\41"+
    "\2\0\2\37\3\0\1\37\1\0\4\37\4\0\20\37"+
    "\2\0\5\37\3\0\1\272\1\0\2\37\3\0\10\37"+
    "\1\0\10\37\2\0\2\37\3\0\1\37\1\0\4\37"+
    "\1\305\3\0\20\37\2\0\5\37\3\0\1\272\1\0"+
    "\2\37\3\0\6\37\1\306\1\37\1\0\3\37\1\307"+
    "\3\37\1\306\2\0\1\310\1\307\3\0\1\37\1\0"+
    "\4\37\4\0\20\37\1\311\1\0\5\37\35\0\1\312"+
    "\1\0\1\313\46\0\1\272\1\0\2\37\3\0\10\37"+
    "\1\0\10\37\2\0\2\37\3\0\1\314\1\315\4\37"+
    "\4\0\20\37\2\0\5\37\3\0\1\272\1\0\2\37"+
    "\3\0\2\37\1\40\2\37\2\40\1\37\1\0\2\37"+
    "\1\302\5\40\2\0\2\37\3\0\1\303\1\0\1\40"+
    "\1\316\2\40\1\304\3\0\10\40\1\317\1\40\1\320"+
    "\2\40\1\37\2\40\2\0\1\40\4\37\3\0\1\272"+
    "\1\0\2\37\3\0\2\37\1\40\2\37\2\40\1\37"+
    "\1\0\2\37\1\302\5\40\2\0\2\37\3\0\1\303"+
    "\1\0\4\40\1\304\3\0\1\321\6\40\1\322\5\40"+
    "\1\37\2\40\2\0\1\40\4\37\3\0\1\272\1\0"+
    "\2\37\3\0\2\37\1\40\2\37\2\40\1\37\1\0"+
    "\2\37\1\302\5\40\2\0\2\37\3\0\1\303\1\0"+
    "\4\40\1\304\3\0\6\40\1\323\6\40\1\37\2\40"+
    "\2\0\1\40\4\37\51\0\1\324\34\0\1\272\1\0"+
    "\2\37\3\0\2\37\1\40\2\37\2\40\1\37\1\0"+
    "\2\37\1\302\5\40\2\0\2\37\3\0\1\303\1\0"+
    "\4\40\1\304\3\0\2\40\1\325\12\40\1\37\2\40"+
    "\2\0\1\40\4\37\3\0\1\272\1\0\2\37\3\0"+
    "\2\37\1\40\2\37\2\40\1\37\1\0\2\37\1\302"+
    "\5\40\2\0\2\37\3\0\1\303\1\0\3\40\1\326"+
    "\1\304\3\0\15\40\1\37\2\40\2\0\1\40\4\37"+
    "\3\0\1\272\1\0\2\37\3\0\2\37\1\40\2\37"+
    "\2\40\1\37\1\0\2\37\1\302\5\40\2\0\2\37"+
    "\3\0\1\303\1\0\4\40\1\304\3\0\5\40\1\327"+
    "\7\40\1\37\2\40\2\0\1\40\4\37\3\0\1\272"+
    "\1\0\2\37\3\0\2\37\1\40\2\37\2\40\1\37"+
    "\1\0\2\37\1\302\5\40\2\0\2\37\3\0\1\303"+
    "\1\0\3\40\1\330\1\304\3\0\15\40\1\37\2\40"+
    "\2\0\1\40\4\37\3\0\1\272\1\0\2\37\3\0"+
    "\2\37\1\40\2\37\2\40\1\37\1\0\2\37\1\302"+
    "\5\40\2\0\2\37\3\0\1\303\1\0\1\40\1\331"+
    "\2\40\1\304\3\0\5\40\1\332\3\40\1\333\3\40"+
    "\1\37\2\40\2\0\1\40\4\37\3\0\1\272\1\0"+
    "\2\37\3\0\2\37\1\40\2\37\2\40\1\37\1\0"+
    "\2\37\1\302\5\40\2\0\2\37\3\0\1\303\1\0"+
    "\4\40\1\304\3\0\1\334\14\40\1\37\2\40\2\0"+
    "\1\40\4\37\3\0\1\272\1\0\2\37\3\0\2\37"+
    "\1\40\2\37\2\40\1\37\1\0\2\37\1\302\5\40"+
    "\2\0\2\37\3\0\1\303\1\0\4\40\1\304\3\0"+
    "\12\40\1\335\2\40\1\37\2\40\2\0\1\40\4\37"+
    "\35\0\1\336\1\0\1\337\34\0\1\340\43\0\1\341"+
    "\36\0\1\342\1\343\10\0\1\272\1\0\2\37\3\0"+
    "\10\37\1\0\10\37\2\0\2\37\3\0\1\37\1\0"+
    "\4\37\1\344\3\0\20\37\2\0\5\37\3\0\1\272"+
    "\1\0\2\37\3\0\10\37\1\0\4\37\1\345\1\37"+
    "\1\345\1\37\2\0\2\37\3\0\1\37\1\0\1\345"+
    "\2\37\1\346\4\0\1\347\4\345\1\350\1\351\6\345"+
    "\1\37\1\352\1\347\2\0\1\345\4\37\35\0\1\312"+
    "\50\0\1\265\11\0\1\353\135\0\1\354\20\0\1\355"+
    "\105\0\1\340\103\0\1\356\12\0\3\273\1\35\1\274"+
    "\2\0\1\275\2\0\1\275\1\273\2\0\2\273\1\0"+
    "\1\273\3\275\1\273\3\0\1\273\3\0\1\276\1\0"+
    "\4\275\1\0\1\357\1\277\1\0\15\275\1\0\2\275"+
    "\2\0\1\275\2\0\1\273\4\0\1\272\1\0\2\37"+
    "\3\0\10\37\1\0\10\37\2\0\1\310\1\37\3\0"+
    "\1\37\1\0\4\37\4\0\20\37\2\0\5\37\3\0"+
    "\1\265\11\0\1\360\65\0\2\120\1\361\100\120\50\0"+
    "\1\362\37\0\3\273\1\35\1\274\2\0\1\275\2\0"+
    "\1\275\1\273\2\0\2\273\1\0\1\273\3\275\1\273"+
    "\3\0\1\273\3\0\1\363\1\0\4\275\1\0\1\363"+
    "\1\277\1\0\15\275\1\0\2\275\2\0\1\275\2\0"+
    "\1\273\15\0\1\364\2\0\2\364\4\0\1\365\5\364"+
    "\7\0\1\366\1\0\4\364\1\304\3\0\15\364\1\0"+
    "\2\364\2\0\1\364\7\0\1\367\1\0\2\120\7\0"+
    "\3\120\3\0\1\120\1\0\5\120\11\0\4\120\4\0"+
    "\15\120\1\0\2\120\2\0\1\120\2\0\2\120\3\0"+
    "\1\367\1\0\2\120\5\0\1\364\1\0\1\120\2\121"+
    "\3\0\1\120\1\365\5\121\7\0\1\366\1\0\4\121"+
    "\1\304\3\0\15\121\1\0\2\121\2\0\1\121\2\0"+
    "\2\120\20\0\1\122\5\0\1\122\3\0\1\122\73\0"+
    "\1\370\24\0\1\371\57\0\1\372\22\0\1\373\60\0"+
    "\1\374\1\375\2\0\1\374\103\0\1\376\104\0\1\377"+
    "\103\0\1\u0100\11\0\1\u0101\102\0\1\u0102\102\0\1\u0103"+
    "\23\0\1\u0104\56\0\1\u0105\24\0\1\u0106\55\0\1\u0107"+
    "\102\0\1\u0108\46\0\1\u0109\2\0\2\u0109\5\0\5\u0109"+
    "\7\0\1\u010a\1\0\4\u0109\4\0\15\u0109\1\0\2\u0109"+
    "\2\0\1\u0109\31\0\1\u010b\22\0\1\u010c\35\0\1\367"+
    "\1\0\2\120\5\0\1\u0109\1\0\1\120\2\150\3\0"+
    "\1\120\1\0\5\150\7\0\1\u010a\1\0\4\150\4\0"+
    "\15\150\1\0\2\150\2\0\1\150\2\0\2\120\22\0"+
    "\1\u010d\12\0\1\u010e\50\0\1\272\1\0\2\37\3\0"+
    "\2\37\1\40\2\37\2\40\1\37\1\0\2\37\1\302"+
    "\5\40\2\0\2\37\3\0\1\303\1\0\4\40\1\304"+
    "\3\0\1\u010f\6\40\1\322\5\40\1\37\2\40\2\0"+
    "\1\40\4\37\3\0\1\272\1\0\2\37\3\0\2\37"+
    "\1\40\2\37\2\40\1\37\1\0\2\37\1\302\5\40"+
    "\2\0\2\37\3\0\1\303\1\0\4\40\1\304\3\0"+
    "\3\40\1\u0110\2\40\1\323\6\40\1\37\2\40\2\0"+
    "\1\40\4\37\1\155\2\0\1\u0111\1\0\2\155\3\0"+
    "\10\155\1\0\10\155\2\0\2\155\1\0\1\155\1\0"+
    "\1\155\1\0\5\155\1\0\32\155\1\0\1\155\1\u0111"+
    "\77\155\1\266\2\0\3\266\1\u0112\74\266\1\155\2\0"+
    "\1\u0111\1\0\2\155\3\0\10\155\1\0\10\155\2\0"+
    "\2\155\1\0\1\155\1\0\1\155\1\0\5\155\1\0"+
    "\5\155\1\u0113\24\155\2\0\1\u0111\1\0\2\155\3\0"+
    "\10\155\1\0\10\155\2\0\2\155\1\0\1\155\1\0"+
    "\1\155\1\0\5\155\1\0\22\155\1\u0114\7\155\2\0"+
    "\1\u0111\1\0\2\155\3\0\10\155\1\0\10\155\2\0"+
    "\2\155\1\0\1\155\1\0\1\155\1\0\5\155\1\0"+
    "\23\155\1\u0115\5\155\51\0\1\u0116\103\0\1\277\50\0"+
    "\1\176\5\0\1\176\3\0\1\176\50\0\2\202\1\u0117"+
    "\100\202\3\0\1\u0118\1\0\3\202\2\0\1\202\1\0"+
    "\1\202\1\0\15\202\2\0\2\202\5\0\4\202\4\0"+
    "\20\202\2\0\5\202\3\0\1\u0118\1\0\3\202\2\0"+
    "\1\202\1\0\1\202\1\0\15\202\2\0\2\202\5\0"+
    "\4\202\1\305\3\0\20\202\2\0\5\202\1\207\1\0"+
    "\101\207\5\0\3\273\4\0\1\275\2\0\1\275\1\273"+
    "\2\0\2\273\1\0\1\273\3\275\1\273\3\0\1\273"+
    "\3\0\1\363\1\0\4\275\1\0\1\363\1\277\1\0"+
    "\15\275\1\0\2\275\2\0\1\275\2\0\1\273\1\0"+
    "\2\222\1\u0119\100\222\5\0\1\u011a\100\0\1\u011b\13\0"+
    "\3\222\4\0\5\222\11\0\4\222\4\0\15\222\1\0"+
    "\2\222\2\0\1\222\27\0\2\u011c\103\0\1\u011d\10\0"+
    "\1\u011e\11\0\1\u011f\30\0\1\u0120\1\0\1\240\2\0"+
    "\1\240\1\0\15\240\1\0\12\240\1\0\1\240\1\0"+
    "\1\240\1\0\1\240\1\0\37\240\1\0\1\241\101\0"+
    "\1\240\1\u0121\1\u0122\1\240\1\0\15\240\1\0\12\240"+
    "\1\0\1\240\1\0\1\240\1\0\1\240\1\0\37\240"+
    "\3\0\1\u0123\1\244\34\0\1\244\1\0\1\244\37\0"+
    "\1\240\2\0\1\240\1\0\3\240\1\246\1\247\10\240"+
    "\1\0\12\240\1\0\1\240\1\0\1\240\1\0\1\240"+
    "\1\0\37\240\1\u0124\2\u0125\1\u0124\1\u0125\3\u0124\1\240"+
    "\11\u0124\1\u0125\12\u0124\1\u0125\1\u0124\1\u0125\1\u0124\1\u0125"+
    "\1\u0124\1\u0125\37\u0124\1\u0126\2\u0127\1\u0126\1\u0127\4\u0126"+
    "\1\240\10\u0126\1\u0127\12\u0126\1\u0127\1\u0126\1\u0127\1\u0126"+
    "\1\u0127\1\u0126\1\u0127\37\u0126\1\250\3\0\3\250\1\0"+
    "\73\250\1\0\2\251\107\0\1\u0128\100\0\3\u0129\4\0"+
    "\1\u012a\2\0\1\u012a\1\u0129\2\0\2\u0129\1\0\1\u0129"+
    "\3\u012a\1\u0129\3\0\1\u0129\3\0\1\363\1\0\4\u012a"+
    "\1\0\1\363\1\277\1\0\15\u012a\1\0\2\u012a\2\0"+
    "\1\u012a\2\0\1\u0129\1\0\2\257\1\u012b\100\257\3\0"+
    "\1\u012c\102\0\1\u012d\1\0\2\257\3\0\10\257\1\0"+
    "\10\257\2\0\2\257\3\0\1\257\1\0\4\257\4\0"+
    "\20\257\2\0\5\257\14\0\1\262\2\0\2\262\5\0"+
    "\5\262\11\0\4\262\4\0\15\262\1\0\2\262\2\0"+
    "\1\262\4\0\1\u012e\1\u012f\3\u012e\2\u0130\1\u0131\4\u012e"+
    "\1\u0132\1\u012e\1\u0133\2\u0134\2\u012e\2\u0134\1\u0133\5\u0134"+
    "\3\u012e\1\u0134\5\u012e\4\u0134\4\u012e\15\u0134\1\u012e\2\u0134"+
    "\2\u012e\1\u0134\2\u012e\1\u0134\1\u0133\1\0\1\37\1\0"+
    "\1\272\1\0\2\37\3\0\10\37\1\0\10\37\2\0"+
    "\2\37\3\0\1\37\1\0\4\37\4\0\20\37\2\0"+
    "\5\37\1\0\1\u0135\1\u0136\100\0\1\266\2\0\100\266"+
    "\1\270\1\37\1\264\100\270\1\266\2\0\1\267\1\266"+
    "\2\270\3\266\10\270\1\266\10\270\2\266\2\270\3\266"+
    "\1\270\1\266\4\270\4\266\20\270\2\266\5\270\1\u0112"+
    "\1\u0137\1\u0138\1\u0139\1\u0112\2\271\3\u0112\10\271\1\u0112"+
    "\10\271\2\u0112\2\271\3\u0112\1\271\1\u0112\4\271\4\u0112"+
    "\20\271\2\u0112\5\271\3\274\1\u013a\5\274\1\301\71\274"+
    "\14\0\1\275\2\0\2\275\5\0\5\275\11\0\4\275"+
    "\4\0\15\275\1\0\2\275\2\0\1\275\7\0\1\272"+
    "\1\0\2\37\3\0\10\37\1\0\10\37\2\0\2\37"+
    "\3\0\1\37\1\0\4\37\1\u013b\3\0\20\37\2\0"+
    "\5\37\3\0\1\u013c\1\0\2\37\1\u013d\2\0\4\37"+
    "\2\u013e\1\u013f\1\37\1\0\1\u013f\1\u013e\2\u013f\3\u013e"+
    "\1\u013f\2\0\1\37\1\u013f\3\0\1\37\1\0\4\u013e"+
    "\4\0\15\u013e\1\37\2\u013e\2\0\1\u013e\2\37\2\u013e"+
    "\51\0\1\u0140\34\0\1\272\1\0\2\37\3\0\6\37"+
    "\1\306\1\37\1\0\3\37\1\306\3\37\1\306\2\0"+
    "\2\37\3\0\1\37\1\0\4\37\4\0\20\37\2\0"+
    "\5\37\74\0\1\u0141\11\0\1\272\1\0\2\37\3\0"+
    "\10\37\1\0\10\37\2\0\2\37\3\0\1\37\1\u0142"+
    "\4\37\4\0\20\37\2\0\5\37\15\0\1\u0143\70\0"+
    "\1\272\1\0\2\37\3\0\2\37\1\40\2\37\2\40"+
    "\1\37\1\0\2\37\1\302\5\40\2\0\2\37\3\0"+
    "\1\303\1\0\2\40\1\u0144\1\40\1\304\3\0\15\40"+
    "\1\37\2\40\2\0\1\40\4\37\3\0\1\272\1\0"+
    "\2\37\3\0\2\37\1\40\2\37\2\40\1\37\1\0"+
    "\2\37\1\302\5\40\2\0\2\37\3\0\1\303\1\0"+
    "\4\40\1\304\3\0\2\40\1\u0145\12\40\1\37\2\40"+
    "\2\0\1\40\4\37\3\0\1\272\1\0\2\37\3\0"+
    "\2\37\1\40\2\37\2\40\1\37\1\0\2\37\1\302"+
    "\5\40\2\0\2\37\3\0\1\303\1\0\3\40\1\u0146"+
    "\1\304\3\0\15\40\1\37\2\40\2\0\1\40\4\37"+
    "\3\0\1\272\1\0\2\37\3\0\2\37\1\40\2\37"+
    "\2\40\1\37\1\0\2\37\1\302\5\40\2\0\2\37"+
    "\3\0\1\303\1\0\1\40\1\u0147\2\40\1\304\3\0"+
    "\3\40\1\u0148\11\40\1\37\2\40\2\0\1\40\4\37"+
    "\51\0\1\u0149\34\0\1\272\1\0\2\37\3\0\2\37"+
    "\1\40\2\37\2\40\1\37\1\0\2\37\1\302\5\40"+
    "\2\0\2\37\3\0\1\303\1\0\4\40\1\304\3\0"+
    "\3\40\1\u014a\11\40\1\37\2\40\2\0\1\40\4\37"+
    "\3\0\1\272\1\0\2\37\3\0\2\37\1\40\2\37"+
    "\2\40\1\37\1\0\2\37\1\302\5\40\2\0\2\37"+
    "\3\0\1\303\1\0\4\40\1\304\3\0\6\40\1\u014b"+
    "\6\40\1\37\2\40\2\0\1\40\4\37\3\0\1\272"+
    "\1\0\2\37\3\0\2\37\1\40\2\37\2\40\1\37"+
    "\1\0\2\37\1\302\5\40\2\0\2\37\3\0\1\303"+
    "\1\0\4\40\1\304\3\0\1\u014c\14\40\1\37\2\40"+
    "\2\0\1\40\4\37\3\0\1\272\1\0\2\37\3\0"+
    "\2\37\1\40\2\37\2\40\1\37\1\0\2\37\1\302"+
    "\5\40\2\0\2\37\3\0\1\303\1\0\1\u014d\3\40"+
    "\1\304\3\0\15\40\1\37\2\40\2\0\1\40\4\37"+
    "\3\0\1\272\1\0\2\37\3\0\2\37\1\40\2\37"+
    "\2\40\1\37\1\0\2\37\1\302\5\40\2\0\2\37"+
    "\3\0\1\303\1\0\4\40\1\304\3\0\10\40\1\u014e"+
    "\4\40\1\37\2\40\2\0\1\40\4\37\3\0\1\272"+
    "\1\0\2\37\3\0\2\37\1\40\2\37\2\40\1\37"+
    "\1\0\2\37\1\302\5\40\2\0\2\37\3\0\1\303"+
    "\1\0\4\40\1\304\3\0\1\u014f\14\40\1\37\2\40"+
    "\2\0\1\40\4\37\3\0\1\272\1\0\2\37\3\0"+
    "\2\37\1\40\2\37\2\40\1\37\1\0\2\37\1\302"+
    "\5\40\2\0\2\37\3\0\1\303\1\0\1\u0150\3\40"+
    "\1\304\3\0\15\40\1\37\2\40\2\0\1\40\4\37"+
    "\3\0\1\272\1\0\2\37\3\0\2\37\1\40\2\37"+
    "\2\40\1\37\1\0\2\37\1\302\5\40\2\0\2\37"+
    "\3\0\1\303\1\0\1\40\1\u0151\2\40\1\304\3\0"+
    "\15\40\1\37\2\40\2\0\1\40\4\37\3\0\1\u0152"+
    "\1\u0153\11\0\2\u0154\4\0\1\u0154\2\0\3\u0154\7\0"+
    "\1\u0153\1\0\1\u0153\4\u0154\4\0\15\u0154\1\0\2\u0154"+
    "\2\0\1\u0154\2\0\2\u0154\3\0\1\u0155\1\u0156\11\0"+
    "\2\u0157\4\0\1\u0157\2\0\3\u0157\7\0\1\u0156\1\0"+
    "\1\u0156\4\u0157\4\0\15\u0157\1\0\2\u0157\2\0\1\u0157"+
    "\2\0\2\u0157\36\0\1\u0158\36\0\1\u0159\10\0\1\272"+
    "\1\0\2\37\3\0\10\37\1\0\10\37\2\0\2\37"+
    "\3\0\1\37\1\0\4\37\4\0\7\37\1\345\6\37"+
    "\1\345\1\37\2\0\5\37\3\0\1\272\1\0\2\37"+
    "\3\0\10\37\1\0\10\37\2\0\2\37\3\0\1\37"+
    "\1\0\1\345\2\37\1\345\4\0\20\37\2\0\5\37"+
    "\3\0\1\272\1\0\2\37\3\0\10\37\1\0\10\37"+
    "\2\0\2\37\3\0\1\37\1\0\1\345\3\37\4\0"+
    "\20\37\2\0\5\37\3\0\1\272\1\0\2\37\3\0"+
    "\10\37\1\0\10\37\2\0\2\37\3\0\1\37\1\0"+
    "\4\37\4\0\16\37\1\345\1\37\2\0\5\37\36\0"+
    "\1\u0158\61\0\1\u015a\66\0\1\120\1\0\1\367\1\0"+
    "\2\120\7\0\3\120\3\0\1\120\1\0\5\120\11\0"+
    "\4\120\4\0\15\120\1\0\2\120\2\0\1\120\2\0"+
    "\2\120\50\0\1\u013b\35\0\1\u015b\3\0\1\u013d\6\0"+
    "\2\u015c\1\u015d\2\0\1\u015d\1\u015c\2\u015d\3\u015c\1\u015d"+
    "\3\0\1\u015d\5\0\4\u015c\4\0\15\u015c\1\0\2\u015c"+
    "\2\0\1\u015c\2\0\2\u015c\26\0\1\374\3\0\1\374"+
    "\70\0\1\u015e\5\0\1\u015e\1\0\3\u015e\14\0\1\u015e"+
    "\5\0\2\u015e\1\0\1\u015e\2\0\1\u015e\23\0\1\u015f"+
    "\13\0\1\u0160\5\0\1\u0161\3\0\1\u0160\3\0\1\u0162"+
    "\2\0\1\u015f\1\0\1\u015f\107\0\1\u0163\70\0\1\u0158"+
    "\11\0\1\u0164\102\0\1\u010c\103\0\1\u0165\66\0\1\u0166"+
    "\50\0\1\272\1\0\2\37\3\0\2\37\1\40\2\37"+
    "\2\40\1\37\1\0\2\37\1\302\5\40\2\0\2\37"+
    "\3\0\1\303\1\0\4\40\1\304\3\0\2\40\1\u0167"+
    "\12\40\1\37\2\40\2\0\1\40\4\37\1\u0112\1\u0137"+
    "\1\u0138\100\u0112\1\155\2\0\1\u0111\1\0\2\155\3\0"+
    "\10\155\1\0\10\155\2\0\2\155\1\0\1\155\1\0"+
    "\1\155\1\0\5\155\1\0\4\155\1\u0168\25\155\2\0"+
    "\1\u0111\1\0\2\155\3\0\10\155\1\0\10\155\2\0"+
    "\1\155\1\u0169\1\0\1\155\1\0\1\155\1\0\5\155"+
    "\1\0\31\155\1\0\1\202\1\0\1\u0118\1\0\3\202"+
    "\2\0\1\202\1\0\1\202\1\0\15\202\2\0\2\202"+
    "\5\0\4\202\4\0\20\202\2\0\5\202\1\0\1\222"+
    "\1\0\1\u011b\13\0\3\222\4\0\5\222\11\0\4\222"+
    "\4\0\15\222\1\0\2\222\2\0\1\222\7\0\1\u016a"+
    "\100\0\1\u0121\1\0\1\u016a\100\0\1\u016b\1\u016c\100\0"+
    "\1\u0124\2\u0125\1\u0124\1\u0125\3\u0124\1\u016d\11\u0124\1\u0125"+
    "\12\u0124\1\u0125\1\u0124\1\u0125\1\u0124\1\u0125\1\u0124\1\u0125"+
    "\37\u0124\10\u0125\1\u016e\72\u0125\1\u0126\2\u0127\1\u0126\1\u0127"+
    "\4\u0126\1\u016f\10\u0126\1\u0127\12\u0126\1\u0127\1\u0126\1\u0127"+
    "\1\u0126\1\u0127\1\u0126\1\u0127\37\u0126\11\u0127\1\u0170\71\u0127"+
    "\14\0\1\u012a\2\0\2\u012a\5\0\5\u012a\11\0\4\u012a"+
    "\4\0\15\u012a\1\0\2\u012a\2\0\1\u012a\5\0\1\257"+
    "\1\0\1\u012d\1\0\2\257\3\0\10\257\1\0\10\257"+
    "\2\0\2\257\3\0\1\257\1\0\4\257\4\0\20\257"+
    "\2\0\5\257\1\0\1\u0171\1\u0172\103\0\1\u0173\101\0"+
    "\1\u012e\1\u0173\77\0\1\u012e\1\u012f\1\u012e\1\u0133\1\u012e"+
    "\2\u0174\1\u0133\6\u012e\2\u0133\1\u0174\3\u012e\1\u0133\1\u012e"+
    "\1\u0174\3\u0133\1\u0174\11\u012e\4\u0133\4\u012e\15\u0133\1\u012e"+
    "\2\u0133\2\u012e\1\u0133\2\u012e\2\u0133\3\0\1\u0173\3\0"+
    "\1\u0173\76\0\1\u0173\3\0\1\u0173\4\0\1\u0175\2\0"+
    "\1\u0175\1\u0176\5\0\1\u0176\3\u0175\1\u0176\11\0\4\u0175"+
    "\4\0\15\u0175\1\0\2\u0175\2\0\1\u0175\4\0\1\u012e"+
    "\1\u012f\1\u012e\1\u0133\1\u012e\2\u0130\1\u0131\4\u012e\1\u0132"+
    "\1\u012e\1\u0133\2\u0134\2\u012e\2\u0134\1\u0133\5\u0134\3\u012e"+
    "\1\u0134\3\u012e\1\u0177\1\u012e\4\u0134\4\u012e\15\u0134\1\u012e"+
    "\2\u0134\2\u012e\1\u0134\2\u012e\1\u0134\1\u0133\1\u012e\1\u012f"+
    "\1\u012e\1\u0133\1\u012e\2\u0130\1\u0134\4\u012e\1\u0132\1\u012e"+
    "\1\u0133\2\u0134\2\u012e\2\u0134\1\u0133\5\u0134\3\u012e\1\u0134"+
    "\3\u012e\1\u0177\1\u012e\4\u0134\4\u012e\15\u0134\1\u012e\2\u0134"+
    "\2\u012e\1\u0134\2\u012e\1\u0134\1\u0133\1\0\1\u0135\102\0"+
    "\1\u0137\101\0\1\271\1\u0178\1\u0179\100\271\3\274\1\u013a"+
    "\5\274\1\u017a\71\274\51\0\1\u017b\31\0\2\u013e\1\u017c"+
    "\100\u013e\5\0\3\u015d\4\0\1\u017d\2\0\1\u017d\1\u015d"+
    "\2\0\2\u015d\1\0\1\u015d\3\u017d\1\u015d\3\0\1\u015d"+
    "\5\0\4\u017d\4\0\15\u017d\1\0\2\u017d\2\0\1\u017d"+
    "\2\0\1\u015d\4\0\1\u013c\1\0\2\u013e\1\u013d\2\0"+
    "\3\37\1\u017e\3\u013e\1\37\1\0\1\u013f\1\u013e\1\u013f"+
    "\5\u013e\2\0\1\37\1\u013f\3\0\1\37\1\0\4\u013e"+
    "\4\0\15\u013e\1\37\2\u013e\2\0\1\u013e\2\37\2\u013e"+
    "\3\0\1\u013c\1\0\2\37\1\u013d\2\0\3\37\1\u017e"+
    "\2\u013e\1\u013f\1\37\1\0\1\u013f\1\u013e\2\u013f\3\u013e"+
    "\1\u013f\2\0\1\37\1\u013f\3\0\1\37\1\0\4\u013e"+
    "\4\0\15\u013e\1\37\2\u013e\2\0\1\u013e\2\37\2\u013e"+
    "\3\0\1\272\1\0\2\37\3\0\2\37\1\40\2\37"+
    "\2\40\1\37\1\0\2\37\1\302\5\40\2\0\2\37"+
    "\3\0\1\303\1\0\3\40\1\u017f\1\304\3\0\15\40"+
    "\1\37\2\40\2\0\1\40\4\37\3\0\1\272\1\0"+
    "\2\37\3\0\2\37\1\40\2\37\2\40\1\37\1\0"+
    "\2\37\1\302\5\40\2\0\2\37\3\0\1\303\1\0"+
    "\4\40\1\304\3\0\14\40\1\u0180\1\37\2\40\2\0"+
    "\1\40\4\37\3\0\1\272\1\0\2\37\3\0\2\37"+
    "\1\40\2\37\2\40\1\37\1\0\2\37\1\302\5\40"+
    "\2\0\2\37\3\0\1\303\1\0\4\40\1\304\3\0"+
    "\1\u0181\14\40\1\37\2\40\2\0\1\40\4\37\3\0"+
    "\1\272\1\0\2\37\3\0\2\37\1\40\2\37\2\40"+
    "\1\37\1\0\2\37\1\302\5\40\2\0\2\37\3\0"+
    "\1\303\1\0\4\40\1\304\3\0\7\40\1\u0182\5\40"+
    "\1\37\2\40\2\0\1\40\4\37\3\0\1\272\1\0"+
    "\2\37\3\0\2\37\1\40\2\37\2\40\1\37\1\0"+
    "\2\37\1\302\5\40\2\0\2\37\3\0\1\303\1\0"+
    "\3\40\1\u0183\1\304\3\0\15\40\1\37\2\40\2\0"+
    "\1\40\4\37\3\0\1\272\1\0\2\37\3\0\2\37"+
    "\1\40\2\37\2\40\1\37\1\0\2\37\1\302\5\40"+
    "\2\0\2\37\3\0\1\303\1\0\3\40\1\u0184\1\304"+
    "\3\0\15\40\1\37\2\40\2\0\1\40\4\37\3\0"+
    "\1\272\1\0\2\37\3\0\2\37\1\40\2\37\2\40"+
    "\1\37\1\0\2\37\1\302\5\40\2\0\2\37\3\0"+
    "\1\303\1\0\3\40\1\u0185\1\304\3\0\15\40\1\37"+
    "\2\40\2\0\1\40\4\37\3\0\1\272\1\0\2\37"+
    "\3\0\2\37\1\40\2\37\2\40\1\37\1\0\2\37"+
    "\1\302\5\40\2\0\2\37\3\0\1\303\1\0\3\40"+
    "\1\u0186\1\304\3\0\15\40\1\37\2\40\2\0\1\40"+
    "\4\37\3\0\1\272\1\0\2\37\3\0\2\37\1\40"+
    "\2\37\2\40\1\37\1\0\2\37\1\302\5\40\2\0"+
    "\2\37\3\0\1\303\1\0\4\40\1\304\3\0\1\40"+
    "\1\u0187\13\40\1\37\2\40\2\0\1\40\4\37\3\0"+
    "\1\272\1\0\2\37\3\0\2\37\1\40\2\37\2\40"+
    "\1\37\1\0\2\37\1\302\5\40\2\0\2\37\3\0"+
    "\1\303\1\0\1\40\1\u0188\2\40\1\304\3\0\15\40"+
    "\1\37\2\40\2\0\1\40\4\37\3\0\1\272\1\0"+
    "\2\37\3\0\2\37\1\40\2\37\2\40\1\37\1\0"+
    "\2\37\1\302\5\40\2\0\2\37\3\0\1\303\1\0"+
    "\4\40\1\304\3\0\6\40\1\u0189\6\40\1\37\2\40"+
    "\2\0\1\40\4\37\2\u0154\1\u018a\100\u0154\3\0\1\u018b"+
    "\102\0\1\u0152\1\0\2\u0154\7\0\3\u0154\3\0\1\u0154"+
    "\1\0\5\u0154\11\0\4\u0154\4\0\15\u0154\1\0\2\u0154"+
    "\2\0\1\u0154\2\0\2\u0154\2\u0157\1\u018c\100\u0157\3\0"+
    "\1\u018d\102\0\1\u0155\1\0\2\u0157\7\0\3\u0157\3\0"+
    "\1\u0157\1\0\5\u0157\11\0\4\u0157\4\0\15\u0157\1\0"+
    "\2\u0157\2\0\1\u0157\2\0\2\u0157\2\u015c\1\u018e\100\u015c"+
    "\3\0\1\u015b\1\0\2\u015c\1\u013d\5\0\1\u018f\3\u015c"+
    "\2\0\1\u015d\1\u015c\1\u015d\5\u015c\3\0\1\u015d\5\0"+
    "\4\u015c\4\0\15\u015c\1\0\2\u015c\2\0\1\u015c\2\0"+
    "\2\u015c\3\0\1\u015b\3\0\1\u013d\5\0\1\u018f\2\u015c"+
    "\1\u015d\2\0\1\u015d\1\u015c\2\u015d\3\u015c\1\u015d\3\0"+
    "\1\u015d\5\0\4\u015c\4\0\15\u015c\1\0\2\u015c\2\0"+
    "\1\u015c\2\0\2\u015c\3\0\1\u0190\1\u015f\13\0\1\u0160"+
    "\5\0\1\u0161\3\0\1\u0160\3\0\1\u0162\2\0\1\u015f"+
    "\1\0\1\u015f\57\0\1\u0160\5\0\1\u0160\3\0\1\u0160"+
    "\76\0\1\u0191\1\u0192\2\0\1\u0191\53\0\1\272\1\0"+
    "\2\37\3\0\2\37\1\40\2\37\2\40\1\37\1\0"+
    "\2\37\1\302\5\40\2\0\2\37\3\0\1\303\1\0"+
    "\4\40\1\304\3\0\1\40\1\u0193\13\40\1\37\2\40"+
    "\2\0\1\40\4\37\1\155\2\0\1\u0111\1\0\2\155"+
    "\3\0\10\155\1\0\10\155\2\0\2\155\1\0\1\155"+
    "\1\0\1\155\1\0\5\155\1\0\3\155\1\u0194\25\155"+
    "\1\0\1\u0121\1\u0122\104\0\1\244\34\0\1\244\1\0"+
    "\1\244\40\0\1\u016b\2\0\1\244\34\0\1\244\1\0"+
    "\1\244\37\0\1\240\2\0\1\240\1\0\2\240\1\u0195"+
    "\1\246\11\240\1\0\12\240\1\0\1\240\1\0\1\240"+
    "\1\0\1\240\1\0\37\240\7\0\1\u0196\1\u0197\72\0"+
    "\1\240\2\0\1\240\1\0\2\240\1\u0198\1\240\1\247"+
    "\10\240\1\0\12\240\1\0\1\240\1\0\1\240\1\0"+
    "\1\240\1\0\37\240\7\0\1\u0199\1\0\1\u019a\72\0"+
    "\1\u0171\101\0\1\u012e\1\u012f\3\u012e\2\u0130\1\u0131\4\u012e"+
    "\1\u0132\1\u012e\1\u0133\2\u0134\2\u012e\2\u0134\1\u0133\5\u0134"+
    "\3\u012e\1\u0134\3\u012e\1\u0177\1\u012e\4\u0134\4\u012e\15\u0134"+
    "\1\u012e\2\u0134\2\u012e\1\u0134\2\u012e\1\u0134\1\u0133\1\u012e"+
    "\1\u012f\1\u012e\1\u0133\1\u012e\2\u0174\7\u012e\2\u0133\1\u0174"+
    "\3\u012e\1\u0133\1\u012e\1\u0174\3\u0133\1\u0174\11\u012e\4\u0133"+
    "\4\u012e\15\u0133\1\u012e\2\u0133\2\u012e\1\u0133\2\u012e\2\u0133"+
    "\7\0\1\u0173\4\0\1\u0175\2\0\1\u0175\1\u0176\5\0"+
    "\1\u0176\3\u0175\1\u0176\11\0\4\u0175\4\0\15\u0175\1\0"+
    "\2\u0175\2\0\1\u0175\20\0\1\u0175\2\0\1\u0175\1\u0176"+
    "\5\0\1\u0176\3\u0175\1\u0176\11\0\4\u0175\4\0\15\u0175"+
    "\1\0\2\u0175\2\0\1\u0175\5\0\1\u0178\1\0\1\272"+
    "\1\0\2\37\3\0\10\37\1\0\10\37\2\0\2\37"+
    "\3\0\1\37\1\0\4\37\4\0\20\37\2\0\5\37"+
    "\1\0\1\u013e\1\0\1\u013c\1\0\2\u013e\1\u013d\2\0"+
    "\3\37\1\u017e\3\u013e\1\37\1\0\1\u013f\1\u013e\1\u013f"+
    "\5\u013e\2\0\1\37\1\u013f\3\0\1\37\1\0\4\u013e"+
    "\4\0\15\u013e\1\37\2\u013e\2\0\1\u013e\2\37\2\u013e"+
    "\3\0\1\u015b\3\0\1\u013d\4\0\1\u017d\1\u018f\1\u015c"+
    "\1\u019b\1\u017d\2\0\1\u015d\1\u015c\1\u015d\1\u017d\3\u019b"+
    "\1\u017d\3\0\1\u015d\5\0\4\u019b\4\0\15\u019b\1\0"+
    "\2\u019b\2\0\1\u019b\2\0\2\u015c\3\0\1\272\1\0"+
    "\2\37\3\0\2\37\1\40\2\37\2\40\1\37\1\0"+
    "\2\37\1\302\5\40\2\0\2\37\3\0\1\303\1\0"+
    "\4\40\1\304\3\0\1\40\1\u019c\13\40\1\37\2\40"+
    "\2\0\1\40\4\37\3\0\1\272\1\0\2\37\3\0"+
    "\2\37\1\40\2\37\2\40\1\37\1\0\2\37\1\302"+
    "\5\40\2\0\2\37\3\0\1\303\1\0\1\u019d\3\40"+
    "\1\304\3\0\15\40\1\37\2\40\2\0\1\40\4\37"+
    "\3\0\1\272\1\0\2\37\3\0\2\37\1\40\2\37"+
    "\2\40\1\37\1\0\2\37\1\302\5\40\2\0\2\37"+
    "\3\0\1\303\1\0\4\40\1\304\3\0\6\40\1\u019e"+
    "\6\40\1\37\2\40\2\0\1\40\4\37\3\0\1\272"+
    "\1\0\2\37\3\0\2\37\1\40\2\37\2\40\1\37"+
    "\1\0\2\37\1\302\5\40\2\0\2\37\3\0\1\303"+
    "\1\0\3\40\1\u019f\1\304\3\0\15\40\1\37\2\40"+
    "\2\0\1\40\4\37\1\0\1\u0154\1\0\1\u0152\1\0"+
    "\2\u0154\7\0\3\u0154\3\0\1\u0154\1\0\5\u0154\11\0"+
    "\4\u0154\4\0\15\u0154\1\0\2\u0154\2\0\1\u0154\2\0"+
    "\2\u0154\1\0\1\u01a0\1\u01a1\101\0\1\u0157\1\0\1\u0155"+
    "\1\0\2\u0157\7\0\3\u0157\3\0\1\u0157\1\0\5\u0157"+
    "\11\0\4\u0157\4\0\15\u0157\1\0\2\u0157\2\0\1\u0157"+
    "\2\0\2\u0157\1\0\1\u01a2\1\u01a3\101\0\1\u015c\1\0"+
    "\1\u015b\1\0\2\u015c\1\u013d\5\0\1\u018f\3\u015c\2\0"+
    "\1\u015d\1\u015c\1\u015d\5\u015c\3\0\1\u015d\5\0\4\u015c"+
    "\4\0\15\u015c\1\0\2\u015c\2\0\1\u015c\2\0\2\u015c"+
    "\1\0\1\u01a4\1\u01a5\126\0\1\u0191\3\0\1\u0191\70\0"+
    "\1\u01a6\5\0\1\u01a6\1\0\3\u01a6\14\0\1\u01a6\5\0"+
    "\2\u01a6\1\0\1\u01a6\2\0\1\u01a6\17\0\1\240\2\0"+
    "\1\240\1\0\3\240\1\246\11\240\1\0\12\240\1\0"+
    "\1\240\1\0\1\240\1\0\1\240\1\0\37\240\10\0"+
    "\1\u0197\72\0\10\u0125\1\0\72\u0125\1\240\2\0\1\240"+
    "\1\0\4\240\1\247\10\240\1\0\12\240\1\0\1\240"+
    "\1\0\1\240\1\0\1\240\1\0\37\240\11\0\1\u019a"+
    "\71\0\11\u0127\1\0\71\u0127\3\0\1\u015b\1\0\2\u015c"+
    "\1\u013d\4\0\1\u017d\1\u018f\1\u015c\2\u019b\2\0\1\u015d"+
    "\1\u015c\1\u015d\5\u019b\3\0\1\u015d\5\0\4\u019b\4\0"+
    "\15\u019b\1\0\2\u019b\2\0\1\u019b\2\0\2\u015c\3\0"+
    "\1\272\1\0\2\37\3\0\2\37\1\40\2\37\2\40"+
    "\1\37\1\0\2\37\1\302\5\40\2\0\2\37\3\0"+
    "\1\303\1\0\1\u01a7\3\40\1\304\3\0\15\40\1\37"+
    "\2\40\2\0\1\40\4\37\3\0\1\272\1\0\2\37"+
    "\3\0\2\37\1\40\2\37\2\40\1\37\1\0\2\37"+
    "\1\302\5\40\2\0\2\37\3\0\1\303\1\0\1\40"+
    "\1\u01a8\2\40\1\304\3\0\15\40\1\37\2\40\2\0"+
    "\1\40\4\37\1\0\1\u01a0\102\0\1\u01a2\102\0\1\u01a4"+
    "\2\0\1\u015f\13\0\1\u0160\5\0\1\u0161\3\0\1\u0160"+
    "\3\0\1\u0162\2\0\1\u015f\1\0\1\u015f\42\0\1\272"+
    "\1\0\2\37\3\0\2\37\1\40\2\37\2\40\1\37"+
    "\1\0\2\37\1\302\5\40\2\0\2\37\3\0\1\303"+
    "\1\0\4\40\1\304\3\0\5\40\1\u01a9\7\40\1\37"+
    "\2\40\2\0\1\40\4\37\3\0\1\272\1\0\2\37"+
    "\3\0\2\37\1\40\2\37\2\40\1\37\1\0\2\37"+
    "\1\302\5\40\2\0\2\37\3\0\1\303\1\0\4\40"+
    "\1\304\3\0\1\u01aa\14\40\1\37\2\40\2\0\1\40"+
    "\4\37";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17554];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\24\0\2\11\6\1\1\11\4\1\1\11\3\1\2\11"+
    "\6\1\1\11\1\1\2\11\26\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\3\1\1\11\6\1\1\11"+
    "\1\1\2\11\6\1\2\11\14\1\1\11\7\1\1\11"+
    "\1\1\1\11\2\1\2\11\3\1\1\11\2\1\1\11"+
    "\3\1\2\11\2\1\3\11\1\1\5\11\1\1\6\11"+
    "\2\1\1\11\16\1\2\11\1\1\1\0\1\1\1\0"+
    "\4\1\1\0\1\11\1\0\1\1\2\11\1\0\1\11"+
    "\3\1\1\11\4\1\2\11\22\1\1\0\2\11\1\0"+
    "\1\11\1\1\1\11\6\1\3\11\1\1\1\11\1\0"+
    "\1\1\2\11\2\0\1\1\1\0\4\11\1\1\1\0"+
    "\2\11\1\1\3\11\1\1\1\11\1\1\2\11\1\0"+
    "\1\11\2\0\1\1\1\11\7\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\0\5\11\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\11\2\1\11\0\1\11\1\1\1\11"+
    "\2\1\1\0\1\1\2\0\2\1\4\11\5\1\1\11"+
    "\10\1\1\0\2\1\1\0\2\1\3\11\3\0\1\1"+
    "\1\0\2\1\5\11\3\1\1\0\6\1\1\11\1\1"+
    "\4\0\4\1\1\11\1\1\1\0\15\1\1\0\1\1"+
    "\2\0\1\11\1\0\1\1\1\0\3\1\2\0\1\1"+
    "\3\0\4\1\1\11\1\1\1\11\1\1\2\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
    long yychar = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BashLexerBase(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 173: break;
          case 2: 
            { if ((yystate() == S_HERE_STRING || yystate() == S_PARAM_EXPANSION || yystate() == S_SUBSHELL || yystate() == S_ARITH || yystate() == S_ARITH_SQUARE_MODE) && isInState(S_HEREDOC)) {
                                                backToPreviousState();
                                                return LINE_FEED;
                                            }

                                            if (!heredocState().isEmpty()) {
                                                // first linebreak after the start marker
                                                goToState(S_HEREDOC);
                                                return LINE_FEED;
                                            }

                                           return LINE_FEED;
            }
          case 174: break;
          case 3: 
            { return BACKSLASH;
            }
          case 175: break;
          case 4: 
            { return WHITESPACE;
            }
          case 176: break;
          case 5: 
            { return COMMENT;
            }
          case 177: break;
          case 6: 
            { return BANG_TOKEN;
            }
          case 178: break;
          case 7: 
            { return DOLLAR;
            }
          case 179: break;
          case 8: 
            { stringParsingState().enterString(); goToState(S_STRINGMODE); return STRING_BEGIN;
            }
          case 180: break;
          case 9: 
            { return WORD;
            }
          case 181: break;
          case 10: 
            { return INTEGER_LITERAL;
            }
          case 182: break;
          case 11: 
            { return SEMI;
            }
          case 183: break;
          case 12: 
            { return AT;
            }
          case 184: break;
          case 13: 
            { return RIGHT_PAREN;
            }
          case 185: break;
          case 14: 
            { if (yystate() == S_BACKQUOTE) backToPreviousState(); else goToState(S_BACKQUOTE); return BACKQUOTE;
            }
          case 186: break;
          case 15: 
            { return AMP;
            }
          case 187: break;
          case 16: 
            { return PIPE;
            }
          case 188: break;
          case 17: 
            { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); goToState(S_ARITH_SQUARE_MODE); return EXPR_ARITH_SQUARE;
            }
          case 189: break;
          case 18: 
            { return EQ;
            }
          case 190: break;
          case 19: 
            { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); stringParsingState().enterSubshell(); goToState(S_SUBSHELL); return LEFT_PAREN;
            }
          case 191: break;
          case 20: 
            { return LEFT_CURLY;
            }
          case 192: break;
          case 21: 
            { if (yystate() == S_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return HEREDOC_LINE; return RIGHT_CURLY;
            }
          case 193: break;
          case 22: 
            { return GREATER_THAN;
            }
          case 194: break;
          case 23: 
            { return LESS_THAN;
            }
          case 195: break;
          case 24: 
            { return COND_OP_NOT;
            }
          case 196: break;
          case 25: 
            { if (isEmptyConditionalCommand()) {
                                    setEmptyConditionalCommand(false);
                                    backToPreviousState();
                                    return _EXPR_CONDITIONAL;
                                 } else {
                                    setEmptyConditionalCommand(false);
                                    return WORD;
                                 }
            }
          case 197: break;
          case 26: 
            { return COND_OP;
            }
          case 198: break;
          case 27: 
            { return LEFT_PAREN;
            }
          case 199: break;
          case 28: 
            { return ARITH_BASE_CHAR;
            }
          case 200: break;
          case 29: 
            { return ARITH_NEGATE;
            }
          case 201: break;
          case 30: 
            { return ARITH_BITWISE_XOR;
            }
          case 202: break;
          case 31: 
            { return RIGHT_SQUARE;
            }
          case 203: break;
          case 32: 
            { return ARITH_NUMBER;
            }
          case 204: break;
          case 33: 
            { return COMMA;
            }
          case 205: break;
          case 34: 
            { return ARITH_MULT;
            }
          case 206: break;
          case 35: 
            { return ARITH_PLUS;
            }
          case 207: break;
          case 36: 
            { decOpenParenthesisCount(); return RIGHT_PAREN;
            }
          case 208: break;
          case 37: 
            { return ARITH_BITWISE_AND;
            }
          case 209: break;
          case 38: 
            { return ARITH_MINUS;
            }
          case 210: break;
          case 39: 
            { return LEFT_SQUARE;
            }
          case 211: break;
          case 40: 
            { incOpenParenthesisCount(); return LEFT_PAREN;
            }
          case 212: break;
          case 41: 
            { return ARITH_BITWISE_NEGATE;
            }
          case 213: break;
          case 42: 
            { return ARITH_GT;
            }
          case 214: break;
          case 43: 
            { return ARITH_LT;
            }
          case 215: break;
          case 44: 
            { return ARITH_DIV;
            }
          case 216: break;
          case 45: 
            { return ARITH_MOD;
            }
          case 217: break;
          case 46: 
            { return ARITH_QMARK;
            }
          case 218: break;
          case 47: 
            { return ARITH_COLON;
            }
          case 219: break;
          case 48: 
            { backToPreviousState(); return _EXPR_ARITH_SQUARE;
            }
          case 220: break;
          case 49: 
            { return EXPR_ARITH_SQUARE;
            }
          case 221: break;
          case 50: 
            { backToPreviousState(); return RIGHT_SQUARE;
            }
          case 222: break;
          case 51: 
            { backToPreviousState(); return RIGHT_PAREN;
            }
          case 223: break;
          case 52: 
            { backToPreviousState(); if (stringParsingState().isInSubshell()) stringParsingState().leaveSubshell(); return RIGHT_PAREN;
            }
          case 224: break;
          case 53: 
            { backToPreviousState(); goToState(S_ARITH_ARRAY_MODE); return LEFT_SQUARE;
            }
          case 225: break;
          case 54: 
            { goToState(S_ARITH_ARRAY_MODE); return LEFT_SQUARE;
            }
          case 226: break;
          case 55: 
            { return STRING_DATA;
            }
          case 227: break;
          case 56: 
            { if (!stringParsingState().isInSubstring() && stringParsingState().isSubstringAllowed()) {
                                    stringParsingState().enterString();
                                    goToState(S_STRINGMODE);
                                    return STRING_BEGIN;
                                  }

                                  stringParsingState().leaveString();
                                  backToPreviousState();
                                  return STRING_END;
            }
          case 228: break;
          case 57: 
            { if (yystate() == S_BACKQUOTE) {
                                    backToPreviousState();
                                }
                                else {
                                    goToState(S_BACKQUOTE);
                                }
                                return BACKQUOTE;
            }
          case 229: break;
          case 58: 
            { setParamExpansionHash(isParamExpansionWord()); return PARAM_EXPANSION_OP_HASH;
            }
          case 230: break;
          case 59: 
            { return PARAM_EXPANSION_OP_EXCL;
            }
          case 231: break;
          case 60: 
            { setParamExpansionOther(true); return PARAM_EXPANSION_OP_UNKNOWN;
            }
          case 232: break;
          case 61: 
            { setParamExpansionOther(true); return PARAM_EXPANSION_OP_DOT;
            }
          case 233: break;
          case 62: 
            { setParamExpansionWord(true); return WORD;
            }
          case 234: break;
          case 63: 
            { return PARAM_EXPANSION_OP_STAR;
            }
          case 235: break;
          case 64: 
            { return PARAM_EXPANSION_OP_AT;
            }
          case 236: break;
          case 65: 
            { return PARAM_EXPANSION_OP_PLUS;
            }
          case 237: break;
          case 66: 
            { return PARAM_EXPANSION_OP_MINUS;
            }
          case 238: break;
          case 67: 
            { if (!isParamExpansionOther() && (!isParamExpansionWord() || !isParamExpansionHash())) {
                                    // If we expect an array reference parse the next tokens as arithmetic expression
                                    goToState(S_ARITH_ARRAY_MODE);
                                  }

                                  return LEFT_SQUARE;
            }
          case 239: break;
          case 68: 
            { return PARAM_EXPANSION_OP_EQ;
            }
          case 240: break;
          case 69: 
            { setParamExpansionWord(false); setParamExpansionHash(false); setParamExpansionOther(false);
                                  return LEFT_CURLY;
            }
          case 241: break;
          case 70: 
            { setParamExpansionWord(false); setParamExpansionHash(false); setParamExpansionOther(false);
                                  backToPreviousState();
                                  return RIGHT_CURLY;
            }
          case 242: break;
          case 71: 
            { setParamExpansionOther(true); return PARAM_EXPANSION_OP_SLASH;
            }
          case 243: break;
          case 72: 
            { setParamExpansionOther(true); return PARAM_EXPANSION_OP_PERCENT;
            }
          case 244: break;
          case 73: 
            { setParamExpansionOther(true); return PARAM_EXPANSION_OP_QMARK;
            }
          case 245: break;
          case 74: 
            { return PARAM_EXPANSION_OP_COLON;
            }
          case 246: break;
          case 75: 
            { heredocState().pushMarker(yytext(), yystate() == S_HEREDOC_MARKER_IGNORE_TABS);
        backToPreviousState();

        return HEREDOC_MARKER_START;
            }
          case 247: break;
          case 76: 
            { return LINE_FEED;
            }
          case 248: break;
          case 77: 
            { if (heredocState().isNextMarker(yytext())) {
                boolean ignoreTabs = heredocState().isIgnoringTabs();

                heredocState().popMarker(yytext());
                popStates(S_HEREDOC);

                return ignoreTabs ? HEREDOC_MARKER_IGNORING_TABS_END : HEREDOC_MARKER_END;
            }

            return HEREDOC_LINE;
            }
          case 249: break;
          case 78: 
            { if (!heredocState().isEmpty()) {
                                        return HEREDOC_LINE;
                                  }
                                  return LINE_FEED;
            }
          case 250: break;
          case 79: 
            { return HEREDOC_LINE;
            }
          case 251: break;
          case 80: 
            { if (heredocState().isNextMarker(yytext())) {
                boolean ignoreTabs = heredocState().isIgnoringTabs();

                heredocState().popMarker(yytext());
                popStates(S_HEREDOC);

                return ignoreTabs ? HEREDOC_MARKER_IGNORING_TABS_END : HEREDOC_MARKER_END;
         }

         return HEREDOC_LINE;
            }
          case 252: break;
          case 81: 
            { if (isInHereStringContent()) { leaveHereStringContent(); backToPreviousState(); } return WHITESPACE;
            }
          case 253: break;
          case 82: 
            { if (!isInHereStringContent()) enterHereStringContent(); return WORD;
            }
          case 254: break;
          case 83: 
            { yypushback(1); backToPreviousState();
            }
          case 255: break;
          case 84: 
            { return SHEBANG;
            }
          case 256: break;
          case 85: 
            { return VARIABLE;
            }
          case 257: break;
          case 86: 
            { yypushback(1); goToState(S_ARITH_SQUARE_MODE); return DOLLAR;
            }
          case 258: break;
          case 87: 
            { if (yystate() == S_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return HEREDOC_LINE; goToState(S_PARAM_EXPANSION); yypushback(1); return DOLLAR;
            }
          case 259: break;
          case 88: 
            { return STRING2;
            }
          case 260: break;
          case 89: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return ASSIGNMENT_WORD;
            }
          case 261: break;
          case 90: 
            { return ADD_EQ;
            }
          case 262: break;
          case 91: 
            { return FILEDESCRIPTOR;
            }
          case 263: break;
          case 92: 
            { return AND_AND;
            }
          case 264: break;
          case 93: 
            { if (isBash4()) {
                                        return REDIRECT_AMP_GREATER;
                                    } else {
                                        yypushback(1);
                                        return AMP;
                                    }
            }
          case 265: break;
          case 94: 
            { if (isBash4()) {
                                        return PIPE_AMP;
                                     } else {
                                        yypushback(1);
                                        return PIPE;
                                     }
            }
          case 266: break;
          case 95: 
            { return OR_OR;
            }
          case 267: break;
          case 96: 
            { goToState(S_TEST); setEmptyConditionalCommand(false); return EXPR_CONDITIONAL;
            }
          case 268: break;
          case 97: 
            { return IN_KEYWORD;
            }
          case 269: break;
          case 98: 
            { return IF_KEYWORD;
            }
          case 270: break;
          case 99: 
            { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); goToState(S_ARITH); return EXPR_ARITH;
            }
          case 271: break;
          case 100: 
            { return DO_KEYWORD;
            }
          case 272: break;
          case 101: 
            { return FI_KEYWORD;
            }
          case 273: break;
          case 102: 
            { return REDIRECT_GREATER_BAR;
            }
          case 274: break;
          case 103: 
            { return SHIFT_RIGHT;
            }
          case 275: break;
          case 104: 
            { return REDIRECT_LESS_GREATER;
            }
          case 276: break;
          case 105: 
            { goToState(S_HEREDOC_MARKER);
        return HEREDOC_MARKER_TAG;
            }
          case 277: break;
          case 106: 
            { backToPreviousState(); setEmptyConditionalCommand(false); return _EXPR_CONDITIONAL;
            }
          case 278: break;
          case 107: 
            { return COND_OP_EQ_EQ;
            }
          case 279: break;
          case 108: 
            { return COND_OP_REGEX;
            }
          case 280: break;
          case 109: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { goToState(S_DOLLAR_PREFIXED); return DOLLAR;
            }
          case 281: break;
          case 110: 
            { return ARITH_NE;
            }
          case 282: break;
          case 111: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (yystate() == S_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return HEREDOC_LINE; goToState(S_DOLLAR_PREFIXED); return DOLLAR;
            }
          case 283: break;
          case 112: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { goToState(S_ARRAY); return ASSIGNMENT_WORD;
            }
          case 284: break;
          case 113: 
            { return ARITH_EXPONENT;
            }
          case 285: break;
          case 114: 
            { return ARITH_ASS_MUL;
            }
          case 286: break;
          case 115: 
            { return ARITH_PLUS_PLUS;
            }
          case 287: break;
          case 116: 
            { return ARITH_ASS_PLUS;
            }
          case 288: break;
          case 117: 
            { return ARITH_OCTAL_NUMBER;
            }
          case 289: break;
          case 118: 
            { if (openParenthesisCount() > 0) {
                                    decOpenParenthesisCount();
                                    yypushback(1);

                                    return RIGHT_PAREN;
                                  } else {
                                    backToPreviousState();

                                    return _EXPR_ARITH;
                                  }
            }
          case 290: break;
          case 119: 
            { return ARITH_MINUS_MINUS;
            }
          case 291: break;
          case 120: 
            { return ARITH_ASS_MINUS;
            }
          case 292: break;
          case 121: 
            { return ARITH_EQ;
            }
          case 293: break;
          case 122: 
            { return ARITH_GE;
            }
          case 294: break;
          case 123: 
            { return ARITH_SHIFT_RIGHT;
            }
          case 295: break;
          case 124: 
            { return ARITH_LE;
            }
          case 296: break;
          case 125: 
            { return ARITH_SHIFT_LEFT;
            }
          case 297: break;
          case 126: 
            { return ARITH_ASS_DIV;
            }
          case 298: break;
          case 127: 
            { return ARITH_ASS_MOD;
            }
          case 299: break;
          case 128: 
            { goToState(S_CASE_PATTERN); return CASE_END;
            }
          case 300: break;
          case 129: 
            { goToState(S_CASE_PATTERN);
                                 if (isBash4()) {
                                    return CASE_END;
                                 }
                                 else {
                                    yypushback(1);
                                    return SEMI;
                                 }
            }
          case 301: break;
          case 130: 
            { if (!isInCaseBody()) { setInCaseBody(true); goToState(S_CASE_PATTERN); }; return IN_KEYWORD;
            }
          case 302: break;
          case 131: 
            { setParamExpansionHash(isParamExpansionWord()); return PARAM_EXPANSION_OP_HASH_HASH;
            }
          case 303: break;
          case 132: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LEFT_SQUARE;
            }
          case 304: break;
          case 133: 
            { return PARAM_EXPANSION_OP_COLON_PLUS;
            }
          case 305: break;
          case 134: 
            { return PARAM_EXPANSION_OP_COLON_MINUS;
            }
          case 306: break;
          case 135: 
            { return PARAM_EXPANSION_OP_COLON_EQ;
            }
          case 307: break;
          case 136: 
            { return PARAM_EXPANSION_OP_COLON_QMARK;
            }
          case 308: break;
          case 137: 
            { /* ignored */
            }
          case 309: break;
          case 138: 
            { if (heredocState().isNextMarker(yytext())) {
                boolean ignoreTabs = heredocState().isIgnoringTabs();

                heredocState().popMarker(yytext());
                popStates(S_HEREDOC);

                return ignoreTabs ? HEREDOC_MARKER_IGNORING_TABS_END : HEREDOC_MARKER_END;
            }

            return yystate() == S_HEREDOC && heredocState().isExpectingEvaluatingHeredoc() && !"$".equals(yytext().toString())
                ? VARIABLE
                : HEREDOC_LINE;
            }
          case 310: break;
          case 139: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return ASSIGNMENT_WORD;
            }
          case 311: break;
          case 140: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { goToState(S_ASSIGNMENT_LIST); return ASSIGNMENT_WORD;
            }
          case 312: break;
          case 141: 
            { if (isBash4()) {
                                        return REDIRECT_AMP_GREATER_GREATER;
                                    } else {
                                        yypushback(2);
                                        return AMP;
                                    }
            }
          case 313: break;
          case 142: 
            { goToState(S_TEST_COMMAND); return BRACKET_KEYWORD;
            }
          case 314: break;
          case 143: 
            { yypushback(1); goToState(S_TEST); setEmptyConditionalCommand(true); return EXPR_CONDITIONAL;
            }
          case 315: break;
          case 144: 
            { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); yypushback(2); goToState(S_SUBSHELL); return LEFT_PAREN;
            }
          case 316: break;
          case 145: 
            { return LET_KEYWORD;
            }
          case 317: break;
          case 146: 
            { return FOR_KEYWORD;
            }
          case 318: break;
          case 147: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return REDIRECT_GREATER_AMP;
            }
          case 319: break;
          case 148: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return REDIRECT_LESS_AMP;
            }
          case 320: break;
          case 149: 
            { goToState(S_HEREDOC_MARKER_IGNORE_TABS);
        return HEREDOC_MARKER_TAG;
            }
          case 321: break;
          case 150: 
            { goToState(S_HERE_STRING); return REDIRECT_HERE_STRING;
            }
          case 322: break;
          case 151: 
            { backToPreviousState(); return _BRACKET_KEYWORD;
            }
          case 323: break;
          case 152: 
            { return ARITH_HEX_NUMBER;
            }
          case 324: break;
          case 153: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yypushback(1); return ARITH_MINUS;
            }
          case 325: break;
          case 154: 
            { return ARITH_ASS_SHIFT_RIGHT;
            }
          case 326: break;
          case 155: 
            { return ARITH_ASS_SHIFT_LEFT;
            }
          case 327: break;
          case 156: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { backToPreviousState(); goToState(S_ASSIGNMENT_LIST); return RIGHT_SQUARE;
            }
          case 328: break;
          case 157: 
            { goToState(S_CASE_PATTERN);
                                 if (!isBash4()) {
                                    yypushback(1);
                                 }
                                 return CASE_END;
            }
          case 329: break;
          case 158: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -3);
            { goToState(S_ASSIGNMENT_LIST); return ASSIGNMENT_WORD;
            }
          case 330: break;
          case 159: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 18;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 19;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { goToState(S_ARRAY); return ASSIGNMENT_WORD;
            }
          case 331: break;
          case 160: 
            { return TIME_KEYWORD;
            }
          case 332: break;
          case 161: 
            { return TRAP_KEYWORD;
            }
          case 333: break;
          case 162: 
            { return THEN_KEYWORD;
            }
          case 334: break;
          case 163: 
            { return ELIF_KEYWORD;
            }
          case 335: break;
          case 164: 
            { return ELSE_KEYWORD;
            }
          case 336: break;
          case 165: 
            { setInCaseBody(false); goToState(S_CASE); return CASE_KEYWORD;
            }
          case 337: break;
          case 166: 
            { return DONE_KEYWORD;
            }
          case 338: break;
          case 167: 
            { backToPreviousState(); return ESAC_KEYWORD;
            }
          case 339: break;
          case 168: 
            { backToPreviousState(); yypushback(yylength());
            }
          case 340: break;
          case 169: 
            { return UNTIL_KEYWORD;
            }
          case 341: break;
          case 170: 
            { return WHILE_KEYWORD;
            }
          case 342: break;
          case 171: 
            { return SELECT_KEYWORD;
            }
          case 343: break;
          case 172: 
            { return FUNCTION_KEYWORD;
            }
          case 344: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
