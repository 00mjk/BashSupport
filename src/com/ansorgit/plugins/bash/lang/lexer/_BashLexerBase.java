/*
 * Copyright (c) Joachim Ansorg, mail@ansorg-it.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/*** JFlex specification for Bash ****
    The Bash language is a beast. It contains many strange or unusual constructs
    and has a great flexibility in what is possible.
    The lexer tries to do as much as possible in the lexing phase to help the parser
    later on.

    A major problem is that tokens have to interpreted according to their context.
    e.g. a=b echo a=b
    has an assignment in front and a string as parameter to the echo command. So the EQ
    token (for the = character) has to be remapped to a WORD later on (see BashTokenTypeRemapper).

    Another problem is that string can contain unescaped substrings, e.g.
        "$(echo hello "$(echo "world")")" is just one stringParsingState(). But this string contains
    two levels of embedded strings in the embedded subshell command.
    The lexer parses a string as STRING_BEGIN, STRING_DATA and STRING_END. These
    tokens are mapped to a STRING later on by the lexer.MergingLexer class.

    Lexing all as a STRING token was the way to go. This worked, but for some strange
    reason the lexer got wrong offsets for this complex setup (returning the string only at the
    last occurence of "). That's why the token merging strategy was established.

    If you really want to hack on this lexer: Be careful :)
    There are unit tests for the lexer but there's no 100% coverage for all cases.

     @author Joachim Ansorg, mail@ansorg-it.com
**/

/** Based on the arc lexer (http://code.google.com/p/intelli-arc/) **/

package com.ansorgit.plugins.bash.lang.lexer;

import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>src/com/ansorgit/plugins/bash/lang/lexer/bash.flex</tt>
 */
public abstract class _BashLexerBase implements BashLexerDef {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int S_TEST = 2;
  public static final int S_TEST_COMMAND = 4;
  public static final int S_ARITH = 6;
  public static final int S_ARITH_SQUARE_MODE = 8;
  public static final int S_ARITH_ARRAY_MODE = 10;
  public static final int S_CASE = 12;
  public static final int S_CASE_PATTERN = 14;
  public static final int S_SUBSHELL = 16;
  public static final int S_DOLLAR_PREFIXED = 18;
  public static final int S_ARRAY = 20;
  public static final int S_ASSIGNMENT_LIST = 22;
  public static final int S_STRINGMODE = 24;
  public static final int S_PARAM_EXPANSION = 26;
  public static final int S_PARAM_EXPANSION_PATTERN = 28;
  public static final int S_PARAM_EXPANSION_DELIMITER = 30;
  public static final int S_PARAM_EXPANSION_REPLACEMENT = 32;
  public static final int S_BACKQUOTE = 34;
  public static final int S_HEREDOC_MARKER = 36;
  public static final int S_HEREDOC_MARKER_IGNORE_TABS = 38;
  public static final int S_HEREDOC = 40;
  public static final int S_HERE_STRING = 42;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 18, 18, 19, 19, 20, 20
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13824 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\100\1\36\1\56\1\102\1\1\1\60\1\53\1\103\1\100\1"+
    "\36\1\13\1\104\1\60\1\105\1\53\1\106\1\107\1\110\1\13\1\111\1\112\1\1\1\65"+
    "\1\1\1\25\2\13\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2"+
    "\1\1\71\1\1\1\114\1\1\1\123\1\13\1\124\1\1\1\125\7\1\2\13\1\30\1\105\1\114"+
    "\1\126\1\127\1\130\1\131\1\114\2\13\1\132\2\13\1\133\24\13\1\134\1\135\2\13"+
    "\1\134\2\13\1\136\1\137\1\140\3\13\1\137\3\13\1\30\2\1\1\13\1\1\5\13\1\141"+
    "\1\25\45\13\1\142\1\13\1\25\1\30\4\13\1\30\1\143\1\144\1\16\1\13\1\16\1\13"+
    "\1\16\1\144\1\71\3\13\1\145\1\1\1\146\1\114\2\1\1\114\5\13\1\27\2\13\1\147"+
    "\4\13\1\40\1\13\1\150\2\1\1\65\1\13\1\151\1\47\2\13\1\152\1\13\1\77\1\114"+
    "\2\1\1\13\1\112\3\13\1\47\2\1\2\114\1\153\5\1\1\107\2\13\1\145\1\154\1\114"+
    "\2\1\1\155\1\13\1\156\1\42\2\13\1\40\1\1\2\13\1\145\1\1\1\157\1\42\1\13\1"+
    "\151\6\1\1\160\1\161\14\13\4\1\21\13\1\141\2\13\1\141\1\162\1\13\1\151\3\13"+
    "\1\163\1\164\1\165\1\124\1\164\2\1\1\166\4\1\1\167\1\1\1\124\6\1\1\170\1\171"+
    "\1\172\1\173\1\174\3\1\1\175\147\1\2\13\1\150\2\13\1\150\10\13\1\176\1\177"+
    "\2\13\1\132\3\13\1\200\1\1\1\13\1\112\4\201\4\1\1\105\35\1\1\202\2\1\1\203"+
    "\1\25\4\13\1\204\1\25\4\13\1\133\1\107\1\13\1\151\1\25\4\13\1\150\1\1\1\13"+
    "\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\124\4\1\2\13\1"+
    "\151\20\13\1\124\1\13\1\205\1\1\2\13\1\150\1\105\1\13\1\151\4\13\1\40\2\1"+
    "\1\206\1\207\5\13\1\210\1\13\1\151\1\27\3\1\1\206\1\211\1\13\1\31\1\1\3\13"+
    "\1\145\1\207\2\13\1\145\1\1\1\114\1\1\1\212\1\42\1\13\1\40\1\13\1\112\1\1"+
    "\1\13\1\124\1\50\2\13\1\31\1\105\1\114\1\213\1\214\2\13\1\46\1\1\1\215\1\114"+
    "\1\13\1\216\3\13\1\217\1\220\1\221\1\30\1\66\1\222\1\223\1\201\2\13\1\133"+
    "\1\40\7\13\1\31\1\114\72\13\1\145\1\13\1\224\2\13\1\152\20\1\26\13\1\151\6"+
    "\13\1\77\2\1\1\112\1\225\1\56\1\226\1\227\6\13\1\16\1\1\1\155\25\13\1\151"+
    "\1\1\4\13\1\207\2\13\1\27\2\1\1\152\7\1\1\213\7\13\1\124\1\1\1\114\1\25\1"+
    "\30\1\25\1\30\1\230\4\13\1\150\1\231\1\232\2\1\1\233\1\13\1\140\1\234\2\151"+
    "\2\1\7\13\1\30\30\1\1\13\1\124\3\13\1\71\2\1\2\13\1\1\1\13\1\235\2\13\1\40"+
    "\1\13\1\151\2\13\1\236\3\1\11\13\1\151\1\114\5\1\2\13\1\27\3\13\1\145\11\1"+
    "\23\13\1\112\1\13\1\40\1\27\11\1\1\237\2\13\1\240\1\13\1\40\1\13\1\112\1\13"+
    "\1\150\4\1\1\13\1\241\1\13\1\40\1\13\1\77\4\1\3\13\1\242\4\1\1\71\1\243\1"+
    "\13\1\145\2\1\1\13\1\124\1\13\1\124\2\1\1\123\1\13\1\47\1\1\3\13\1\40\1\13"+
    "\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\155"+
    "\2\13\1\27\2\1\1\65\1\1\1\155\2\13\2\1\1\13\1\46\1\114\1\155\1\13\1\112\1"+
    "\65\1\1\2\13\1\244\1\155\2\13\1\31\1\245\1\246\2\1\1\13\1\22\1\152\5\1\1\247"+
    "\1\250\1\46\2\13\1\150\1\1\1\114\1\73\1\55\1\56\1\70\1\1\1\251\1\16\21\1\3"+
    "\13\1\1\1\252\1\114\12\1\2\13\1\150\2\1\1\253\2\1\3\13\1\1\1\254\1\114\2\1"+
    "\2\13\1\30\1\1\1\114\3\1\1\13\1\77\1\1\1\114\26\1\4\13\1\114\1\105\34\1\3"+
    "\13\1\46\20\1\71\13\1\77\16\1\14\13\1\145\53\1\2\13\1\150\75\1\44\13\1\112"+
    "\33\1\43\13\1\46\1\13\1\150\1\114\6\1\1\13\1\151\1\1\3\13\1\1\1\145\1\114"+
    "\1\155\1\255\1\13\67\1\4\13\1\47\1\71\3\1\1\155\6\1\1\16\77\1\6\13\1\30\1"+
    "\124\1\46\1\77\66\1\5\13\1\213\3\13\1\144\1\256\1\257\1\260\3\13\1\261\1\262"+
    "\1\13\1\263\1\264\1\36\24\13\1\265\1\13\1\36\1\133\1\13\1\133\1\13\1\213\1"+
    "\13\1\213\1\150\1\13\1\150\1\13\1\56\1\13\1\56\1\13\1\266\3\267\14\13\1\47"+
    "\123\1\1\260\1\13\1\270\1\271\1\272\1\273\1\274\1\275\1\276\1\152\1\277\1"+
    "\152\24\1\55\13\1\112\2\1\103\13\1\47\15\13\1\151\150\13\1\16\25\1\41\13\1"+
    "\151\36\1");

  /* The ZZ_CMAP_A table has 3072 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\1\1\37\1\40\1\2\22\0\1\42\1\6\1\10\1\5\1\7\1\100\1\21\1\11\1\50"+
    "\1\32\1\22\1\24\1\53\1\35\1\16\1\77\1\25\7\31\2\20\1\102\1\34\1\75\1\47\1"+
    "\74\1\101\1\23\6\27\1\76\4\17\1\76\1\17\2\76\3\17\1\76\7\17\1\41\1\3\1\15"+
    "\1\12\1\17\1\33\1\56\1\30\1\55\1\60\1\46\1\63\1\73\1\66\1\44\1\17\1\76\1\62"+
    "\1\45\1\54\1\61\1\70\1\72\1\64\1\57\1\43\1\65\1\17\1\67\1\26\1\17\1\76\1\51"+
    "\1\36\1\52\1\71\6\0\1\37\24\0\1\14\12\0\1\14\4\0\1\14\5\0\27\14\1\13\12\14"+
    "\4\0\14\14\16\0\5\14\7\0\1\14\1\0\1\14\1\0\5\14\1\0\2\14\2\0\4\14\1\0\1\14"+
    "\6\0\1\14\1\0\3\14\1\0\1\14\1\0\4\14\1\0\23\14\1\0\13\14\10\0\6\14\1\0\26"+
    "\14\2\0\1\14\6\0\10\14\10\0\13\14\5\0\3\14\15\0\12\13\4\0\6\14\1\0\1\14\17"+
    "\0\2\14\7\0\2\14\12\13\3\14\2\0\2\14\1\0\16\14\15\0\11\14\13\0\1\14\16\0\12"+
    "\13\6\14\4\0\2\14\4\0\1\14\5\0\6\14\4\0\1\14\11\0\1\14\3\0\1\14\7\0\11\14"+
    "\7\0\5\14\17\0\26\14\3\0\1\14\2\0\1\14\7\0\12\14\4\0\12\13\1\14\4\0\10\14"+
    "\2\0\2\14\2\0\26\14\1\0\7\14\1\0\1\14\3\0\4\14\3\0\1\14\20\0\1\14\15\0\2\14"+
    "\1\0\1\14\5\0\6\14\4\0\2\14\1\0\2\14\1\0\2\14\1\0\2\14\17\0\4\14\1\0\1\14"+
    "\7\0\12\13\2\0\3\14\20\0\11\14\1\0\2\14\1\0\2\14\1\0\5\14\3\0\1\14\2\0\1\14"+
    "\30\0\1\14\13\0\10\14\2\0\1\14\3\0\1\14\1\0\6\14\3\0\3\14\1\0\4\14\3\0\2\14"+
    "\1\0\1\14\1\0\2\14\3\0\2\14\3\0\3\14\3\0\14\14\13\0\10\14\1\0\2\14\10\0\3"+
    "\14\5\0\4\14\1\0\5\14\3\0\1\14\3\0\2\14\15\0\13\14\2\0\1\14\21\0\1\14\12\0"+
    "\6\14\5\0\22\14\3\0\10\14\1\0\11\14\1\0\1\14\2\0\7\14\11\0\1\14\1\0\2\14\14"+
    "\0\12\13\7\0\2\14\1\0\1\14\2\0\2\14\1\0\1\14\2\0\1\14\6\0\4\14\1\0\7\14\1"+
    "\0\3\14\1\0\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\0\2\14\11\0\1\14\2\0\5\14\1"+
    "\0\1\14\11\0\12\13\2\0\14\14\1\0\24\14\13\0\5\14\3\0\6\14\4\0\4\14\3\0\1\14"+
    "\3\0\2\14\7\0\3\14\4\0\15\14\14\0\1\14\1\0\6\14\1\0\1\14\5\0\1\14\2\0\13\14"+
    "\1\0\15\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\1\14\1\0\4\14\2\0\7\14"+
    "\1\0\1\14\1\0\4\14\2\0\17\14\1\0\16\14\2\0\6\14\2\0\15\14\2\0\1\14\1\0\10"+
    "\14\7\0\15\14\1\0\6\14\23\0\1\14\4\0\1\14\3\0\11\14\1\0\1\14\5\0\17\14\1\0"+
    "\16\14\2\0\14\14\13\0\1\14\15\0\7\14\7\0\16\14\15\0\2\14\12\13\3\0\3\14\11"+
    "\0\4\14\1\0\4\14\3\0\2\14\11\0\10\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\6\14\1"+
    "\0\7\14\1\0\1\14\3\0\3\14\1\0\7\14\3\0\4\14\2\0\6\14\14\0\2\37\7\0\1\14\15"+
    "\0\1\14\2\0\1\14\4\0\1\14\2\0\12\14\1\0\1\14\3\0\5\14\6\0\1\14\1\0\1\14\1"+
    "\0\1\14\1\0\4\14\1\0\13\14\2\0\4\14\5\0\5\14\4\0\1\14\4\0\2\14\13\0\5\14\6"+
    "\0\4\14\3\0\2\14\14\0\10\14\7\0\10\14\1\0\7\14\6\0\2\14\12\0\5\14\5\0\2\14"+
    "\3\0\7\14\6\0\3\14\12\13\2\14\13\0\11\14\2\0\27\14\2\0\7\14\1\0\3\14\1\0\4"+
    "\14\1\0\4\14\2\0\6\14\3\0\1\14\1\0\1\14\2\0\5\14\1\0\12\14\12\13\5\14\1\0"+
    "\3\14\1\0\10\14\4\0\7\14\3\0\1\14\3\0\2\14\1\0\1\14\3\0\2\14\2\0\5\14\2\0"+
    "\1\14\1\0\1\14\30\0\3\14\3\0\6\14\2\0\6\14\2\0\6\14\11\0\7\14\4\0\5\14\3\0"+
    "\5\14\5\0\1\14\1\0\10\14\1\0\5\14\1\0\1\14\1\0\2\14\1\0\2\14\1\0\12\14\6\0"+
    "\12\14\2\0\6\14\2\0\6\14\2\0\6\14\2\0\3\14\3\0\14\14\1\0\16\14\1\0\2\14\1"+
    "\0\2\14\1\0\10\14\6\0\4\14\4\0\16\14\2\0\1\14\1\0\14\14\1\0\2\14\3\0\1\14"+
    "\2\0\4\14\1\0\2\14\12\0\10\14\6\0\6\14\1\0\3\14\1\0\12\14\3\0\1\14\12\0\4"+
    "\14\13\0\12\13\1\14\1\0\1\14\3\0\7\14\1\0\1\14\1\0\4\14\1\0\17\14\1\0\2\14"+
    "\14\0\3\14\4\0\2\14\1\0\1\14\20\0\4\14\10\0\1\14\13\0\10\14\5\0\3\14\2\0\1"+
    "\14\2\0\2\14\2\0\4\14\1\0\14\14\1\0\1\14\1\0\7\14\1\0\21\14\1\0\4\14\2\0\10"+
    "\14\1\0\7\14\1\0\14\14\1\0\4\14\1\0\5\14\1\0\1\14\3\0\14\14\2\0\13\14\1\0"+
    "\10\14\2\0\22\13\1\0\2\14\1\0\1\14\2\0\1\14\1\0\12\14\1\0\4\14\1\0\1\14\1"+
    "\0\1\14\6\0\1\14\4\0\1\14\1\0\1\14\1\0\1\14\1\0\3\14\1\0\2\14\1\0\1\14\2\0"+
    "\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\2\14\1\0\1\14\2\0\4\14\1\0\7"+
    "\14\1\0\4\14\1\0\4\14\1\0\1\14\1\0\12\14\1\0\5\14\1\0\3\14\1\0\5\14\1\0\5"+
    "\14");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\2\11\1\12\1\13\1\14\1\11\1\12"+
    "\1\15\1\16\1\17\1\20\1\21\3\11\1\22\1\23"+
    "\1\24\1\25\7\11\1\26\1\27\1\3\1\30\1\31"+
    "\1\13\1\11\1\20\1\21\1\4\3\32\1\7\1\13"+
    "\1\20\1\4\1\33\1\3\1\34\1\35\1\7\1\36"+
    "\1\1\1\37\2\11\1\40\1\41\1\42\1\43\1\40"+
    "\1\44\1\45\1\20\1\46\1\22\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\1\1\62\1\11\1\1\1\17\3\11\1\3\1\5"+
    "\1\13\1\14\1\63\1\16\1\17\1\11\1\24\1\25"+
    "\1\26\1\27\1\64\1\23\1\21\1\1\2\12\1\65"+
    "\1\3\2\11\1\66\1\26\1\27\4\67\1\70\1\71"+
    "\1\3\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\2\114\1\115\1\116\1\117\1\120"+
    "\2\121\1\120\1\4\3\120\1\122\1\123\1\124\1\125"+
    "\1\1\1\126\1\1\2\127\1\13\1\1\2\0\2\4"+
    "\1\0\3\5\1\130\1\0\1\131\1\0\1\131\1\132"+
    "\1\133\1\0\1\134\2\11\1\135\1\136\1\137\1\136"+
    "\1\140\1\141\1\142\1\143\1\11\1\144\3\11\1\145"+
    "\1\146\1\11\1\147\2\11\1\150\1\11\1\151\4\11"+
    "\1\0\1\152\1\153\1\0\1\154\1\155\1\11\5\32"+
    "\2\11\1\156\1\157\1\160\1\155\1\161\1\162\1\163"+
    "\1\0\1\11\1\164\1\165\1\166\2\0\1\167\1\0"+
    "\1\170\1\171\1\172\1\173\1\174\1\175\1\0\1\176"+
    "\1\177\1\200\1\201\1\202\1\203\1\204\1\205\1\206"+
    "\1\207\1\210\1\0\1\167\2\0\1\211\1\212\1\213"+
    "\2\11\2\4\1\130\1\11\1\153\1\155\1\147\1\11"+
    "\1\0\1\67\1\76\1\214\1\215\1\0\1\216\1\217"+
    "\1\220\1\221\1\222\1\223\1\224\2\225\2\226\1\0"+
    "\1\120\1\0\1\120\1\0\1\124\2\227\1\127\1\0"+
    "\2\230\10\0\1\4\3\130\1\0\1\231\2\0\2\11"+
    "\1\232\1\233\1\234\1\235\5\11\1\236\3\11\1\237"+
    "\1\240\3\11\1\0\2\241\1\0\2\242\1\243\1\244"+
    "\1\245\3\0\1\246\1\0\3\247\1\250\1\251\1\252"+
    "\1\253\1\11\1\0\2\11\1\243\1\0\1\4\4\120"+
    "\1\126\5\0\2\130\1\134\1\254\1\11\1\0\1\255"+
    "\1\256\1\257\1\260\1\261\1\262\1\263\1\11\1\264"+
    "\3\11\1\241\1\0\1\242\2\0\1\255\1\0\1\247"+
    "\1\0\1\265\1\11\1\266\1\120\2\0\1\120\3\0"+
    "\2\11\1\267\1\270\1\241\1\242\1\0\1\247\1\271"+
    "\2\11\1\272";

  private static int [] zzUnpackAction() {
    int [] result = new int[451];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u0605"+
    "\0\u07da\0\u0754\0\u081d\0\u0860\0\u08a3\0\u0754\0\u08e6\0\u0754"+
    "\0\u0605\0\u0605\0\u0605\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0605\0\u0a78\0\u0605\0\u0605\0\u0abb\0\u0afe\0\u0b41\0\u0b84"+
    "\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0754"+
    "\0\u0605\0\u0d9c\0\u0ddf\0\u0754\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb"+
    "\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u0605\0\u103a\0\u0605\0\u107d"+
    "\0\u10c0\0\u1103\0\u1146\0\u0605\0\u1189\0\u11cc\0\u120f\0\u1252"+
    "\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u0605\0\u1427"+
    "\0\u0605\0\u0605\0\u0605\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1189"+
    "\0\u1189\0\u0605\0\u0605\0\u1576\0\u15b9\0\u15fc\0\u1427\0\u163f"+
    "\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u1708\0\u1708\0\u0605"+
    "\0\u1708\0\u1708\0\u17d1\0\u1708\0\u1708\0\u1814\0\u1857\0\u0605"+
    "\0\u189a\0\u0605\0\u18dd\0\u1920\0\u0605\0\u0605\0\u1963\0\u19a6"+
    "\0\u19e9\0\u0605\0\u0ea8\0\u0eeb\0\u0605\0\u1a2c\0\u06ce\0\u1a6f"+
    "\0\u0605\0\u0605\0\u1ab2\0\u1af5\0\u0605\0\u1b38\0\u0605\0\u1b7b"+
    "\0\u0605\0\u0605\0\u0605\0\u0605\0\u1bbe\0\u0605\0\u0605\0\u0605"+
    "\0\u1c01\0\u1c44\0\u0605\0\u0605\0\u1c87\0\u1cca\0\u1d0d\0\u0605"+
    "\0\u0605\0\u1d50\0\u1d93\0\u0605\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f"+
    "\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7"+
    "\0\u20fa\0\u213d\0\u0605\0\u2180\0\u21c3\0\u2206\0\u2249\0\u0754"+
    "\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u0d16\0\u0605"+
    "\0\u241e\0\u2461\0\u0605\0\u0605\0\u07da\0\u0605\0\u24a4\0\u24e7"+
    "\0\u252a\0\u256d\0\u0605\0\u0605\0\u25b0\0\u0605\0\u0605\0\u0605"+
    "\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u081d\0\u081d\0\u2742"+
    "\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u081d\0\u28d4\0\u2917"+
    "\0\u295a\0\u299d\0\u29e0\0\u0605\0\u0605\0\u2a23\0\u0605\0\u2a66"+
    "\0\u2aa9\0\u0605\0\u0754\0\u2aec\0\u2b2f\0\u2b72\0\u2b2f\0\u2bb5"+
    "\0\u0605\0\u0605\0\u0605\0\u2bf8\0\u0605\0\u0605\0\u0605\0\u2c3b"+
    "\0\u2c7e\0\u0605\0\u0605\0\u0605\0\u1146\0\u2cc1\0\u2d04\0\u103a"+
    "\0\u0605\0\u0605\0\u0605\0\u0605\0\u0605\0\u2d47\0\u2d8a\0\u0605"+
    "\0\u2dcd\0\u0605\0\u0605\0\u0605\0\u0605\0\u2e10\0\u0605\0\u2e53"+
    "\0\u0605\0\u0605\0\u1576\0\u0605\0\u2e96\0\u2ed9\0\u0605\0\u2f1c"+
    "\0\u081d\0\u2f5f\0\u2fa2\0\u0605\0\u2fe5\0\u3028\0\u306b\0\u1708"+
    "\0\u30ae\0\u0605\0\u30f1\0\u1963\0\u3134\0\u3177\0\u0605\0\u0605"+
    "\0\u1ab2\0\u0605\0\u0605\0\u0605\0\u0605\0\u0605\0\u0605\0\u0605"+
    "\0\u0605\0\u1cca\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309"+
    "\0\u334c\0\u0605\0\u0605\0\u338f\0\u33d2\0\u3415\0\u0605\0\u3458"+
    "\0\u2074\0\u349b\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d"+
    "\0\u3670\0\u0605\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802"+
    "\0\u3845\0\u3888\0\u0605\0\u0605\0\u0605\0\u0605\0\u38cb\0\u390e"+
    "\0\u3951\0\u3994\0\u39d7\0\u0605\0\u3a1a\0\u3a5d\0\u3aa0\0\u081d"+
    "\0\u081d\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75"+
    "\0\u3cb8\0\u3cfb\0\u0605\0\u0605\0\u0605\0\u3d3e\0\u3d81\0\u3dc4"+
    "\0\u2d8a\0\u3e07\0\u3e4a\0\u3e8d\0\u0605\0\u0605\0\u0605\0\u0605"+
    "\0\u0605\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u1708\0\u3fdc\0\u401f"+
    "\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237"+
    "\0\u427a\0\u349b\0\u0754\0\u42bd\0\u241e\0\u0605\0\u4300\0\u4343"+
    "\0\u0754\0\u081d\0\u081d\0\u081d\0\u081d\0\u081d\0\u081d\0\u4386"+
    "\0\u081d\0\u43c9\0\u440c\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b"+
    "\0\u459e\0\u0605\0\u45e1\0\u4624\0\u4667\0\u081d\0\u46aa\0\u1708"+
    "\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u48c2"+
    "\0\u4905\0\u081d\0\u081d\0\u4948\0\u498b\0\u49ce\0\u4667\0\u081d"+
    "\0\u4a11\0\u4a54\0\u081d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[451];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\2\42\1\43\2\42\1\43\1\44\1\45"+
    "\1\42\1\46\1\47\1\50\3\43\1\44\1\51\1\52"+
    "\1\53\1\42\1\54\1\0\1\34\1\55\1\34\1\56"+
    "\1\57\1\43\1\60\1\61\1\62\1\63\1\64\1\42"+
    "\1\43\1\65\1\43\1\66\1\67\1\43\1\70\1\71"+
    "\1\43\1\72\1\43\1\73\1\43\1\42\2\43\1\74"+
    "\1\75\1\43\4\42\1\30\1\31\1\32\1\76\1\34"+
    "\1\42\1\77\1\37\1\40\1\41\3\42\1\100\3\42"+
    "\1\101\1\42\1\46\6\42\1\30\1\52\1\53\1\102"+
    "\1\103\1\0\1\34\1\104\1\105\4\42\1\106\1\62"+
    "\1\63\1\64\21\42\1\107\1\110\5\42\1\30\1\31"+
    "\1\32\1\76\1\34\1\42\1\77\1\111\1\40\1\41"+
    "\7\42\1\112\1\42\1\46\6\42\1\51\1\52\1\53"+
    "\1\102\1\113\1\0\1\34\1\42\1\114\4\42\1\106"+
    "\1\115\1\63\1\64\21\42\1\107\1\110\5\42\1\30"+
    "\1\31\1\32\1\116\1\34\1\117\1\120\1\121\1\40"+
    "\1\41\1\122\1\30\1\123\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\125\1\132\1\133\3\126\1\127\1\134"+
    "\1\52\1\53\1\135\1\136\1\0\1\34\1\137\1\34"+
    "\4\126\1\140\1\141\1\63\1\64\1\142\15\126\1\143"+
    "\2\126\1\144\1\145\1\126\1\146\1\147\1\150\1\151"+
    "\1\30\1\31\1\32\1\116\1\34\1\117\1\120\1\121"+
    "\1\40\1\41\1\122\1\30\1\123\1\152\1\125\1\126"+
    "\1\127\1\130\1\131\1\125\1\132\1\133\3\126\1\127"+
    "\1\134\1\52\1\53\1\135\1\136\1\0\1\34\1\153"+
    "\1\34\4\126\1\140\1\141\1\63\1\64\1\142\15\126"+
    "\1\143\2\126\1\144\1\145\1\126\1\146\1\147\1\150"+
    "\1\151\1\30\1\31\1\32\1\116\1\34\1\117\1\120"+
    "\1\121\1\40\1\41\1\122\1\30\1\154\1\155\1\125"+
    "\1\156\1\127\1\130\1\131\1\125\1\132\1\133\3\156"+
    "\1\127\1\134\1\52\1\53\1\135\1\136\1\0\1\34"+
    "\1\30\1\34\4\156\1\157\1\141\1\63\1\64\1\142"+
    "\15\156\1\143\2\156\1\144\1\145\1\156\1\146\1\147"+
    "\1\150\1\151\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\121\1\40\1\41\2\42\1\43\2\42\1\43"+
    "\1\44\1\45\1\42\1\46\1\47\1\50\3\43\1\44"+
    "\1\51\1\52\1\160\1\42\1\54\1\0\1\34\1\55"+
    "\1\34\1\56\1\161\1\43\1\162\1\61\1\62\1\63"+
    "\1\64\1\42\1\43\1\65\1\43\1\66\1\67\1\43"+
    "\1\70\1\71\1\43\1\72\1\43\1\73\1\43\1\42"+
    "\2\43\1\74\1\75\1\43\4\42\1\163\1\31\1\32"+
    "\1\164\1\34\1\165\1\163\1\37\1\40\1\41\7\163"+
    "\1\166\1\163\1\167\6\163\1\170\1\171\1\172\1\163"+
    "\1\103\1\163\1\34\1\163\1\34\3\163\1\173\1\163"+
    "\1\115\1\174\1\175\21\163\1\176\1\177\5\163\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\2\42\1\43\2\42\1\43\1\44\1\45\1\42"+
    "\1\46\1\47\1\50\3\43\1\44\1\200\1\52\1\53"+
    "\1\42\1\54\1\0\1\34\1\55\1\34\1\56\1\57"+
    "\1\43\1\60\1\61\1\201\1\63\1\64\1\42\1\43"+
    "\1\65\1\43\1\66\1\67\1\43\1\70\1\71\1\43"+
    "\1\72\1\43\1\73\1\43\1\42\2\43\1\74\1\75"+
    "\1\43\4\42\1\30\2\0\34\30\2\0\1\202\6\30"+
    "\1\62\33\30\2\0\4\30\1\203\10\30\1\204\4\30"+
    "\1\205\3\30\1\204\5\30\2\0\1\206\10\30\1\64"+
    "\31\30\1\31\1\32\1\207\1\34\1\165\1\30\1\121"+
    "\1\40\1\41\1\210\1\30\1\210\1\30\6\210\1\211"+
    "\5\210\1\170\1\52\2\210\1\103\1\0\1\34\1\212"+
    "\1\34\4\210\1\61\1\115\1\63\1\64\21\210\1\213"+
    "\1\214\5\210\3\215\1\216\1\217\2\215\1\220\1\221"+
    "\22\215\1\222\4\215\1\217\1\215\1\217\40\215\1\30"+
    "\1\31\1\32\1\223\1\34\1\224\1\225\1\37\1\40"+
    "\1\41\1\226\2\30\1\124\1\227\2\230\1\101\1\231"+
    "\1\232\1\233\5\230\1\30\1\52\1\53\1\234\1\103"+
    "\1\0\1\34\1\235\1\34\4\230\1\236\1\62\1\237"+
    "\1\240\1\241\15\230\1\30\2\230\1\213\1\214\1\230"+
    "\1\242\1\243\1\244\1\245\3\246\1\247\46\246\1\250"+
    "\24\246\1\250\3\246\1\30\2\0\34\30\2\0\11\30"+
    "\1\250\24\30\1\251\3\30\52\252\1\250\30\252\1\30"+
    "\1\31\1\32\1\33\1\34\1\42\1\36\1\37\1\40"+
    "\1\41\2\42\1\43\2\42\1\43\1\44\1\45\1\42"+
    "\1\46\1\47\1\50\3\43\1\44\1\30\1\52\1\53"+
    "\1\42\1\54\1\0\1\34\1\55\1\34\1\56\1\57"+
    "\1\43\1\60\1\61\1\62\1\63\1\64\1\42\1\43"+
    "\1\65\1\43\1\66\1\67\1\43\1\70\1\71\1\43"+
    "\1\72\1\43\1\73\1\43\1\42\2\43\1\74\1\75"+
    "\1\43\4\42\1\253\1\254\1\255\1\256\1\257\2\253"+
    "\1\260\1\261\1\262\7\253\1\30\12\253\1\30\1\253"+
    "\1\30\1\253\1\257\1\253\1\257\40\253\1\263\2\264"+
    "\1\265\3\263\1\266\73\263\1\30\1\31\1\32\1\267"+
    "\1\270\2\30\1\271\1\40\1\41\3\272\1\273\3\272"+
    "\1\274\10\272\1\250\1\52\1\53\1\272\1\275\1\0"+
    "\1\270\1\273\1\270\4\272\1\30\1\115\2\273\21\272"+
    "\2\30\5\272\14\0\1\276\2\0\1\276\6\0\3\276"+
    "\12\0\4\276\5\0\15\276\1\0\2\276\2\0\1\276"+
    "\21\0\1\277\171\0\1\31\101\0\1\42\1\300\1\301"+
    "\100\42\3\0\1\302\77\0\1\303\2\0\1\304\1\303"+
    "\1\305\1\306\3\303\7\305\1\303\10\305\3\303\1\305"+
    "\3\303\1\305\1\303\4\305\4\303\21\305\2\303\5\305"+
    "\3\0\1\307\1\0\2\42\3\0\7\42\1\0\10\42"+
    "\3\0\1\42\3\0\1\42\1\0\4\42\4\0\21\42"+
    "\2\0\5\42\5\0\3\310\1\40\1\311\2\0\1\312"+
    "\2\0\1\312\1\310\1\0\2\310\1\0\1\310\3\312"+
    "\1\310\3\0\1\310\3\0\1\313\1\0\4\312\2\0"+
    "\1\314\2\0\15\312\1\0\2\312\2\0\1\312\2\0"+
    "\1\310\1\0\11\315\1\316\71\315\3\0\1\307\1\0"+
    "\2\42\3\0\2\42\1\43\2\42\2\43\1\0\2\42"+
    "\1\317\5\43\3\0\1\42\3\0\1\320\1\0\4\43"+
    "\1\321\3\0\1\42\15\43\1\42\2\43\2\0\1\43"+
    "\4\42\3\0\1\307\1\0\2\42\3\0\6\42\1\44"+
    "\1\0\3\42\1\44\3\42\1\44\3\0\1\42\3\0"+
    "\1\42\1\0\4\42\4\0\21\42\2\0\5\42\20\0"+
    "\1\322\1\323\3\0\1\324\3\0\1\322\3\0\1\324"+
    "\36\0\1\325\11\0\1\307\1\0\2\42\3\0\7\42"+
    "\1\0\10\42\3\0\1\42\3\0\1\42\1\0\4\42"+
    "\1\326\3\0\21\42\2\0\5\42\21\0\1\327\14\0"+
    "\1\330\47\0\1\307\1\0\2\42\3\0\7\42\1\0"+
    "\10\42\3\0\1\42\3\0\1\331\1\332\4\42\4\0"+
    "\21\42\2\0\5\42\3\0\1\307\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\317\5\43"+
    "\3\0\1\42\3\0\1\320\1\0\1\43\1\333\2\43"+
    "\1\321\3\0\1\42\10\43\1\334\1\43\1\335\2\43"+
    "\1\42\2\43\2\0\1\43\4\42\3\0\1\307\1\0"+
    "\2\42\3\0\2\42\1\43\2\42\2\43\1\0\2\42"+
    "\1\317\5\43\3\0\1\42\3\0\1\320\1\0\4\43"+
    "\1\321\3\0\1\42\1\336\6\43\1\337\5\43\1\42"+
    "\2\43\2\0\1\43\4\42\3\0\1\307\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\317"+
    "\5\43\3\0\1\42\3\0\1\320\1\0\4\43\1\321"+
    "\3\0\1\42\6\43\1\340\6\43\1\42\2\43\2\0"+
    "\1\43\4\42\50\0\1\341\35\0\1\307\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\317"+
    "\5\43\3\0\1\42\3\0\1\320\1\0\4\43\1\321"+
    "\3\0\1\42\2\43\1\342\12\43\1\42\2\43\2\0"+
    "\1\43\4\42\3\0\1\307\1\0\2\42\3\0\2\42"+
    "\1\43\2\42\2\43\1\0\2\42\1\317\5\43\3\0"+
    "\1\42\3\0\1\320\1\0\3\43\1\343\1\321\3\0"+
    "\1\42\15\43\1\42\2\43\2\0\1\43\4\42\3\0"+
    "\1\307\1\0\2\42\3\0\2\42\1\43\2\42\2\43"+
    "\1\0\2\42\1\317\5\43\3\0\1\42\3\0\1\320"+
    "\1\0\4\43\1\321\3\0\1\42\5\43\1\344\7\43"+
    "\1\42\2\43\2\0\1\43\4\42\3\0\1\307\1\0"+
    "\2\42\3\0\2\42\1\43\2\42\2\43\1\0\2\42"+
    "\1\317\5\43\3\0\1\42\3\0\1\320\1\0\3\43"+
    "\1\345\1\321\3\0\1\42\15\43\1\42\2\43\2\0"+
    "\1\43\4\42\3\0\1\307\1\0\2\42\3\0\2\42"+
    "\1\43\2\42\2\43\1\0\2\42\1\317\5\43\3\0"+
    "\1\42\3\0\1\320\1\0\1\43\1\346\2\43\1\321"+
    "\3\0\1\42\5\43\1\347\3\43\1\350\3\43\1\42"+
    "\2\43\2\0\1\43\4\42\3\0\1\307\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\317"+
    "\5\43\3\0\1\42\3\0\1\320\1\0\4\43\1\321"+
    "\3\0\1\42\1\351\14\43\1\42\2\43\2\0\1\43"+
    "\4\42\3\0\1\307\1\0\2\42\3\0\2\42\1\43"+
    "\2\42\2\43\1\0\2\42\1\317\5\43\3\0\1\42"+
    "\3\0\1\320\1\0\4\43\1\321\3\0\1\42\12\43"+
    "\1\352\2\43\1\42\2\43\2\0\1\43\4\42\21\0"+
    "\1\353\14\0\1\354\35\0\1\355\27\0\1\356\52\0"+
    "\1\357\1\360\5\0\2\42\1\361\100\42\3\0\1\307"+
    "\1\0\2\42\3\0\7\42\1\0\10\42\3\0\1\42"+
    "\3\0\1\42\1\0\4\42\1\362\3\0\21\42\2\0"+
    "\5\42\3\0\1\307\1\0\2\42\3\0\7\42\1\0"+
    "\4\42\1\363\1\42\1\363\1\42\3\0\1\42\3\0"+
    "\1\42\1\0\1\363\2\42\1\364\4\0\1\42\1\365"+
    "\4\363\1\366\1\367\6\363\1\42\1\370\1\365\2\0"+
    "\1\363\4\42\21\0\1\327\64\0\1\302\11\0\1\371"+
    "\134\0\1\372\21\0\1\373\105\0\1\355\103\0\1\374"+
    "\12\0\3\310\1\40\1\311\2\0\1\312\2\0\1\312"+
    "\1\310\1\0\2\310\1\0\1\310\3\312\1\310\3\0"+
    "\1\310\3\0\1\313\1\0\4\312\1\0\1\375\1\314"+
    "\2\0\15\312\1\0\2\312\2\0\1\312\2\0\1\310"+
    "\22\0\1\376\102\0\1\327\14\0\1\377\47\0\1\302"+
    "\11\0\1\u0100\65\0\2\125\1\u0101\100\125\47\0\1\u0102"+
    "\40\0\3\310\1\40\1\311\2\0\1\312\2\0\1\312"+
    "\1\310\1\0\2\310\1\0\1\310\3\312\1\310\3\0"+
    "\1\310\3\0\1\u0103\1\0\4\312\1\0\1\u0103\1\314"+
    "\2\0\15\312\1\0\2\312\2\0\1\312\2\0\1\310"+
    "\50\0\1\u0104\47\0\1\u0105\2\0\2\u0105\3\0\1\u0106"+
    "\5\u0105\7\0\1\u0107\1\0\4\u0105\1\321\4\0\15\u0105"+
    "\1\0\2\u0105\2\0\1\u0105\7\0\1\u0108\1\0\2\125"+
    "\7\0\3\125\2\0\1\125\1\0\5\125\11\0\4\125"+
    "\5\0\15\125\1\0\2\125\2\0\1\125\2\0\2\125"+
    "\3\0\1\u0108\1\0\2\125\5\0\1\u0105\1\0\1\125"+
    "\2\126\2\0\1\125\1\u0106\5\126\7\0\1\u0107\1\0"+
    "\4\126\1\321\4\0\15\126\1\0\2\126\2\0\1\126"+
    "\2\0\2\125\20\0\1\127\4\0\1\127\3\0\1\127"+
    "\72\0\1\323\25\0\1\u0109\55\0\1\u010a\24\0\1\u010b"+
    "\57\0\1\u010c\22\0\1\u010d\60\0\1\u010e\1\u010f\2\0"+
    "\1\u010e\103\0\1\u0110\105\0\1\u0111\11\0\1\u0112\54\0"+
    "\1\327\14\0\1\330\10\0\1\u0113\102\0\1\u0114\102\0"+
    "\1\u0115\24\0\1\u0116\55\0\1\u0117\25\0\1\u0118\54\0"+
    "\1\u0119\102\0\1\u011a\47\0\1\u011b\2\0\2\u011b\4\0"+
    "\5\u011b\7\0\1\u011c\1\0\4\u011b\5\0\15\u011b\1\0"+
    "\2\u011b\2\0\1\u011b\30\0\1\u011d\22\0\1\u011e\36\0"+
    "\1\u0108\1\0\2\125\5\0\1\u011b\1\0\1\125\2\156"+
    "\2\0\1\125\1\0\5\156\7\0\1\u011c\1\0\4\156"+
    "\5\0\15\156\1\0\2\156\2\0\1\156\2\0\2\125"+
    "\21\0\1\u011f\12\0\1\u0120\51\0\1\307\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\317"+
    "\5\43\3\0\1\42\3\0\1\320\1\0\4\43\1\321"+
    "\3\0\1\42\1\u0121\6\43\1\337\5\43\1\42\2\43"+
    "\2\0\1\43\4\42\3\0\1\307\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\317\5\43"+
    "\3\0\1\42\3\0\1\320\1\0\4\43\1\321\3\0"+
    "\1\42\3\43\1\u0122\2\43\1\340\6\43\1\42\2\43"+
    "\2\0\1\43\4\42\1\163\2\0\1\u0123\1\0\2\163"+
    "\3\0\20\163\3\0\1\163\1\0\1\163\1\0\1\163"+
    "\1\0\5\163\1\0\33\163\1\u0124\1\u0125\1\u0123\77\163"+
    "\1\303\2\0\3\303\1\u0126\74\303\1\163\2\0\1\u0123"+
    "\1\0\2\163\3\0\20\163\3\0\1\163\1\0\1\163"+
    "\1\0\1\163\1\0\5\163\1\0\6\163\1\u0127\24\163"+
    "\2\0\1\u0123\1\0\2\163\3\0\20\163\3\0\1\163"+
    "\1\0\1\163\1\0\1\163\1\0\5\163\1\0\23\163"+
    "\1\u0128\7\163\2\0\1\u0123\1\0\2\163\3\0\20\163"+
    "\3\0\1\163\1\0\1\163\1\0\1\163\1\0\5\163"+
    "\1\0\24\163\1\u0129\5\163\50\0\1\u012a\103\0\1\314"+
    "\51\0\1\204\4\0\1\204\3\0\1\204\51\0\2\210"+
    "\1\u012b\100\210\3\0\1\u012c\1\0\3\210\2\0\1\210"+
    "\1\0\1\210\1\0\14\210\2\0\2\210\5\0\4\210"+
    "\4\0\21\210\2\0\5\210\3\0\1\u012c\1\0\3\210"+
    "\2\0\1\210\1\0\1\210\1\0\14\210\2\0\2\210"+
    "\5\0\4\210\1\326\3\0\21\210\2\0\5\210\1\215"+
    "\1\u0124\1\u012d\100\215\5\0\3\310\4\0\1\312\2\0"+
    "\1\312\1\310\1\0\2\310\1\0\1\310\3\312\1\310"+
    "\3\0\1\310\3\0\1\u0103\1\0\4\312\1\0\1\u0103"+
    "\1\314\2\0\15\312\1\0\2\312\2\0\1\312\2\0"+
    "\1\310\1\0\2\230\1\u012e\100\230\5\0\1\u012f\107\0"+
    "\1\u0130\73\0\1\u0131\13\0\2\230\4\0\5\230\11\0"+
    "\4\230\5\0\15\230\1\0\2\230\2\0\1\230\26\0"+
    "\2\u0132\132\0\1\u0133\126\0\1\u0134\27\0\1\u0135\10\0"+
    "\1\u0136\11\0\1\u0137\31\0\1\u0138\1\0\3\246\1\247"+
    "\46\246\1\0\24\246\1\u0139\6\246\1\247\73\246\1\u013a"+
    "\3\246\52\252\1\0\30\252\1\253\2\0\1\253\1\0"+
    "\14\253\1\0\12\253\1\0\1\253\1\0\1\253\1\0"+
    "\1\253\1\0\40\253\1\0\1\254\101\0\1\253\1\u013b"+
    "\1\u013c\1\253\1\0\14\253\1\0\12\253\1\0\1\253"+
    "\1\0\1\253\1\0\1\253\1\0\40\253\3\0\1\u013d"+
    "\1\257\33\0\1\257\1\0\1\257\40\0\1\253\2\0"+
    "\1\253\1\0\3\253\1\261\1\262\7\253\1\0\12\253"+
    "\1\0\1\253\1\0\1\253\1\0\1\253\1\0\40\253"+
    "\1\u013e\2\u013f\1\u013e\1\u013f\3\u013e\1\253\10\u013e\1\u013f"+
    "\12\u013e\1\u013f\1\u013e\1\u013f\1\u013e\1\u013f\1\u013e\1\u013f"+
    "\40\u013e\1\u0140\2\u0141\1\u0140\1\u0141\4\u0140\1\253\7\u0140"+
    "\1\u0141\12\u0140\1\u0141\1\u0140\1\u0141\1\u0140\1\u0141\1\u0140"+
    "\1\u0141\40\u0140\1\263\3\0\3\263\1\0\73\263\1\0"+
    "\2\264\107\0\1\u0142\100\0\3\u0143\4\0\1\u0144\2\0"+
    "\1\u0144\1\u0143\1\0\2\u0143\1\0\1\u0143\3\u0144\1\u0143"+
    "\3\0\1\u0143\3\0\1\u0103\1\0\4\u0144\1\0\1\u0103"+
    "\1\314\2\0\15\u0144\1\0\2\u0144\2\0\1\u0144\2\0"+
    "\1\u0143\1\0\2\272\1\u0145\100\272\3\0\1\u0146\104\0"+
    "\3\u0147\1\40\1\311\2\0\1\u0148\2\0\1\u0148\1\u0147"+
    "\1\0\2\u0147\1\0\1\u0147\3\u0148\1\u0147\3\0\1\u0147"+
    "\3\0\1\u0103\1\0\4\u0148\1\0\1\u0103\1\314\2\0"+
    "\15\u0148\1\0\2\u0148\2\0\1\u0148\2\0\1\u0147\4\0"+
    "\1\u0149\1\0\2\272\3\0\7\272\1\0\10\272\3\0"+
    "\1\272\3\0\1\272\1\0\4\272\4\0\21\272\2\0"+
    "\5\272\21\0\1\323\117\0\1\330\60\0\1\276\2\0"+
    "\2\276\4\0\5\276\11\0\4\276\5\0\15\276\1\0"+
    "\2\276\2\0\1\276\4\0\1\u014a\1\u014b\3\u014a\2\u014c"+
    "\1\u014d\4\u014a\1\u014e\1\u014a\1\u014f\2\u0150\1\u014a\2\u0150"+
    "\1\u014f\5\u0150\3\u014a\1\u0150\5\u014a\4\u0150\5\u014a\15\u0150"+
    "\1\u014a\2\u0150\2\u014a\1\u0150\2\u014a\1\u0150\1\u014f\1\0"+
    "\1\300\1\0\1\307\1\0\2\42\3\0\7\42\1\0"+
    "\10\42\3\0\1\42\3\0\1\42\1\0\4\42\4\0"+
    "\21\42\2\0\5\42\1\0\1\34\1\u0151\100\0\1\303"+
    "\2\0\100\303\1\305\1\42\1\361\100\305\1\303\2\0"+
    "\1\304\1\303\2\305\3\303\7\305\1\303\10\305\3\303"+
    "\1\305\3\303\1\305\1\303\4\305\4\303\21\305\2\303"+
    "\5\305\1\u0126\1\u0152\1\u0153\1\u0154\1\u0126\2\306\3\u0126"+
    "\7\306\1\u0126\10\306\3\u0126\1\306\3\u0126\1\306\1\u0126"+
    "\4\306\4\u0126\21\306\2\u0126\5\306\3\311\1\u0155\5\311"+
    "\1\316\71\311\14\0\1\312\2\0\2\312\4\0\5\312"+
    "\11\0\4\312\5\0\15\312\1\0\2\312\2\0\1\312"+
    "\7\0\1\307\1\0\2\42\3\0\7\42\1\0\10\42"+
    "\3\0\1\42\3\0\1\42\1\0\4\42\1\u0156\3\0"+
    "\21\42\2\0\5\42\3\0\1\u0157\1\0\2\42\1\u0158"+
    "\2\0\4\42\2\u0159\1\u015a\1\0\1\u015a\1\u0159\2\u015a"+
    "\3\u0159\1\u015a\3\0\1\u015a\3\0\1\42\1\0\4\u0159"+
    "\4\0\1\42\15\u0159\1\42\2\u0159\2\0\1\u0159\2\42"+
    "\2\u0159\50\0\1\u015b\52\0\1\322\4\0\1\322\3\0"+
    "\1\322\145\0\1\u015c\11\0\1\307\1\0\2\42\3\0"+
    "\7\42\1\0\10\42\3\0\1\42\3\0\1\42\1\u015d"+
    "\4\42\4\0\21\42\2\0\5\42\15\0\1\u015e\70\0"+
    "\1\307\1\0\2\42\3\0\2\42\1\43\2\42\2\43"+
    "\1\0\2\42\1\317\5\43\3\0\1\42\3\0\1\320"+
    "\1\0\2\43\1\u015f\1\43\1\321\3\0\1\42\15\43"+
    "\1\42\2\43\2\0\1\43\4\42\3\0\1\307\1\0"+
    "\2\42\3\0\2\42\1\43\2\42\2\43\1\0\2\42"+
    "\1\317\5\43\3\0\1\42\3\0\1\320\1\0\4\43"+
    "\1\321\3\0\1\42\2\43\1\u0160\12\43\1\42\2\43"+
    "\2\0\1\43\4\42\3\0\1\307\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\317\5\43"+
    "\3\0\1\42\3\0\1\320\1\0\3\43\1\u0161\1\321"+
    "\3\0\1\42\15\43\1\42\2\43\2\0\1\43\4\42"+
    "\3\0\1\307\1\0\2\42\3\0\2\42\1\43\2\42"+
    "\2\43\1\0\2\42\1\317\5\43\3\0\1\42\3\0"+
    "\1\320\1\0\1\43\1\u0162\2\43\1\321\3\0\1\42"+
    "\3\43\1\u0163\11\43\1\42\2\43\2\0\1\43\4\42"+
    "\50\0\1\u0164\35\0\1\307\1\0\2\42\3\0\2\42"+
    "\1\43\2\42\2\43\1\0\2\42\1\317\5\43\3\0"+
    "\1\42\3\0\1\320\1\0\4\43\1\321\3\0\1\42"+
    "\3\43\1\u0165\11\43\1\42\2\43\2\0\1\43\4\42"+
    "\3\0\1\307\1\0\2\42\3\0\2\42\1\43\2\42"+
    "\2\43\1\0\2\42\1\317\5\43\3\0\1\42\3\0"+
    "\1\320\1\0\4\43\1\321\3\0\1\42\6\43\1\u0166"+
    "\6\43\1\42\2\43\2\0\1\43\4\42\3\0\1\307"+
    "\1\0\2\42\3\0\2\42\1\43\2\42\2\43\1\0"+
    "\2\42\1\317\5\43\3\0\1\42\3\0\1\320\1\0"+
    "\4\43\1\321\3\0\1\42\1\u0167\14\43\1\42\2\43"+
    "\2\0\1\43\4\42\3\0\1\307\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\317\5\43"+
    "\3\0\1\42\3\0\1\320\1\0\1\u0168\3\43\1\321"+
    "\3\0\1\42\15\43\1\42\2\43\2\0\1\43\4\42"+
    "\3\0\1\307\1\0\2\42\3\0\2\42\1\43\2\42"+
    "\2\43\1\0\2\42\1\317\5\43\3\0\1\42\3\0"+
    "\1\320\1\0\4\43\1\321\3\0\1\42\10\43\1\u0169"+
    "\4\43\1\42\2\43\2\0\1\43\4\42\3\0\1\307"+
    "\1\0\2\42\3\0\2\42\1\43\2\42\2\43\1\0"+
    "\2\42\1\317\5\43\3\0\1\42\3\0\1\320\1\0"+
    "\4\43\1\321\3\0\1\42\1\u016a\14\43\1\42\2\43"+
    "\2\0\1\43\4\42\3\0\1\307\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\317\5\43"+
    "\3\0\1\42\3\0\1\320\1\0\1\u016b\3\43\1\321"+
    "\3\0\1\42\15\43\1\42\2\43\2\0\1\43\4\42"+
    "\3\0\1\307\1\0\2\42\3\0\2\42\1\43\2\42"+
    "\2\43\1\0\2\42\1\317\5\43\3\0\1\42\3\0"+
    "\1\320\1\0\1\43\1\u016c\2\43\1\321\3\0\1\42"+
    "\15\43\1\42\2\43\2\0\1\43\4\42\3\0\1\u016d"+
    "\1\u016e\11\0\2\u016f\3\0\1\u016f\2\0\3\u016f\7\0"+
    "\1\u016e\1\0\1\u016e\4\u016f\5\0\15\u016f\1\0\2\u016f"+
    "\2\0\1\u016f\2\0\2\u016f\3\0\1\u0170\1\u0171\11\0"+
    "\2\u0172\3\0\1\u0172\2\0\3\u0172\7\0\1\u0171\1\0"+
    "\1\u0171\4\u0172\5\0\15\u0172\1\0\2\u0172\2\0\1\u0172"+
    "\2\0\2\u0172\35\0\1\u0173\37\0\1\u0174\6\0\1\42"+
    "\1\0\1\307\1\0\2\42\3\0\7\42\1\0\10\42"+
    "\3\0\1\42\3\0\1\42\1\0\4\42\4\0\21\42"+
    "\2\0\5\42\3\0\1\307\1\0\2\42\3\0\7\42"+
    "\1\0\10\42\3\0\1\42\3\0\1\42\1\0\4\42"+
    "\4\0\10\42\1\363\6\42\1\363\1\42\2\0\5\42"+
    "\3\0\1\307\1\0\2\42\3\0\7\42\1\0\10\42"+
    "\3\0\1\42\3\0\1\42\1\0\1\363\2\42\1\363"+
    "\4\0\21\42\2\0\5\42\3\0\1\307\1\0\2\42"+
    "\3\0\7\42\1\0\10\42\3\0\1\42\3\0\1\42"+
    "\1\0\1\363\3\42\4\0\21\42\2\0\5\42\3\0"+
    "\1\307\1\0\2\42\3\0\7\42\1\0\10\42\3\0"+
    "\1\42\3\0\1\42\1\0\4\42\4\0\17\42\1\363"+
    "\1\42\2\0\5\42\35\0\1\u0173\62\0\1\u0175\66\0"+
    "\1\125\1\0\1\u0108\1\0\2\125\7\0\3\125\2\0"+
    "\1\125\1\0\5\125\11\0\4\125\5\0\15\125\1\0"+
    "\2\125\2\0\1\125\2\0\2\125\47\0\1\u0156\36\0"+
    "\1\u0176\3\0\1\u0158\6\0\2\u0177\1\u0178\1\0\1\u0178"+
    "\1\u0177\2\u0178\3\u0177\1\u0178\3\0\1\u0178\5\0\4\u0177"+
    "\5\0\15\u0177\1\0\2\u0177\2\0\1\u0177\2\0\2\u0177"+
    "\25\0\1\u010e\3\0\1\u010e\71\0\1\u0179\4\0\1\u0179"+
    "\1\0\3\u0179\14\0\1\u0179\6\0\2\u0179\1\0\1\u0179"+
    "\2\0\1\u0179\23\0\1\u017a\13\0\1\u017b\4\0\1\u017c"+
    "\3\0\1\u017b\3\0\1\u017d\2\0\1\u017a\1\0\1\u017a"+
    "\107\0\1\u017e\70\0\1\u0173\11\0\1\u017f\102\0\1\u011e"+
    "\103\0\1\u0180\53\0\1\u0181\64\0\1\307\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\317"+
    "\5\43\3\0\1\42\3\0\1\320\1\0\4\43\1\321"+
    "\3\0\1\42\2\43\1\u0182\12\43\1\42\2\43\2\0"+
    "\1\43\4\42\1\163\1\u0183\1\u0184\1\u0123\100\163\1\u0124"+
    "\1\0\1\u0123\1\0\2\163\3\0\20\163\3\0\1\163"+
    "\1\0\1\163\1\0\1\163\1\0\5\163\1\0\32\163"+
    "\1\u0126\1\u0152\1\u0153\100\u0126\1\163\2\0\1\u0123\1\0"+
    "\2\163\3\0\20\163\3\0\1\163\1\0\1\163\1\0"+
    "\1\163\1\0\5\163\1\0\5\163\1\u0185\25\163\2\0"+
    "\1\u0123\1\0\2\163\3\0\20\163\3\0\1\u0186\1\0"+
    "\1\163\1\0\1\163\1\0\5\163\1\0\32\163\1\0"+
    "\1\210\1\0\1\u012c\1\0\3\210\2\0\1\210\1\0"+
    "\1\210\1\0\14\210\2\0\2\210\5\0\4\210\4\0"+
    "\21\210\2\0\5\210\1\0\1\u0124\102\0\1\230\1\0"+
    "\1\u0131\13\0\2\230\4\0\5\230\11\0\4\230\5\0"+
    "\15\230\1\0\2\230\2\0\1\230\7\0\1\u0187\100\0"+
    "\1\u013b\1\0\1\u0187\100\0\1\257\1\u0188\100\0\1\u013e"+
    "\2\u013f\1\u013e\1\u013f\3\u013e\1\u0189\10\u013e\1\u013f\12\u013e"+
    "\1\u013f\1\u013e\1\u013f\1\u013e\1\u013f\1\u013e\1\u013f\40\u013e"+
    "\10\u013f\1\u018a\72\u013f\1\u0140\2\u0141\1\u0140\1\u0141\4\u0140"+
    "\1\u018b\7\u0140\1\u0141\12\u0140\1\u0141\1\u0140\1\u0141\1\u0140"+
    "\1\u0141\1\u0140\1\u0141\40\u0140\11\u0141\1\u018c\71\u0141\14\0"+
    "\1\u0144\2\0\2\u0144\4\0\5\u0144\11\0\4\u0144\5\0"+
    "\15\u0144\1\0\2\u0144\2\0\1\u0144\5\0\1\272\1\0"+
    "\1\u0149\1\0\2\272\3\0\7\272\1\0\10\272\3\0"+
    "\1\272\3\0\1\272\1\0\4\272\4\0\21\272\2\0"+
    "\5\272\1\0\1\270\1\u018d\114\0\1\u0148\2\0\2\u0148"+
    "\4\0\5\u0148\11\0\4\u0148\5\0\15\u0148\1\0\2\u0148"+
    "\2\0\1\u0148\7\0\1\u018e\101\0\1\u014a\1\u018e\77\0"+
    "\1\u014a\1\u014b\1\u014a\1\u014f\1\u014a\2\u018f\1\u014f\6\u014a"+
    "\2\u014f\1\u018f\2\u014a\1\u014f\1\u014a\1\u018f\3\u014f\1\u018f"+
    "\11\u014a\4\u014f\5\u014a\15\u014f\1\u014a\2\u014f\2\u014a\1\u014f"+
    "\2\u014a\2\u014f\3\0\1\u018e\3\0\1\u018e\76\0\1\u018e"+
    "\3\0\1\u018e\4\0\1\u0190\2\0\1\u0190\1\u0191\4\0"+
    "\1\u0191\3\u0190\1\u0191\11\0\4\u0190\5\0\15\u0190\1\0"+
    "\2\u0190\2\0\1\u0190\4\0\1\u014a\1\u014b\1\u014a\1\u014f"+
    "\1\u014a\2\u014c\1\u014d\4\u014a\1\u014e\1\u014a\1\u014f\2\u0150"+
    "\1\u014a\2\u0150\1\u014f\5\u0150\3\u014a\1\u0150\3\u014a\1\u0192"+
    "\1\u014a\4\u0150\5\u014a\15\u0150\1\u014a\2\u0150\2\u014a\1\u0150"+
    "\2\u014a\1\u0150\1\u014f\1\u014a\1\u014b\1\u014a\1\u014f\1\u014a"+
    "\2\u014c\1\u0150\4\u014a\1\u014e\1\u014a\1\u014f\2\u0150\1\u014a"+
    "\2\u0150\1\u014f\5\u0150\3\u014a\1\u0150\3\u014a\1\u0192\1\u014a"+
    "\4\u0150\5\u014a\15\u0150\1\u014a\2\u0150\2\u014a\1\u0150\2\u014a"+
    "\1\u0150\1\u014f\1\0\1\34\1\0\1\302\100\0\1\u0152"+
    "\101\0\1\306\1\u0193\1\u0194\100\306\3\311\1\u0155\5\311"+
    "\1\u0195\71\311\50\0\1\u0196\32\0\2\u0159\1\u0197\100\u0159"+
    "\5\0\3\u0178\4\0\1\u0198\2\0\1\u0198\1\u0178\1\0"+
    "\2\u0178\1\0\1\u0178\3\u0198\1\u0178\3\0\1\u0178\5\0"+
    "\4\u0198\5\0\15\u0198\1\0\2\u0198\2\0\1\u0198\2\0"+
    "\1\u0178\4\0\1\u0157\1\0\2\u0159\1\u0158\2\0\3\42"+
    "\1\u0199\3\u0159\1\0\1\u015a\1\u0159\1\u015a\5\u0159\3\0"+
    "\1\u015a\3\0\1\42\1\0\4\u0159\4\0\1\42\15\u0159"+
    "\1\42\2\u0159\2\0\1\u0159\2\42\2\u0159\3\0\1\u0157"+
    "\1\0\2\42\1\u0158\2\0\3\42\1\u0199\2\u0159\1\u015a"+
    "\1\0\1\u015a\1\u0159\2\u015a\3\u0159\1\u015a\3\0\1\u015a"+
    "\3\0\1\42\1\0\4\u0159\4\0\1\42\15\u0159\1\42"+
    "\2\u0159\2\0\1\u0159\2\42\2\u0159\3\0\1\307\1\0"+
    "\2\42\3\0\2\42\1\43\2\42\2\43\1\0\2\42"+
    "\1\317\5\43\3\0\1\42\3\0\1\320\1\0\3\43"+
    "\1\u019a\1\321\3\0\1\42\15\43\1\42\2\43\2\0"+
    "\1\43\4\42\3\0\1\307\1\0\2\42\3\0\2\42"+
    "\1\43\2\42\2\43\1\0\2\42\1\317\5\43\3\0"+
    "\1\42\3\0\1\320\1\0\4\43\1\321\3\0\1\42"+
    "\14\43\1\u019b\1\42\2\43\2\0\1\43\4\42\3\0"+
    "\1\307\1\0\2\42\3\0\2\42\1\43\2\42\2\43"+
    "\1\0\2\42\1\317\5\43\3\0\1\42\3\0\1\320"+
    "\1\0\4\43\1\321\3\0\1\42\1\u019c\14\43\1\42"+
    "\2\43\2\0\1\43\4\42\3\0\1\307\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\317"+
    "\5\43\3\0\1\42\3\0\1\320\1\0\4\43\1\321"+
    "\3\0\1\42\7\43\1\u019d\5\43\1\42\2\43\2\0"+
    "\1\43\4\42\3\0\1\307\1\0\2\42\3\0\2\42"+
    "\1\43\2\42\2\43\1\0\2\42\1\317\5\43\3\0"+
    "\1\42\3\0\1\320\1\0\3\43\1\u019e\1\321\3\0"+
    "\1\42\15\43\1\42\2\43\2\0\1\43\4\42\3\0"+
    "\1\307\1\0\2\42\3\0\2\42\1\43\2\42\2\43"+
    "\1\0\2\42\1\317\5\43\3\0\1\42\3\0\1\320"+
    "\1\0\3\43\1\u019f\1\321\3\0\1\42\15\43\1\42"+
    "\2\43\2\0\1\43\4\42\3\0\1\307\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\317"+
    "\5\43\3\0\1\42\3\0\1\320\1\0\3\43\1\u01a0"+
    "\1\321\3\0\1\42\15\43\1\42\2\43\2\0\1\43"+
    "\4\42\3\0\1\307\1\0\2\42\3\0\2\42\1\43"+
    "\2\42\2\43\1\0\2\42\1\317\5\43\3\0\1\42"+
    "\3\0\1\320\1\0\3\43\1\u01a1\1\321\3\0\1\42"+
    "\15\43\1\42\2\43\2\0\1\43\4\42\3\0\1\307"+
    "\1\0\2\42\3\0\2\42\1\43\2\42\2\43\1\0"+
    "\2\42\1\317\5\43\3\0\1\42\3\0\1\320\1\0"+
    "\4\43\1\321\3\0\1\42\1\43\1\u01a2\13\43\1\42"+
    "\2\43\2\0\1\43\4\42\3\0\1\307\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\317"+
    "\5\43\3\0\1\42\3\0\1\320\1\0\1\43\1\u01a3"+
    "\2\43\1\321\3\0\1\42\15\43\1\42\2\43\2\0"+
    "\1\43\4\42\3\0\1\307\1\0\2\42\3\0\2\42"+
    "\1\43\2\42\2\43\1\0\2\42\1\317\5\43\3\0"+
    "\1\42\3\0\1\320\1\0\4\43\1\321\3\0\1\42"+
    "\6\43\1\u01a4\6\43\1\42\2\43\2\0\1\43\4\42"+
    "\2\u016f\1\u01a5\100\u016f\3\0\1\u01a6\102\0\1\u016d\1\0"+
    "\2\u016f\7\0\3\u016f\2\0\1\u016f\1\0\5\u016f\11\0"+
    "\4\u016f\5\0\15\u016f\1\0\2\u016f\2\0\1\u016f\2\0"+
    "\2\u016f\2\u0172\1\u01a7\100\u0172\3\0\1\u01a8\102\0\1\u0170"+
    "\1\0\2\u0172\7\0\3\u0172\2\0\1\u0172\1\0\5\u0172"+
    "\11\0\4\u0172\5\0\15\u0172\1\0\2\u0172\2\0\1\u0172"+
    "\2\0\2\u0172\2\u0177\1\u01a9\100\u0177\3\0\1\u0176\1\0"+
    "\2\u0177\1\u0158\5\0\1\u01aa\3\u0177\1\0\1\u0178\1\u0177"+
    "\1\u0178\5\u0177\3\0\1\u0178\5\0\4\u0177\5\0\15\u0177"+
    "\1\0\2\u0177\2\0\1\u0177\2\0\2\u0177\3\0\1\u0176"+
    "\3\0\1\u0158\5\0\1\u01aa\2\u0177\1\u0178\1\0\1\u0178"+
    "\1\u0177\2\u0178\3\u0177\1\u0178\3\0\1\u0178\5\0\4\u0177"+
    "\5\0\15\u0177\1\0\2\u0177\2\0\1\u0177\2\0\2\u0177"+
    "\3\0\1\u01ab\1\u017a\13\0\1\u017b\4\0\1\u017c\3\0"+
    "\1\u017b\3\0\1\u017d\2\0\1\u017a\1\0\1\u017a\60\0"+
    "\1\u017b\4\0\1\u017b\3\0\1\u017b\76\0\1\u01ac\1\u01ad"+
    "\2\0\1\u01ac\54\0\1\307\1\0\2\42\3\0\2\42"+
    "\1\43\2\42\2\43\1\0\2\42\1\317\5\43\3\0"+
    "\1\42\3\0\1\320\1\0\4\43\1\321\3\0\1\42"+
    "\1\43\1\u01ae\13\43\1\42\2\43\2\0\1\43\4\42"+
    "\1\163\2\0\1\u01af\1\0\2\163\3\0\20\163\3\0"+
    "\1\163\1\0\1\163\1\0\1\163\1\0\5\163\1\0"+
    "\33\163\1\u0183\1\0\1\u0123\1\0\2\163\3\0\20\163"+
    "\3\0\1\163\1\0\1\163\1\0\1\163\1\0\5\163"+
    "\1\0\33\163\2\0\1\u0123\1\0\2\163\3\0\20\163"+
    "\3\0\1\163\1\0\1\163\1\0\1\163\1\0\5\163"+
    "\1\0\4\163\1\u01b0\25\163\1\0\1\u013b\1\u013c\101\0"+
    "\1\257\1\0\1\u013d\1\257\33\0\1\257\1\0\1\257"+
    "\40\0\1\253\2\0\1\253\1\0\2\253\1\u01b1\1\261"+
    "\10\253\1\0\12\253\1\0\1\253\1\0\1\253\1\0"+
    "\1\253\1\0\40\253\7\0\1\u01b2\1\u01b3\72\0\1\253"+
    "\2\0\1\253\1\0\2\253\1\u01b4\1\253\1\262\7\253"+
    "\1\0\12\253\1\0\1\253\1\0\1\253\1\0\1\253"+
    "\1\0\40\253\7\0\1\u01b5\1\0\1\u01b6\72\0\1\270"+
    "\1\0\1\u0146\77\0\1\u014a\1\u014b\3\u014a\2\u014c\1\u014d"+
    "\4\u014a\1\u014e\1\u014a\1\u014f\2\u0150\1\u014a\2\u0150\1\u014f"+
    "\5\u0150\3\u014a\1\u0150\3\u014a\1\u0192\1\u014a\4\u0150\5\u014a"+
    "\15\u0150\1\u014a\2\u0150\2\u014a\1\u0150\2\u014a\1\u0150\1\u014f"+
    "\1\u014a\1\u014b\1\u014a\1\u014f\1\u014a\2\u018f\7\u014a\2\u014f"+
    "\1\u018f\2\u014a\1\u014f\1\u014a\1\u018f\3\u014f\1\u018f\11\u014a"+
    "\4\u014f\5\u014a\15\u014f\1\u014a\2\u014f\2\u014a\1\u014f\2\u014a"+
    "\2\u014f\7\0\1\u018e\4\0\1\u0190\2\0\1\u0190\1\u0191"+
    "\4\0\1\u0191\3\u0190\1\u0191\11\0\4\u0190\5\0\15\u0190"+
    "\1\0\2\u0190\2\0\1\u0190\20\0\1\u0190\2\0\1\u0190"+
    "\1\u0191\4\0\1\u0191\3\u0190\1\u0191\11\0\4\u0190\5\0"+
    "\15\u0190\1\0\2\u0190\2\0\1\u0190\5\0\1\u0193\1\0"+
    "\1\307\1\0\2\42\3\0\7\42\1\0\10\42\3\0"+
    "\1\42\3\0\1\42\1\0\4\42\4\0\21\42\2\0"+
    "\5\42\1\0\1\u0159\1\0\1\u0157\1\0\2\u0159\1\u0158"+
    "\2\0\3\42\1\u0199\3\u0159\1\0\1\u015a\1\u0159\1\u015a"+
    "\5\u0159\3\0\1\u015a\3\0\1\42\1\0\4\u0159\4\0"+
    "\1\42\15\u0159\1\42\2\u0159\2\0\1\u0159\2\42\2\u0159"+
    "\3\0\1\u0176\3\0\1\u0158\4\0\1\u0198\1\u01aa\1\u0177"+
    "\1\u01b7\1\u0198\1\0\1\u0178\1\u0177\1\u0178\1\u0198\3\u01b7"+
    "\1\u0198\3\0\1\u0178\5\0\4\u01b7\5\0\15\u01b7\1\0"+
    "\2\u01b7\2\0\1\u01b7\2\0\2\u0177\3\0\1\307\1\0"+
    "\2\42\3\0\2\42\1\43\2\42\2\43\1\0\2\42"+
    "\1\317\5\43\3\0\1\42\3\0\1\320\1\0\4\43"+
    "\1\321\3\0\1\42\1\43\1\u01b8\13\43\1\42\2\43"+
    "\2\0\1\43\4\42\3\0\1\307\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\317\5\43"+
    "\3\0\1\42\3\0\1\320\1\0\1\u01b9\3\43\1\321"+
    "\3\0\1\42\15\43\1\42\2\43\2\0\1\43\4\42"+
    "\3\0\1\307\1\0\2\42\3\0\2\42\1\43\2\42"+
    "\2\43\1\0\2\42\1\317\5\43\3\0\1\42\3\0"+
    "\1\320\1\0\4\43\1\321\3\0\1\42\6\43\1\u01ba"+
    "\6\43\1\42\2\43\2\0\1\43\4\42\3\0\1\307"+
    "\1\0\2\42\3\0\2\42\1\43\2\42\2\43\1\0"+
    "\2\42\1\317\5\43\3\0\1\42\3\0\1\320\1\0"+
    "\3\43\1\u01bb\1\321\3\0\1\42\15\43\1\42\2\43"+
    "\2\0\1\43\4\42\1\0\1\u016f\1\0\1\u016d\1\0"+
    "\2\u016f\7\0\3\u016f\2\0\1\u016f\1\0\5\u016f\11\0"+
    "\4\u016f\5\0\15\u016f\1\0\2\u016f\2\0\1\u016f\2\0"+
    "\2\u016f\1\0\1\u016e\1\u01bc\101\0\1\u0172\1\0\1\u0170"+
    "\1\0\2\u0172\7\0\3\u0172\2\0\1\u0172\1\0\5\u0172"+
    "\11\0\4\u0172\5\0\15\u0172\1\0\2\u0172\2\0\1\u0172"+
    "\2\0\2\u0172\1\0\1\u0171\1\u01bd\101\0\1\u0177\1\0"+
    "\1\u0176\1\0\2\u0177\1\u0158\5\0\1\u01aa\3\u0177\1\0"+
    "\1\u0178\1\u0177\1\u0178\5\u0177\3\0\1\u0178\5\0\4\u0177"+
    "\5\0\15\u0177\1\0\2\u0177\2\0\1\u0177\2\0\2\u0177"+
    "\1\0\1\u017a\1\u01be\125\0\1\u01ac\3\0\1\u01ac\71\0"+
    "\1\u01bf\4\0\1\u01bf\1\0\3\u01bf\14\0\1\u01bf\6\0"+
    "\2\u01bf\1\0\1\u01bf\2\0\1\u01bf\17\0\1\163\1\0"+
    "\1\163\1\u0123\77\163\1\253\2\0\1\253\1\0\3\253"+
    "\1\261\10\253\1\0\12\253\1\0\1\253\1\0\1\253"+
    "\1\0\1\253\1\0\40\253\10\0\1\u01b3\72\0\10\u013f"+
    "\1\0\72\u013f\1\253\2\0\1\253\1\0\4\253\1\262"+
    "\7\253\1\0\12\253\1\0\1\253\1\0\1\253\1\0"+
    "\1\253\1\0\40\253\11\0\1\u01b6\71\0\11\u0141\1\0"+
    "\71\u0141\3\0\1\u0176\1\0\2\u0177\1\u0158\4\0\1\u0198"+
    "\1\u01aa\1\u0177\2\u01b7\1\0\1\u0178\1\u0177\1\u0178\5\u01b7"+
    "\3\0\1\u0178\5\0\4\u01b7\5\0\15\u01b7\1\0\2\u01b7"+
    "\2\0\1\u01b7\2\0\2\u0177\3\0\1\307\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\317"+
    "\5\43\3\0\1\42\3\0\1\320\1\0\1\u01c0\3\43"+
    "\1\321\3\0\1\42\15\43\1\42\2\43\2\0\1\43"+
    "\4\42\3\0\1\307\1\0\2\42\3\0\2\42\1\43"+
    "\2\42\2\43\1\0\2\42\1\317\5\43\3\0\1\42"+
    "\3\0\1\320\1\0\1\43\1\u01c1\2\43\1\321\3\0"+
    "\1\42\15\43\1\42\2\43\2\0\1\43\4\42\1\0"+
    "\1\u016e\1\0\1\u01a6\100\0\1\u0171\1\0\1\u01a8\100\0"+
    "\1\u017a\1\0\1\u01ab\1\u017a\13\0\1\u017b\4\0\1\u017c"+
    "\3\0\1\u017b\3\0\1\u017d\2\0\1\u017a\1\0\1\u017a"+
    "\43\0\1\307\1\0\2\42\3\0\2\42\1\43\2\42"+
    "\2\43\1\0\2\42\1\317\5\43\3\0\1\42\3\0"+
    "\1\320\1\0\4\43\1\321\3\0\1\42\5\43\1\u01c2"+
    "\7\43\1\42\2\43\2\0\1\43\4\42\3\0\1\307"+
    "\1\0\2\42\3\0\2\42\1\43\2\42\2\43\1\0"+
    "\2\42\1\317\5\43\3\0\1\42\3\0\1\320\1\0"+
    "\4\43\1\321\3\0\1\42\1\u01c3\14\43\1\42\2\43"+
    "\2\0\1\43\4\42";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19095];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\2\11\6\1\1\11\10\1\3\11\5\1\1\11"+
    "\1\1\2\11\14\1\1\11\13\1\1\11\1\1\1\11"+
    "\4\1\1\11\12\1\1\11\1\1\3\11\6\1\2\11"+
    "\14\1\1\11\7\1\1\11\1\1\1\11\2\1\2\11"+
    "\3\1\1\11\2\1\1\11\3\1\2\11\2\1\1\11"+
    "\1\1\1\11\1\1\4\11\1\1\3\11\2\1\2\11"+
    "\3\1\2\11\2\1\1\11\16\1\1\11\3\1\1\0"+
    "\2\1\1\0\4\1\1\0\1\11\1\0\1\1\2\11"+
    "\1\0\1\11\4\1\2\11\1\1\3\11\22\1\1\0"+
    "\2\11\1\0\1\11\2\1\1\11\6\1\3\11\1\1"+
    "\3\11\1\0\1\1\3\11\2\0\1\1\1\0\5\11"+
    "\1\1\1\0\1\11\1\1\4\11\1\1\1\11\1\1"+
    "\2\11\1\0\1\11\2\0\1\11\4\1\1\11\5\1"+
    "\1\11\1\1\1\0\2\1\2\11\1\0\10\11\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\11\2\1\1\0"+
    "\1\11\1\1\10\0\1\1\1\11\2\1\1\0\1\1"+
    "\2\0\2\1\4\11\5\1\1\11\10\1\1\0\2\1"+
    "\1\0\2\1\3\11\3\0\1\1\1\0\2\1\5\11"+
    "\1\1\1\0\3\1\1\0\6\1\4\0\4\1\1\11"+
    "\1\1\1\0\15\1\1\0\1\1\2\0\1\11\1\0"+
    "\1\1\1\0\4\1\2\0\1\1\3\0\6\1\1\0"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[451];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
    long yychar = 0;

    // close a here_string content token if the lexer is currently reading a here string
    void closeHereStringIfAvailable() {
        if (yystate() == S_HERE_STRING) {
            if (isInHereStringContent()) {
                leaveHereStringContent();
            }
            backToPreviousState();
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BashLexerBase(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 187: break;
          case 2: 
            { if (yystate() == S_HERE_STRING) {
                                                closeHereStringIfAvailable();
                                                return LINE_FEED;
                                            } else if ((yystate() == S_PARAM_EXPANSION || yystate() == S_SUBSHELL || yystate() == S_ARITH || yystate() == S_ARITH_SQUARE_MODE) && isInState(S_HEREDOC)) {
                                                backToPreviousState();
                                                return LINE_FEED;
                                            }

                                            if (!heredocState().isEmpty()) {
                                                // first linebreak after the start marker
                                                goToState(S_HEREDOC);
                                                return LINE_FEED;
                                            }

                                           return LINE_FEED;
            }
          case 188: break;
          case 3: 
            { return BACKSLASH;
            }
          case 189: break;
          case 4: 
            { return WHITESPACE;
            }
          case 190: break;
          case 5: 
            { return COMMENT;
            }
          case 191: break;
          case 6: 
            { return BANG_TOKEN;
            }
          case 192: break;
          case 7: 
            { return DOLLAR;
            }
          case 193: break;
          case 8: 
            { stringParsingState().enterString(); if (yystate() == S_HERE_STRING && !isInHereStringContent()) enterHereStringContent();
goToState(S_STRINGMODE); return STRING_BEGIN;
            }
          case 194: break;
          case 9: 
            { return WORD;
            }
          case 195: break;
          case 10: 
            { return INTEGER_LITERAL;
            }
          case 196: break;
          case 11: 
            { closeHereStringIfAvailable(); return AMP;
            }
          case 197: break;
          case 12: 
            { return AT;
            }
          case 198: break;
          case 13: 
            { return RIGHT_PAREN;
            }
          case 199: break;
          case 14: 
            { if (yystate() == S_BACKQUOTE) backToPreviousState(); else goToState(S_BACKQUOTE); return BACKQUOTE;
            }
          case 200: break;
          case 15: 
            { closeHereStringIfAvailable(); return SEMI;
            }
          case 201: break;
          case 16: 
            { return PIPE;
            }
          case 202: break;
          case 17: 
            { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); goToState(S_ARITH_SQUARE_MODE); return EXPR_ARITH_SQUARE;
            }
          case 203: break;
          case 18: 
            { return EQ;
            }
          case 204: break;
          case 19: 
            { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); stringParsingState().enterSubshell(); goToState(S_SUBSHELL); return LEFT_PAREN;
            }
          case 205: break;
          case 20: 
            { return LEFT_CURLY;
            }
          case 206: break;
          case 21: 
            { if (yystate() == S_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return HEREDOC_LINE; return RIGHT_CURLY;
            }
          case 207: break;
          case 22: 
            { return GREATER_THAN;
            }
          case 208: break;
          case 23: 
            { return LESS_THAN;
            }
          case 209: break;
          case 24: 
            { return COND_OP_NOT;
            }
          case 210: break;
          case 25: 
            { if (isEmptyConditionalCommand()) {
                                    setEmptyConditionalCommand(false);
                                    backToPreviousState();
                                    return _EXPR_CONDITIONAL;
                                 } else {
                                    setEmptyConditionalCommand(false);
                                    return WORD;
                                 }
            }
          case 211: break;
          case 26: 
            { return COND_OP;
            }
          case 212: break;
          case 27: 
            { return LEFT_PAREN;
            }
          case 213: break;
          case 28: 
            { return ARITH_BASE_CHAR;
            }
          case 214: break;
          case 29: 
            { return ARITH_NEGATE;
            }
          case 215: break;
          case 30: 
            { return ARITH_BITWISE_XOR;
            }
          case 216: break;
          case 31: 
            { return RIGHT_SQUARE;
            }
          case 217: break;
          case 32: 
            { return ARITH_NUMBER;
            }
          case 218: break;
          case 33: 
            { return ARITH_BITWISE_AND;
            }
          case 219: break;
          case 34: 
            { return ARITH_MULT;
            }
          case 220: break;
          case 35: 
            { return ARITH_PLUS;
            }
          case 221: break;
          case 36: 
            { decOpenParenthesisCount(); return RIGHT_PAREN;
            }
          case 222: break;
          case 37: 
            { return ARITH_MINUS;
            }
          case 223: break;
          case 38: 
            { return LEFT_SQUARE;
            }
          case 224: break;
          case 39: 
            { incOpenParenthesisCount(); return LEFT_PAREN;
            }
          case 225: break;
          case 40: 
            { return COMMA;
            }
          case 226: break;
          case 41: 
            { return ARITH_BITWISE_NEGATE;
            }
          case 227: break;
          case 42: 
            { return ARITH_GT;
            }
          case 228: break;
          case 43: 
            { return ARITH_LT;
            }
          case 229: break;
          case 44: 
            { return ARITH_DIV;
            }
          case 230: break;
          case 45: 
            { return ARITH_MOD;
            }
          case 231: break;
          case 46: 
            { return ARITH_QMARK;
            }
          case 232: break;
          case 47: 
            { return ARITH_COLON;
            }
          case 233: break;
          case 48: 
            { backToPreviousState(); return _EXPR_ARITH_SQUARE;
            }
          case 234: break;
          case 49: 
            { return EXPR_ARITH_SQUARE;
            }
          case 235: break;
          case 50: 
            { backToPreviousState(); return RIGHT_SQUARE;
            }
          case 236: break;
          case 51: 
            { backToPreviousState(); return RIGHT_PAREN;
            }
          case 237: break;
          case 52: 
            { backToPreviousState(); if (stringParsingState().isInSubshell()) stringParsingState().leaveSubshell(); return RIGHT_PAREN;
            }
          case 238: break;
          case 53: 
            { backToPreviousState(); goToState(S_ARITH_ARRAY_MODE); return LEFT_SQUARE;
            }
          case 239: break;
          case 54: 
            { goToState(S_ARITH_ARRAY_MODE); return LEFT_SQUARE;
            }
          case 240: break;
          case 55: 
            { return STRING_DATA;
            }
          case 241: break;
          case 56: 
            { if (!stringParsingState().isInSubstring() && stringParsingState().isSubstringAllowed()) {
                                    stringParsingState().enterString();
                                    goToState(S_STRINGMODE);
                                    return STRING_BEGIN;
                                  }

                                  stringParsingState().leaveString();
                                  backToPreviousState();
                                  return STRING_END;
            }
          case 242: break;
          case 57: 
            { if (yystate() == S_BACKQUOTE) {
                                    backToPreviousState();
                                }
                                else {
                                    goToState(S_BACKQUOTE);
                                }
                                return BACKQUOTE;
            }
          case 243: break;
          case 58: 
            { setParamExpansionHash(isParamExpansionWord()); return PARAM_EXPANSION_OP_HASH;
            }
          case 244: break;
          case 59: 
            { return PARAM_EXPANSION_OP_EXCL;
            }
          case 245: break;
          case 60: 
            { setParamExpansionOther(true); return PARAM_EXPANSION_OP_UPPERCASE_FIRST;
            }
          case 246: break;
          case 61: 
            { setParamExpansionOther(true); return PARAM_EXPANSION_OP_DOT;
            }
          case 247: break;
          case 62: 
            { setParamExpansionWord(true); return WORD;
            }
          case 248: break;
          case 63: 
            { return PARAM_EXPANSION_OP_STAR;
            }
          case 249: break;
          case 64: 
            { return PARAM_EXPANSION_OP_AT;
            }
          case 250: break;
          case 65: 
            { return PARAM_EXPANSION_OP_PLUS;
            }
          case 251: break;
          case 66: 
            { return PARAM_EXPANSION_OP_MINUS;
            }
          case 252: break;
          case 67: 
            { if (!isParamExpansionOther() && (!isParamExpansionWord() || !isParamExpansionHash())) {
                                    // If we expect an array reference parse the next tokens as arithmetic expression
                                    goToState(S_ARITH_ARRAY_MODE);
                                  }

                                  return LEFT_SQUARE;
            }
          case 253: break;
          case 68: 
            { return PARAM_EXPANSION_OP_EQ;
            }
          case 254: break;
          case 69: 
            { setParamExpansionWord(false); setParamExpansionHash(false); setParamExpansionOther(false);
                                  return LEFT_CURLY;
            }
          case 255: break;
          case 70: 
            { setParamExpansionWord(false); setParamExpansionHash(false); setParamExpansionOther(false);
                                  backToPreviousState();
                                  return RIGHT_CURLY;
            }
          case 256: break;
          case 71: 
            { setParamExpansionOther(true); return PARAM_EXPANSION_OP_LOWERCASE_FIRST;
            }
          case 257: break;
          case 72: 
            { goToState(S_PARAM_EXPANSION_PATTERN); return PARAM_EXPANSION_OP_SLASH;
            }
          case 258: break;
          case 73: 
            { setParamExpansionOther(true); return PARAM_EXPANSION_OP_PERCENT;
            }
          case 259: break;
          case 74: 
            { setParamExpansionOther(true); return PARAM_EXPANSION_OP_QMARK;
            }
          case 260: break;
          case 75: 
            { return PARAM_EXPANSION_OP_COLON;
            }
          case 261: break;
          case 76: 
            { backToPreviousState(); return PARAM_EXPANSION_PATTERN;
            }
          case 262: break;
          case 77: 
            { yypushback(1); backToPreviousState();
            }
          case 263: break;
          case 78: 
            { backToPreviousState(); goToState(S_PARAM_EXPANSION_REPLACEMENT); return PARAM_EXPANSION_OP_SLASH;
            }
          case 264: break;
          case 79: 
            { backToPreviousState(); return WORD;
            }
          case 265: break;
          case 80: 
            { heredocState().pushMarker(yytext(), yystate() == S_HEREDOC_MARKER_IGNORE_TABS);
        backToPreviousState();

        return HEREDOC_MARKER_START;
            }
          case 266: break;
          case 81: 
            { return LINE_FEED;
            }
          case 267: break;
          case 82: 
            { if (heredocState().isNextMarker(yytext())) {
                boolean ignoreTabs = heredocState().isIgnoringTabs();

                heredocState().popMarker(yytext());
                popStates(S_HEREDOC);

                return ignoreTabs ? HEREDOC_MARKER_IGNORING_TABS_END : HEREDOC_MARKER_END;
            }

            return HEREDOC_LINE;
            }
          case 268: break;
          case 83: 
            { if (!heredocState().isEmpty()) {
                                        return HEREDOC_LINE;
                                  }
                                  return LINE_FEED;
            }
          case 269: break;
          case 84: 
            { return HEREDOC_LINE;
            }
          case 270: break;
          case 85: 
            { if (heredocState().isNextMarker(yytext())) {
                boolean ignoreTabs = heredocState().isIgnoringTabs();

                heredocState().popMarker(yytext());
                popStates(S_HEREDOC);

                return ignoreTabs ? HEREDOC_MARKER_IGNORING_TABS_END : HEREDOC_MARKER_END;
         }

         return HEREDOC_LINE;
            }
          case 271: break;
          case 86: 
            { if (isInHereStringContent()) { leaveHereStringContent(); backToPreviousState(); } return WHITESPACE;
            }
          case 272: break;
          case 87: 
            { if (!isInHereStringContent()) enterHereStringContent(); return WORD;
            }
          case 273: break;
          case 88: 
            { return SHEBANG;
            }
          case 274: break;
          case 89: 
            { return VARIABLE;
            }
          case 275: break;
          case 90: 
            { yypushback(1); goToState(S_ARITH_SQUARE_MODE); return DOLLAR;
            }
          case 276: break;
          case 91: 
            { if (yystate() == S_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return HEREDOC_LINE; goToState(S_PARAM_EXPANSION); yypushback(1); return DOLLAR;
            }
          case 277: break;
          case 92: 
            { if (yystate() == S_HERE_STRING && !isInHereStringContent()) enterHereStringContent(); return STRING2;
            }
          case 278: break;
          case 93: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return ASSIGNMENT_WORD;
            }
          case 279: break;
          case 94: 
            { return FILEDESCRIPTOR;
            }
          case 280: break;
          case 95: 
            { closeHereStringIfAvailable(); return AND_AND;
            }
          case 281: break;
          case 96: 
            { if (isBash4()) {
                                        return REDIRECT_AMP_GREATER;
                                    } else {
                                        yypushback(1);
                                        return AMP;
                                    }
            }
          case 282: break;
          case 97: 
            { return ADD_EQ;
            }
          case 283: break;
          case 98: 
            { if (isBash4()) {
                                        return PIPE_AMP;
                                     } else {
                                        yypushback(1);
                                        return PIPE;
                                     }
            }
          case 284: break;
          case 99: 
            { closeHereStringIfAvailable(); return OR_OR;
            }
          case 285: break;
          case 100: 
            { goToState(S_TEST); setEmptyConditionalCommand(false); return EXPR_CONDITIONAL;
            }
          case 286: break;
          case 101: 
            { return IN_KEYWORD;
            }
          case 287: break;
          case 102: 
            { return IF_KEYWORD;
            }
          case 288: break;
          case 103: 
            { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); goToState(S_ARITH); return EXPR_ARITH;
            }
          case 289: break;
          case 104: 
            { return DO_KEYWORD;
            }
          case 290: break;
          case 105: 
            { return FI_KEYWORD;
            }
          case 291: break;
          case 106: 
            { return REDIRECT_GREATER_BAR;
            }
          case 292: break;
          case 107: 
            { return SHIFT_RIGHT;
            }
          case 293: break;
          case 108: 
            { return REDIRECT_LESS_GREATER;
            }
          case 294: break;
          case 109: 
            { goToState(S_HEREDOC_MARKER);
        return HEREDOC_MARKER_TAG;
            }
          case 295: break;
          case 110: 
            { backToPreviousState(); setEmptyConditionalCommand(false); return _EXPR_CONDITIONAL;
            }
          case 296: break;
          case 111: 
            { return COND_OP_EQ_EQ;
            }
          case 297: break;
          case 112: 
            { return COND_OP_REGEX;
            }
          case 298: break;
          case 113: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { goToState(S_DOLLAR_PREFIXED); return DOLLAR;
            }
          case 299: break;
          case 114: 
            { return AND_AND;
            }
          case 300: break;
          case 115: 
            { return OR_OR;
            }
          case 301: break;
          case 116: 
            { return ARITH_NE;
            }
          case 302: break;
          case 117: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (yystate() == S_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return HEREDOC_LINE; goToState(S_DOLLAR_PREFIXED); return DOLLAR;
            }
          case 303: break;
          case 118: 
            { return ARITH_ASS_BIT_XOR;
            }
          case 304: break;
          case 119: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { goToState(S_ARRAY); return ASSIGNMENT_WORD;
            }
          case 305: break;
          case 120: 
            { return ARITH_ASS_BIT_AND;
            }
          case 306: break;
          case 121: 
            { return ARITH_EXPONENT;
            }
          case 307: break;
          case 122: 
            { return ARITH_ASS_MUL;
            }
          case 308: break;
          case 123: 
            { return ARITH_PLUS_PLUS;
            }
          case 309: break;
          case 124: 
            { return ARITH_ASS_PLUS;
            }
          case 310: break;
          case 125: 
            { return ARITH_OCTAL_NUMBER;
            }
          case 311: break;
          case 126: 
            { if (openParenthesisCount() > 0) {
                                    decOpenParenthesisCount();
                                    yypushback(1);

                                    return RIGHT_PAREN;
                                  } else {
                                    backToPreviousState();

                                    return _EXPR_ARITH;
                                  }
            }
          case 312: break;
          case 127: 
            { return ARITH_MINUS_MINUS;
            }
          case 313: break;
          case 128: 
            { return ARITH_ASS_MINUS;
            }
          case 314: break;
          case 129: 
            { return ARITH_ASS_BIT_OR;
            }
          case 315: break;
          case 130: 
            { return ARITH_EQ;
            }
          case 316: break;
          case 131: 
            { return ARITH_GE;
            }
          case 317: break;
          case 132: 
            { return ARITH_SHIFT_RIGHT;
            }
          case 318: break;
          case 133: 
            { return ARITH_LE;
            }
          case 319: break;
          case 134: 
            { return ARITH_SHIFT_LEFT;
            }
          case 320: break;
          case 135: 
            { return ARITH_ASS_DIV;
            }
          case 321: break;
          case 136: 
            { return ARITH_ASS_MOD;
            }
          case 322: break;
          case 137: 
            { goToState(S_CASE_PATTERN);
                                 if (isBash4()) {
                                    return CASE_END;
                                 }
                                 else {
                                    yypushback(1);
                                    return SEMI;
                                 }
            }
          case 323: break;
          case 138: 
            { goToState(S_CASE_PATTERN); return CASE_END;
            }
          case 324: break;
          case 139: 
            { if (!isInCaseBody()) { setInCaseBody(true); goToState(S_CASE_PATTERN); }; return IN_KEYWORD;
            }
          case 325: break;
          case 140: 
            { setParamExpansionHash(isParamExpansionWord()); return PARAM_EXPANSION_OP_HASH_HASH;
            }
          case 326: break;
          case 141: 
            { setParamExpansionOther(true); return PARAM_EXPANSION_OP_UPPERCASE_ALL;
            }
          case 327: break;
          case 142: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return LEFT_SQUARE;
            }
          case 328: break;
          case 143: 
            { setParamExpansionOther(true); return PARAM_EXPANSION_OP_LOWERCASE_ALL;
            }
          case 329: break;
          case 144: 
            { goToState(S_PARAM_EXPANSION_PATTERN); return PARAM_EXPANSION_OP_SLASH_SLASH;
            }
          case 330: break;
          case 145: 
            { return PARAM_EXPANSION_OP_COLON_PLUS;
            }
          case 331: break;
          case 146: 
            { return PARAM_EXPANSION_OP_COLON_MINUS;
            }
          case 332: break;
          case 147: 
            { return PARAM_EXPANSION_OP_COLON_EQ;
            }
          case 333: break;
          case 148: 
            { return PARAM_EXPANSION_OP_COLON_QMARK;
            }
          case 334: break;
          case 149: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { backToPreviousState(); goToState(S_PARAM_EXPANSION_DELIMITER); return PARAM_EXPANSION_PATTERN;
            }
          case 335: break;
          case 150: 
            { /* ignored */
            }
          case 336: break;
          case 151: 
            { if (heredocState().isNextMarker(yytext())) {
                boolean ignoreTabs = heredocState().isIgnoringTabs();

                heredocState().popMarker(yytext());
                popStates(S_HEREDOC);

                return ignoreTabs ? HEREDOC_MARKER_IGNORING_TABS_END : HEREDOC_MARKER_END;
            }

            return yystate() == S_HEREDOC && heredocState().isExpectingEvaluatingHeredoc() && !"$".equals(yytext().toString())
                ? VARIABLE
                : HEREDOC_LINE;
            }
          case 337: break;
          case 152: 
            { if (!isInHereStringContent()) enterHereStringContent(); return VARIABLE;
            }
          case 338: break;
          case 153: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return ASSIGNMENT_WORD;
            }
          case 339: break;
          case 154: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { goToState(S_ASSIGNMENT_LIST); return ASSIGNMENT_WORD;
            }
          case 340: break;
          case 155: 
            { if (isBash4()) {
                                        return REDIRECT_AMP_GREATER_GREATER;
                                    } else {
                                        yypushback(2);
                                        return AMP;
                                    }
            }
          case 341: break;
          case 156: 
            { goToState(S_TEST_COMMAND); return BRACKET_KEYWORD;
            }
          case 342: break;
          case 157: 
            { yypushback(1); goToState(S_TEST); setEmptyConditionalCommand(true); return EXPR_CONDITIONAL;
            }
          case 343: break;
          case 158: 
            { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); yypushback(2); goToState(S_SUBSHELL); return LEFT_PAREN;
            }
          case 344: break;
          case 159: 
            { return LET_KEYWORD;
            }
          case 345: break;
          case 160: 
            { return FOR_KEYWORD;
            }
          case 346: break;
          case 161: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return REDIRECT_GREATER_AMP;
            }
          case 347: break;
          case 162: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return REDIRECT_LESS_AMP;
            }
          case 348: break;
          case 163: 
            { goToState(S_HEREDOC_MARKER_IGNORE_TABS);
        return HEREDOC_MARKER_TAG;
            }
          case 349: break;
          case 164: 
            { goToState(S_HERE_STRING); return REDIRECT_HERE_STRING;
            }
          case 350: break;
          case 165: 
            { backToPreviousState(); return _BRACKET_KEYWORD;
            }
          case 351: break;
          case 166: 
            { return ARITH_HEX_NUMBER;
            }
          case 352: break;
          case 167: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { yypushback(1); return ARITH_MINUS;
            }
          case 353: break;
          case 168: 
            { return ARITH_ASS_SHIFT_RIGHT;
            }
          case 354: break;
          case 169: 
            { return ARITH_ASS_SHIFT_LEFT;
            }
          case 355: break;
          case 170: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { backToPreviousState(); goToState(S_ASSIGNMENT_LIST); return RIGHT_SQUARE;
            }
          case 356: break;
          case 171: 
            { goToState(S_CASE_PATTERN);
                                 if (!isBash4()) {
                                    yypushback(1);
                                 }
                                 return CASE_END;
            }
          case 357: break;
          case 172: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -3);
            { goToState(S_ASSIGNMENT_LIST); return ASSIGNMENT_WORD;
            }
          case 358: break;
          case 173: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 21;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 22;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { goToState(S_ARRAY); return ASSIGNMENT_WORD;
            }
          case 359: break;
          case 174: 
            { return TIME_KEYWORD;
            }
          case 360: break;
          case 175: 
            { return TRAP_KEYWORD;
            }
          case 361: break;
          case 176: 
            { return THEN_KEYWORD;
            }
          case 362: break;
          case 177: 
            { return ELIF_KEYWORD;
            }
          case 363: break;
          case 178: 
            { return ELSE_KEYWORD;
            }
          case 364: break;
          case 179: 
            { setInCaseBody(false); goToState(S_CASE); return CASE_KEYWORD;
            }
          case 365: break;
          case 180: 
            { return DONE_KEYWORD;
            }
          case 366: break;
          case 181: 
            { backToPreviousState(); return ESAC_KEYWORD;
            }
          case 367: break;
          case 182: 
            { backToPreviousState(); yypushback(yylength());
            }
          case 368: break;
          case 183: 
            { return UNTIL_KEYWORD;
            }
          case 369: break;
          case 184: 
            { return WHILE_KEYWORD;
            }
          case 370: break;
          case 185: 
            { return SELECT_KEYWORD;
            }
          case 371: break;
          case 186: 
            { return FUNCTION_KEYWORD;
            }
          case 372: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
