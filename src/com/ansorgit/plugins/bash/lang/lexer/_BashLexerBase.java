/* The following code was generated by JFlex 1.4.3 on 22.04.16 19:15 */

/*** JFlex specification for Bash ****
    The Bash language is a beast. It contains many strange or unusual constructs
    and has a great flexibility in what is possible.
    The lexer tries to do as much as possible in the lexing phase to help the parser
    later on.

    A major problem is that tokens have to interpreted according to their context.
    e.g. a=b echo a=b
    has an assignment in front and a string as parameter to the echo command. So the EQ
    token (for the = character) has to be remapped to a WORD later on (see BashTokenTypeRemapper).

    Another problem is that string can contain unescaped substrings, e.g.
        "$(echo hello "$(echo "world")")" is just one stringParsingState(). But this string contains
    two levels of embedded strings in the embedded subshell command.
    The lexer parses a string as STRING_BEGIN, STRING_DATA and STRING_END. These
    tokens are mapped to a STRING later on by the lexer.MergingLexer class.

    Lexing all as a STRING token was the way to go. This worked, but for some strange
    reason the lexer got wrong offsets for this complex setup (returning the string only at the
    last occurence of "). That's why the token merging strategy was established.

    If you really want to hack on this lexer: Be careful :)
    There are unit tests for the lexer but there's no 100% coverage for all cases.

     @author Joachim Ansorg, mail@ansorg-it.com
**/

/** Based on the arc lexer (http://code.google.com/p/intelli-arc/) **/

package com.ansorgit.plugins.bash.lang.lexer;

import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22.04.16 19:15 from the specification file
 * <tt>src/com/ansorgit/plugins/bash/lang/lexer/bash.flex</tt>
 */
public abstract class _BashLexerBase implements BashLexerDef {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int S_CASE = 12;
  public static final int S_HEREDOC = 32;
  public static final int S_BACKQUOTE = 28;
  public static final int S_ARITH_ARRAY_MODE = 10;
  public static final int S_CASE_PATTERN = 14;
  public static final int S_HEREDOC_MARKER = 30;
  public static final int S_ARRAY = 20;
  public static final int S_ARITH_SQUARE_MODE = 8;
  public static final int S_TEST_COMMAND = 4;
  public static final int S_ASSIGNMENT_LIST = 22;
  public static final int S_PARAM_EXPANSION = 26;
  public static final int S_ARITH = 6;
  public static final int S_DOLLAR_PREFIXED = 18;
  public static final int YYINITIAL = 0;
  public static final int S_SUBSHELL = 16;
  public static final int S_TEST = 2;
  public static final int S_STRINGMODE = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\46\1\6\1\10"+
    "\1\5\1\7\1\23\1\22\1\11\1\54\1\42\1\20\1\26\1\27"+
    "\1\24\1\17\1\14\1\35\7\41\2\12\1\21\1\34\1\74\1\53"+
    "\1\73\1\16\1\15\6\37\1\75\4\13\1\75\1\13\1\75\1\75"+
    "\3\13\1\75\7\13\1\32\1\4\1\33\1\25\1\13\1\43\1\57"+
    "\1\40\1\56\1\60\1\52\1\63\1\72\1\66\1\50\1\13\1\75"+
    "\1\62\1\51\1\55\1\61\1\70\1\71\1\64\1\44\1\47\1\65"+
    "\1\13\1\67\1\36\1\13\1\75\1\76\1\45\1\77\1\30\101\0"+
    "\100\31\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\23\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\2\12\1\13\1\14\2\12\1\15"+
    "\1\11\1\16\1\17\1\12\1\20\3\12\1\21\1\22"+
    "\6\12\1\23\1\24\1\25\1\26\1\27\1\14\1\12"+
    "\1\30\1\20\1\3\3\31\1\14\1\3\1\32\1\4"+
    "\1\33\1\34\1\7\1\35\1\12\1\36\1\12\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\35\1\53\1\21\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\1\1\15\3\12\1\4"+
    "\1\5\1\13\1\14\1\15\1\62\1\17\1\12\1\23"+
    "\1\24\1\25\1\26\1\63\1\22\1\1\1\11\1\64"+
    "\1\11\1\4\2\12\1\65\1\23\1\24\3\66\1\67"+
    "\1\70\1\4\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\14\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\2\113\1\3\4\112"+
    "\1\114\1\115\1\116\1\117\2\0\2\120\3\5\1\121"+
    "\1\0\1\122\1\0\1\122\1\123\1\124\1\0\1\125"+
    "\2\12\1\126\1\127\1\130\1\127\1\131\1\132\1\12"+
    "\1\133\1\12\1\134\1\135\3\12\1\136\1\137\1\12"+
    "\1\140\1\12\1\141\1\12\1\142\4\12\1\0\1\143"+
    "\1\144\1\0\1\145\1\146\5\31\2\12\1\147\1\150"+
    "\1\151\1\146\1\0\1\12\1\152\1\153\3\0\1\154"+
    "\1\155\1\156\1\130\1\157\1\160\1\161\1\162\1\163"+
    "\1\164\1\0\1\165\1\166\1\167\1\170\1\171\1\172"+
    "\2\0\1\173\1\174\1\175\2\12\1\120\1\121\1\12"+
    "\1\144\1\146\1\140\1\12\1\0\2\176\1\73\1\0"+
    "\1\177\1\200\1\201\1\202\1\203\1\120\1\112\1\0"+
    "\1\112\1\0\1\116\2\204\7\0\3\121\1\0\1\205"+
    "\2\0\2\12\1\206\1\207\1\210\1\211\6\12\1\212"+
    "\2\12\1\213\1\214\3\12\1\215\1\0\1\215\1\216"+
    "\1\0\1\216\1\146\1\217\1\220\5\0\3\221\1\222"+
    "\1\223\1\224\1\225\1\226\3\12\1\146\2\0\4\112"+
    "\3\0\1\121\1\125\1\227\1\230\1\12\1\231\1\232"+
    "\1\233\1\234\1\235\1\236\1\237\3\12\1\230\1\221"+
    "\1\0\1\240\1\241\1\112\2\0\1\112\2\0\2\12"+
    "\1\242\1\243\1\221\1\244\2\12\1\245";

  private static int [] zzUnpackAction() {
    int [] result = new int[384];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u04c0\0\u04c0\0\u0540"+
    "\0\u0580\0\u05c0\0\u0600\0\u04c0\0\u0640\0\u0680\0\u06c0\0\u05c0"+
    "\0\u05c0\0\u0700\0\u0740\0\u0780\0\u04c0\0\u05c0\0\u04c0\0\u04c0"+
    "\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u04c0\0\u0900\0\u0940"+
    "\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u04c0"+
    "\0\u04c0\0\u0b40\0\u05c0\0\u0b80\0\u05c0\0\u0bc0\0\u0c00\0\u0c40"+
    "\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u04c0\0\u0d80\0\u04c0\0\u0dc0"+
    "\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f00\0\u0f40\0\u0f00"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u04c0\0\u1040\0\u04c0\0\u04c0\0\u04c0"+
    "\0\u04c0\0\u1080\0\u10c0\0\u1100\0\u04c0\0\u1140\0\u1180\0\u04c0"+
    "\0\u04c0\0\u11c0\0\u1100\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u12c0\0\u12c0\0\u12c0\0\u04c0\0\u12c0\0\u1380\0\u13c0"+
    "\0\u1400\0\u12c0\0\u12c0\0\u04c0\0\u1440\0\u1480\0\u14c0\0\u04c0"+
    "\0\u04c0\0\u1500\0\u1540\0\u1580\0\u04c0\0\u0c80\0\u0cc0\0\u04c0"+
    "\0\u15c0\0\u1600\0\u04c0\0\u04c0\0\u1640\0\u04c0\0\u04c0\0\u1680"+
    "\0\u04c0\0\u04c0\0\u04c0\0\u04c0\0\u04c0\0\u16c0\0\u04c0\0\u04c0"+
    "\0\u04c0\0\u04c0\0\u04c0\0\u1700\0\u04c0\0\u04c0\0\u04c0\0\u1740"+
    "\0\u1780\0\u04c0\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900"+
    "\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00"+
    "\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u04c0\0\u1c40\0\u1c80\0\u04c0"+
    "\0\u04c0\0\u0640\0\u04c0\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u05c0"+
    "\0\u05c0\0\u1dc0\0\u04c0\0\u1e00\0\u1e40\0\u1e80\0\u04c0\0\u04c0"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u06c0\0\u06c0\0\u1f80\0\u1fc0\0\u2000"+
    "\0\u2040\0\u2080\0\u06c0\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0"+
    "\0\u04c0\0\u04c0\0\u2200\0\u04c0\0\u2240\0\u04c0\0\u05c0\0\u2280"+
    "\0\u22c0\0\u2300\0\u22c0\0\u2340\0\u04c0\0\u04c0\0\u04c0\0\u2380"+
    "\0\u23c0\0\u2400\0\u04c0\0\u04c0\0\u2440\0\u2480\0\u24c0\0\u04c0"+
    "\0\u04c0\0\u04c0\0\u04c0\0\u04c0\0\u2500\0\u04c0\0\u04c0\0\u04c0"+
    "\0\u2540\0\u2580\0\u04c0\0\u04c0\0\u04c0\0\u25c0\0\u04c0\0\u2600"+
    "\0\u2640\0\u2680\0\u04c0\0\u26c0\0\u06c0\0\u2700\0\u2740\0\u2780"+
    "\0\u27c0\0\u2800\0\u12c0\0\u2840\0\u04c0\0\u2880\0\u28c0\0\u04c0"+
    "\0\u2900\0\u2940\0\u2980\0\u04c0\0\u04c0\0\u04c0\0\u04c0\0\u04c0"+
    "\0\u2900\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u04c0\0\u04c0\0\u2ac0"+
    "\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u0540\0\u2c40\0\u2c80"+
    "\0\u04c0\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40"+
    "\0\u04c0\0\u04c0\0\u04c0\0\u04c0\0\u2e80\0\u2ec0\0\u2f00\0\u2f40"+
    "\0\u2f80\0\u2fc0\0\u04c0\0\u3000\0\u3040\0\u06c0\0\u06c0\0\u3080"+
    "\0\u30c0\0\u3100\0\u04c0\0\u3140\0\u3180\0\u04c0\0\u31c0\0\u3200"+
    "\0\u04c0\0\u04c0\0\u04c0\0\u0d80\0\u3240\0\u3280\0\u32c0\0\u2500"+
    "\0\u3300\0\u04c0\0\u3340\0\u2580\0\u04c0\0\u04c0\0\u04c0\0\u04c0"+
    "\0\u3380\0\u1300\0\u33c0\0\u12c0\0\u1500\0\u1640\0\u3400\0\u3440"+
    "\0\u3480\0\u34c0\0\u3500\0\u3540\0\u2b00\0\u3580\0\u1c40\0\u04c0"+
    "\0\u05c0\0\u35c0\0\u06c0\0\u06c0\0\u06c0\0\u06c0\0\u06c0\0\u06c0"+
    "\0\u06c0\0\u3600\0\u3640\0\u3680\0\u04c0\0\u36c0\0\u3700\0\u06c0"+
    "\0\u12c0\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0"+
    "\0\u3900\0\u06c0\0\u06c0\0\u3700\0\u06c0\0\u3940\0\u3980\0\u06c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[384];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\4\40\1\42"+
    "\3\40\1\43\3\40\1\44\1\40\1\45\1\46\3\37"+
    "\1\36\1\47\1\50\1\51\1\52\1\27\1\53\1\54"+
    "\1\37\1\55\1\56\1\57\1\37\1\60\1\37\1\61"+
    "\1\37\1\62\1\63\1\37\1\64\1\37\1\65\3\37"+
    "\1\66\1\67\1\37\1\70\1\71\1\24\1\25\1\26"+
    "\1\27\1\30\1\40\1\72\1\33\1\34\1\35\3\40"+
    "\1\41\4\40\1\73\1\40\1\74\6\40\1\75\1\45"+
    "\5\40\1\24\1\50\1\40\1\76\1\77\4\40\1\100"+
    "\1\57\16\40\1\101\1\102\1\40\1\70\1\71\1\24"+
    "\1\25\1\26\1\27\1\30\1\40\1\72\1\33\1\34"+
    "\1\35\3\40\1\41\4\40\1\103\1\40\1\74\7\40"+
    "\1\45\5\40\1\47\1\50\1\40\1\52\1\104\4\40"+
    "\1\100\1\105\16\40\1\101\1\102\1\40\1\70\1\71"+
    "\1\24\1\25\1\26\1\27\1\106\1\107\1\110\1\111"+
    "\1\34\1\35\1\112\1\113\1\114\1\115\1\116\1\115"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\126"+
    "\1\127\1\24\1\130\1\131\1\45\1\132\3\113\1\112"+
    "\1\133\1\50\1\113\1\52\1\27\4\113\1\134\1\135"+
    "\16\113\1\136\1\137\1\113\1\70\1\71\1\24\1\25"+
    "\1\26\1\27\1\106\1\107\1\110\1\111\1\34\1\35"+
    "\1\112\1\113\1\114\1\115\1\116\1\115\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\24"+
    "\1\140\1\141\1\45\1\132\3\113\1\112\1\133\1\50"+
    "\1\113\1\52\1\27\4\113\1\134\1\135\16\113\1\136"+
    "\1\137\1\113\1\70\1\71\1\24\1\25\1\26\1\27"+
    "\1\106\1\107\1\110\1\111\1\34\1\35\1\112\1\115"+
    "\1\114\1\115\1\116\1\115\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\127\2\24\1\142\1\45"+
    "\1\132\3\115\1\112\1\133\1\50\1\115\1\52\1\27"+
    "\4\115\1\143\1\135\16\115\1\136\1\137\1\115\1\70"+
    "\1\71\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\111\1\34\1\35\1\36\1\37\1\40\1\41\4\40"+
    "\1\42\3\40\1\43\3\40\1\44\1\40\1\144\1\46"+
    "\3\37\1\36\1\47\1\50\1\51\1\52\1\27\1\53"+
    "\1\145\1\37\1\146\1\56\1\57\1\37\1\60\1\37"+
    "\1\61\1\37\1\62\1\63\1\37\1\64\1\37\1\65"+
    "\3\37\1\66\1\67\1\37\1\70\1\71\1\147\1\25"+
    "\1\26\1\27\1\150\1\151\1\147\1\33\1\34\1\35"+
    "\3\147\1\152\4\147\1\153\11\147\1\154\5\147\1\155"+
    "\1\156\1\147\1\76\1\27\3\147\1\157\1\147\1\105"+
    "\16\147\1\160\1\161\1\147\1\162\1\163\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\4\40\1\42\3\40\1\43"+
    "\3\40\1\44\1\40\1\45\1\46\3\37\1\36\1\164"+
    "\1\50\1\51\1\52\1\27\1\53\1\54\1\37\1\55"+
    "\1\56\1\165\1\37\1\60\1\37\1\61\1\37\1\62"+
    "\1\63\1\37\1\64\1\37\1\65\3\37\1\66\1\67"+
    "\1\37\1\70\1\71\2\24\1\0\51\24\1\57\25\24"+
    "\1\0\4\24\1\166\2\24\1\167\17\24\1\170\2\24"+
    "\1\171\3\24\1\167\35\24\1\71\1\24\1\25\1\26"+
    "\1\27\1\172\1\151\1\24\1\33\1\34\1\35\14\173"+
    "\1\174\2\173\1\24\1\175\1\24\6\173\1\155\1\50"+
    "\1\173\1\76\1\27\4\173\1\56\1\105\16\173\1\176"+
    "\1\177\1\173\1\70\1\71\4\200\1\201\2\200\1\202"+
    "\1\203\32\200\1\204\34\200\1\24\1\25\1\26\1\27"+
    "\1\205\1\206\1\207\1\33\1\34\1\35\2\210\1\211"+
    "\1\212\1\213\1\214\1\215\1\216\1\217\1\220\1\221"+
    "\1\222\1\223\1\210\2\24\1\224\1\131\1\45\5\210"+
    "\1\24\1\50\1\210\1\76\1\27\4\210\1\225\1\57"+
    "\16\210\1\176\1\177\1\210\1\226\1\227\1\24\1\25"+
    "\1\26\1\27\1\30\1\40\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\4\40\1\42\3\40\1\43"+
    "\3\40\1\44\1\40\1\45\1\46\3\37\1\36\1\24"+
    "\1\50\1\51\1\52\1\27\1\53\1\54\1\37\1\55"+
    "\1\56\1\57\1\37\1\60\1\37\1\61\1\37\1\62"+
    "\1\63\1\37\1\64\1\37\1\65\3\37\1\66\1\67"+
    "\1\37\1\70\1\71\1\230\1\231\1\232\1\233\1\234"+
    "\2\230\1\235\1\236\1\237\10\230\1\24\11\230\1\24"+
    "\7\230\2\24\1\233\31\230\1\240\2\241\1\240\1\242"+
    "\2\240\1\243\70\240\13\0\1\244\22\0\3\244\3\0"+
    "\1\244\2\0\4\244\2\0\16\244\2\0\1\244\35\0"+
    "\1\245\146\0\1\26\75\0\1\40\1\246\1\247\75\40"+
    "\1\250\2\0\1\250\1\251\1\252\1\253\3\250\22\252"+
    "\1\250\5\252\2\250\1\252\2\250\4\252\2\250\16\252"+
    "\2\250\1\252\2\250\4\0\1\254\2\40\3\0\22\40"+
    "\1\0\5\40\2\0\1\40\2\0\4\40\2\0\16\40"+
    "\2\0\1\40\7\0\3\255\1\34\1\256\1\255\1\257"+
    "\1\0\2\255\1\0\1\255\3\0\1\255\5\0\1\260"+
    "\2\0\1\255\3\257\1\255\2\0\1\257\2\0\4\257"+
    "\2\0\16\257\2\0\1\257\1\261\1\0\11\262\1\263"+
    "\66\262\4\0\1\254\2\40\3\0\1\36\21\40\1\0"+
    "\1\36\3\40\1\36\2\0\1\40\2\0\4\40\2\0"+
    "\16\40\2\0\1\40\6\0\1\254\2\40\3\0\2\37"+
    "\12\40\1\264\3\40\1\265\1\40\1\0\5\37\2\0"+
    "\1\37\2\0\4\37\1\266\1\0\16\37\2\0\1\37"+
    "\6\0\1\254\2\40\3\0\1\267\7\40\1\270\1\40"+
    "\1\271\7\40\1\0\1\271\3\40\1\267\2\0\1\40"+
    "\2\0\4\40\2\0\16\40\1\272\1\0\1\40\6\0"+
    "\1\254\2\40\3\0\22\40\1\0\5\40\2\0\1\40"+
    "\2\0\4\40\1\273\1\0\16\40\2\0\1\40\6\0"+
    "\1\254\2\40\3\0\20\40\1\274\1\40\1\0\5\40"+
    "\2\0\1\40\1\0\1\275\4\40\2\0\16\40\2\0"+
    "\1\40\6\0\1\254\2\40\3\0\2\37\12\40\1\264"+
    "\3\40\1\265\1\40\1\0\5\37\2\0\1\37\2\0"+
    "\3\37\1\276\1\266\1\0\16\37\2\0\1\37\24\0"+
    "\1\277\22\0\1\300\36\0\1\254\2\40\3\0\2\37"+
    "\12\40\1\264\3\40\1\265\1\40\1\0\5\37\2\0"+
    "\1\37\2\0\1\37\1\301\2\37\1\266\1\0\7\37"+
    "\1\302\1\37\1\303\4\37\2\0\1\37\6\0\1\254"+
    "\2\40\3\0\2\37\12\40\1\264\3\40\1\265\1\40"+
    "\1\0\5\37\2\0\1\37\2\0\4\37\1\266\1\0"+
    "\1\304\5\37\1\305\7\37\2\0\1\37\6\0\1\254"+
    "\2\40\3\0\2\37\12\40\1\264\3\40\1\265\1\40"+
    "\1\0\5\37\2\0\1\37\2\0\4\37\1\266\1\0"+
    "\5\37\1\306\10\37\2\0\1\37\56\0\1\307\27\0"+
    "\1\254\2\40\3\0\2\37\12\40\1\264\3\40\1\265"+
    "\1\40\1\0\5\37\2\0\1\37\2\0\4\37\1\266"+
    "\1\0\2\37\1\310\13\37\2\0\1\37\6\0\1\254"+
    "\2\40\3\0\2\37\12\40\1\264\3\40\1\265\1\40"+
    "\1\0\5\37\2\0\1\37\2\0\4\37\1\266\1\0"+
    "\4\37\1\311\11\37\2\0\1\37\6\0\1\254\2\40"+
    "\3\0\2\37\12\40\1\264\3\40\1\265\1\40\1\0"+
    "\5\37\2\0\1\37\2\0\3\37\1\312\1\266\1\0"+
    "\16\37\2\0\1\37\6\0\1\254\2\40\3\0\2\37"+
    "\12\40\1\264\3\40\1\265\1\40\1\0\5\37\2\0"+
    "\1\37\2\0\1\37\1\313\2\37\1\266\1\0\4\37"+
    "\1\314\3\37\1\315\5\37\2\0\1\37\6\0\1\254"+
    "\2\40\3\0\2\37\12\40\1\264\3\40\1\265\1\40"+
    "\1\0\5\37\2\0\1\37\2\0\4\37\1\266\1\0"+
    "\1\316\15\37\2\0\1\37\6\0\1\254\2\40\3\0"+
    "\2\37\12\40\1\264\3\40\1\265\1\40\1\0\5\37"+
    "\2\0\1\37\2\0\4\37\1\266\1\0\11\37\1\317"+
    "\4\37\2\0\1\37\24\0\1\320\22\0\1\321\25\0"+
    "\1\322\26\0\1\323\50\0\1\324\1\325\7\0\1\254"+
    "\2\40\3\0\22\40\1\0\5\40\2\0\1\40\2\0"+
    "\4\40\1\326\1\0\16\40\2\0\1\40\6\0\1\254"+
    "\2\40\3\0\22\40\1\0\1\40\1\327\1\40\1\327"+
    "\1\40\2\0\1\327\2\0\1\327\2\40\1\330\2\0"+
    "\1\331\3\327\1\332\1\333\6\327\1\334\1\331\2\0"+
    "\1\327\24\0\1\277\110\0\1\335\74\0\1\336\22\0"+
    "\1\337\117\0\1\322\100\0\1\340\7\0\1\254\2\40"+
    "\3\0\10\40\1\270\11\40\1\0\5\40\2\0\1\40"+
    "\2\0\4\40\2\0\16\40\2\0\1\40\35\0\1\341"+
    "\44\0\1\115\1\342\1\247\75\115\53\0\1\343\31\0"+
    "\3\255\1\34\1\256\1\255\1\257\1\0\2\255\1\0"+
    "\1\255\3\0\1\255\5\0\1\260\2\0\1\255\3\257"+
    "\1\255\2\0\1\257\2\0\4\257\1\0\1\344\16\257"+
    "\2\0\1\257\1\261\13\0\1\112\22\0\1\112\3\0"+
    "\1\112\42\0\1\345\2\115\3\0\2\113\1\0\3\115"+
    "\1\0\1\115\4\0\1\346\3\0\1\347\2\0\5\113"+
    "\2\0\1\113\2\0\4\113\1\266\1\0\16\113\2\0"+
    "\1\113\55\0\1\350\30\0\1\345\2\115\3\0\2\115"+
    "\1\0\3\115\1\0\1\115\13\0\5\115\2\0\1\115"+
    "\2\0\4\115\2\0\16\115\2\0\1\115\22\0\1\351"+
    "\32\0\1\352\46\0\1\353\130\0\1\354\50\0\1\355"+
    "\26\0\1\356\52\0\1\357\24\0\1\360\61\0\1\361"+
    "\1\362\2\0\1\361\100\0\1\363\110\0\1\364\77\0"+
    "\1\365\17\0\1\366\57\0\1\367\20\0\1\370\31\0"+
    "\1\371\24\0\1\372\46\0\1\373\11\0\1\374\47\0"+
    "\1\254\2\40\3\0\2\37\12\40\1\264\3\40\1\265"+
    "\1\40\1\0\5\37\2\0\1\37\2\0\4\37\1\266"+
    "\1\0\1\375\5\37\1\305\7\37\2\0\1\37\6\0"+
    "\1\254\2\40\3\0\2\37\12\40\1\264\3\40\1\265"+
    "\1\40\1\0\5\37\2\0\1\376\2\0\4\37\1\266"+
    "\1\0\5\37\1\306\10\37\2\0\1\37\2\0\1\147"+
    "\3\0\1\377\2\147\3\0\22\147\1\0\5\147\2\0"+
    "\1\147\2\0\5\147\1\0\24\147\1\u0100\1\247\1\147"+
    "\1\377\73\147\1\250\2\0\3\250\1\u0101\71\250\1\147"+
    "\3\0\1\377\2\147\3\0\22\147\1\0\5\147\2\0"+
    "\1\u0102\2\0\5\147\1\0\24\147\3\0\1\377\2\147"+
    "\3\0\22\147\1\0\5\147\2\0\1\147\2\0\5\147"+
    "\1\0\16\147\1\u0103\5\147\3\0\1\377\2\147\3\0"+
    "\22\147\1\0\5\147\2\0\1\147\2\0\5\147\1\0"+
    "\17\147\1\u0104\3\147\54\0\1\u0105\121\0\1\261\13\0"+
    "\1\167\22\0\1\167\3\0\1\167\36\0\1\173\1\u0106"+
    "\1\247\75\173\4\0\1\u0107\3\173\2\0\17\173\3\0"+
    "\6\173\2\0\1\173\2\0\4\173\2\0\16\173\2\0"+
    "\1\173\6\0\1\u0107\3\173\2\0\17\173\3\0\6\173"+
    "\2\0\1\173\2\0\4\173\1\273\1\0\16\173\2\0"+
    "\1\173\2\0\1\u0108\1\u0109\1\247\75\u0108\5\0\3\255"+
    "\2\0\1\255\1\257\1\0\2\255\1\0\1\255\3\0"+
    "\1\255\10\0\1\255\3\257\1\255\2\0\1\257\2\0"+
    "\4\257\1\0\1\344\16\257\2\0\1\257\1\261\1\0"+
    "\1\210\1\u010a\1\247\75\210\4\0\1\u010b\5\0\2\210"+
    "\13\0\1\210\5\0\5\210\2\0\1\210\2\0\4\210"+
    "\2\0\16\210\2\0\1\210\20\0\1\u010c\5\0\1\u010d"+
    "\1\0\1\u010e\24\0\1\u010f\41\0\1\u0110\2\0\1\u0110"+
    "\57\0\1\230\3\0\16\230\1\0\11\230\1\0\7\230"+
    "\3\0\31\230\2\0\1\232\100\0\1\233\42\0\1\233"+
    "\31\0\1\230\1\u0111\1\247\1\0\16\230\1\0\11\230"+
    "\1\0\7\230\3\0\32\230\3\0\4\230\1\236\1\237"+
    "\10\230\1\0\11\230\1\0\7\230\3\0\31\230\1\u0112"+
    "\3\u0113\4\u0112\1\230\11\u0112\1\u0113\11\u0112\1\u0113\7\u0112"+
    "\3\u0113\31\u0112\1\u0114\3\u0115\5\u0114\1\230\10\u0114\1\u0115"+
    "\11\u0114\1\u0115\7\u0114\3\u0115\31\u0114\1\240\2\0\1\240"+
    "\1\0\2\240\1\0\70\240\1\0\2\241\104\0\1\u0116"+
    "\75\0\3\u0117\2\0\1\u0117\1\u0118\1\0\2\u0117\1\0"+
    "\1\u0117\3\0\1\u0117\10\0\1\u0117\3\u0118\1\u0117\2\0"+
    "\1\u0118\2\0\4\u0118\1\0\1\344\16\u0118\2\0\1\u0118"+
    "\1\261\13\0\2\244\21\0\5\244\2\0\1\244\2\0"+
    "\4\244\2\0\16\244\2\0\1\244\2\0\2\u0119\1\0"+
    "\2\u0119\2\u011a\1\u011b\2\u0119\2\u011c\1\u0119\2\u011c\1\u011d"+
    "\1\u011c\1\u011d\2\u0119\1\u011c\1\u0119\1\u011d\6\u0119\5\u011c"+
    "\2\u0119\1\u011c\2\u0119\4\u011c\2\u0119\16\u011c\2\u0119\1\u011c"+
    "\2\u0119\2\0\1\247\1\0\1\u011e\2\40\3\0\22\40"+
    "\1\0\5\40\2\0\1\40\2\0\4\40\2\0\16\40"+
    "\2\0\1\40\6\0\1\u011f\73\0\1\250\2\0\75\250"+
    "\1\252\1\40\1\0\75\252\1\250\2\0\1\250\1\251"+
    "\2\252\3\250\22\252\1\250\5\252\2\250\1\252\2\250"+
    "\4\252\2\250\16\252\2\250\1\252\2\250\1\u0101\1\u0120"+
    "\1\u0121\1\u0101\1\u0122\2\253\3\u0101\22\253\1\u0101\5\253"+
    "\2\u0101\1\253\2\u0101\4\253\2\u0101\16\253\2\u0101\1\253"+
    "\2\u0101\2\40\1\0\75\40\4\256\1\u0123\4\256\1\263"+
    "\66\256\12\0\2\257\21\0\5\257\2\0\1\257\2\0"+
    "\4\257\2\0\16\257\2\0\1\257\6\0\1\254\2\40"+
    "\3\0\22\40\1\0\5\40\2\0\1\40\2\0\4\40"+
    "\1\u0124\1\0\16\40\2\0\1\40\6\0\1\u0125\2\40"+
    "\1\u0126\2\0\1\u0127\1\u0128\1\40\3\u0128\1\u0127\1\u0128"+
    "\2\40\1\u0127\1\40\1\u0127\5\40\1\0\1\u0127\3\u0128"+
    "\1\u0127\2\0\1\u0128\2\0\4\u0128\2\0\16\u0128\2\0"+
    "\1\u0128\56\0\1\u0129\27\0\1\254\2\40\3\0\1\267"+
    "\21\40\1\0\1\267\3\40\1\267\2\0\1\40\2\0"+
    "\4\40\2\0\16\40\2\0\1\40\75\0\1\u012a\10\0"+
    "\1\254\2\40\3\0\22\40\1\0\5\40\2\0\1\40"+
    "\1\0\1\u012b\4\40\2\0\16\40\2\0\1\40\35\0"+
    "\1\u012c\50\0\1\254\2\40\3\0\2\37\12\40\1\264"+
    "\3\40\1\265\1\40\1\0\5\37\2\0\1\37\2\0"+
    "\4\37\1\266\1\0\5\37\1\u012d\10\37\2\0\1\37"+
    "\6\0\1\254\2\40\3\0\2\37\12\40\1\264\3\40"+
    "\1\265\1\40\1\0\5\37\2\0\1\37\2\0\2\37"+
    "\1\u012e\1\37\1\266\1\0\16\37\2\0\1\37\6\0"+
    "\1\254\2\40\3\0\2\37\12\40\1\264\3\40\1\265"+
    "\1\40\1\0\5\37\2\0\1\37\2\0\4\37\1\266"+
    "\1\0\2\37\1\u012f\13\37\2\0\1\37\6\0\1\254"+
    "\2\40\3\0\2\37\12\40\1\264\3\40\1\265\1\40"+
    "\1\0\5\37\2\0\1\37\2\0\3\37\1\u0130\1\266"+
    "\1\0\16\37\2\0\1\37\6\0\1\254\2\40\3\0"+
    "\2\37\12\40\1\264\3\40\1\265\1\40\1\0\5\37"+
    "\2\0\1\u0131\2\0\1\37\1\u0132\2\37\1\266\1\0"+
    "\16\37\2\0\1\37\56\0\1\u0133\27\0\1\254\2\40"+
    "\3\0\2\37\12\40\1\264\3\40\1\265\1\40\1\0"+
    "\5\37\2\0\1\u0134\2\0\4\37\1\266\1\0\16\37"+
    "\2\0\1\37\6\0\1\254\2\40\3\0\2\37\12\40"+
    "\1\264\3\40\1\265\1\40\1\0\5\37\2\0\1\37"+
    "\2\0\4\37\1\266\1\0\1\u0135\15\37\2\0\1\37"+
    "\6\0\1\254\2\40\3\0\2\37\12\40\1\264\3\40"+
    "\1\265\1\40\1\0\5\37\2\0\1\37\2\0\1\u0136"+
    "\3\37\1\266\1\0\16\37\2\0\1\37\6\0\1\254"+
    "\2\40\3\0\2\37\12\40\1\264\3\40\1\265\1\40"+
    "\1\0\5\37\2\0\1\37\2\0\4\37\1\266\1\0"+
    "\7\37\1\u0137\6\37\2\0\1\37\6\0\1\254\2\40"+
    "\3\0\2\37\12\40\1\264\3\40\1\265\1\40\1\0"+
    "\5\37\2\0\1\37\2\0\4\37\1\266\1\0\1\u0138"+
    "\15\37\2\0\1\37\6\0\1\254\2\40\3\0\2\37"+
    "\12\40\1\264\3\40\1\265\1\40\1\0\5\37\2\0"+
    "\1\37\2\0\1\u0139\3\37\1\266\1\0\16\37\2\0"+
    "\1\37\6\0\1\254\2\40\3\0\2\37\12\40\1\264"+
    "\3\40\1\265\1\40\1\0\5\37\2\0\1\37\2\0"+
    "\1\37\1\u013a\2\37\1\266\1\0\16\37\2\0\1\37"+
    "\5\0\1\u013b\1\u013c\6\0\1\u013d\1\0\3\u013d\1\0"+
    "\1\u013d\14\0\3\u013d\3\0\1\u013d\1\0\1\u013b\4\u013d"+
    "\2\0\16\u013d\2\0\1\u013d\5\0\1\u013e\1\u013f\6\0"+
    "\1\u0140\1\0\3\u0140\1\0\1\u0140\14\0\3\u0140\3\0"+
    "\1\u0140\1\0\1\u013e\4\u0140\2\0\16\u0140\2\0\1\u0140"+
    "\26\0\1\u0141\47\0\1\u0142\7\0\1\254\2\40\3\0"+
    "\22\40\1\0\5\40\2\0\1\40\2\0\4\40\2\0"+
    "\6\40\1\327\5\40\1\327\1\40\2\0\1\40\6\0"+
    "\1\254\2\40\3\0\22\40\1\0\5\40\2\0\1\40"+
    "\2\0\1\327\2\40\1\327\2\0\16\40\2\0\1\40"+
    "\6\0\1\254\2\40\3\0\22\40\1\0\5\40\2\0"+
    "\1\40\2\0\1\327\3\40\2\0\16\40\2\0\1\40"+
    "\6\0\1\254\2\40\3\0\22\40\1\0\5\40\2\0"+
    "\1\40\2\0\4\40\2\0\14\40\1\327\1\40\2\0"+
    "\1\40\26\0\1\u0141\106\0\1\u0143\46\0\1\247\1\0"+
    "\1\u0144\2\115\3\0\2\115\1\0\3\115\1\0\1\115"+
    "\13\0\5\115\2\0\1\115\2\0\4\115\2\0\16\115"+
    "\2\0\1\115\2\0\2\115\1\0\75\115\53\0\1\u0124"+
    "\30\0\1\u0145\2\0\1\u0126\2\0\1\u0146\1\u0147\1\0"+
    "\3\u0147\1\u0146\1\u0147\2\0\1\u0146\1\0\1\u0146\6\0"+
    "\1\u0146\3\u0147\1\u0146\2\0\1\u0147\2\0\4\u0147\2\0"+
    "\16\u0147\2\0\1\u0147\5\0\1\u0148\6\0\1\u0149\11\0"+
    "\1\u014a\10\0\1\u014b\3\0\1\u0149\4\0\1\u0148\66\0"+
    "\1\361\3\0\1\361\50\0\1\u014c\22\0\1\u014c\1\0"+
    "\3\u014c\10\0\1\u014c\3\0\3\u014c\2\0\1\u014c\67\0"+
    "\1\u014d\50\0\1\u0141\26\0\1\u014e\77\0\1\372\100\0"+
    "\1\u014f\45\0\1\u0150\61\0\1\254\2\40\3\0\2\37"+
    "\12\40\1\264\3\40\1\265\1\40\1\0\5\37\2\0"+
    "\1\37\2\0\4\37\1\266\1\0\2\37\1\u0151\13\37"+
    "\2\0\1\37\2\0\2\147\1\0\1\147\1\377\74\147"+
    "\1\0\1\247\1\0\1\u0152\2\147\3\0\22\147\1\0"+
    "\5\147\2\0\1\147\2\0\5\147\1\0\23\147\1\u0101"+
    "\1\u0120\1\u0121\75\u0101\1\147\3\0\1\377\2\147\3\0"+
    "\22\147\1\0\5\147\2\0\1\147\2\0\5\147\1\0"+
    "\2\147\1\u0153\21\147\3\0\1\377\2\147\3\0\12\147"+
    "\1\u0154\7\147\1\0\5\147\2\0\1\147\2\0\5\147"+
    "\1\0\23\147\2\0\1\247\1\0\1\u0155\3\173\2\0"+
    "\17\173\3\0\6\173\2\0\1\173\2\0\4\173\2\0"+
    "\16\173\2\0\1\173\2\0\2\173\1\0\75\173\2\0"+
    "\1\247\1\0\1\u011f\75\0\1\247\1\0\1\u0156\5\0"+
    "\2\210\13\0\1\210\5\0\5\210\2\0\1\210\2\0"+
    "\4\210\2\0\16\210\2\0\1\210\2\0\2\210\1\0"+
    "\75\210\1\u0112\3\u0113\4\u0112\1\u0157\11\u0112\1\u0113\11\u0112"+
    "\1\u0113\7\u0112\3\u0113\31\u0112\10\u0113\1\u0158\67\u0113\1\u0114"+
    "\3\u0115\5\u0114\1\u0159\10\u0114\1\u0115\11\u0114\1\u0115\7\u0114"+
    "\3\u0115\31\u0114\11\u0115\1\u015a\66\u0115\12\0\2\u0118\21\0"+
    "\5\u0118\2\0\1\u0118\2\0\4\u0118\2\0\16\u0118\2\0"+
    "\1\u0118\6\0\1\u015b\73\0\2\u0119\1\0\1\u0119\1\u011d"+
    "\2\u015c\1\u011d\2\u0119\1\u015c\1\u011d\1\u0119\3\u011d\1\u0119"+
    "\1\u011d\13\u0119\1\u015c\3\u011d\1\u015c\2\u0119\1\u011d\2\u0119"+
    "\4\u011d\2\u0119\16\u011d\2\u0119\1\u011d\2\u0119\4\0\1\u015b"+
    "\2\0\1\u015b\70\0\2\u0119\1\0\1\u0119\1\u011d\2\u011a"+
    "\1\u011c\2\u0119\2\u011c\1\u0119\2\u011c\1\u011d\1\u011c\1\u011d"+
    "\2\u0119\1\u011c\1\u0119\1\u011d\3\u0119\1\u015d\2\u0119\5\u011c"+
    "\2\u0119\1\u011c\2\u0119\4\u011c\2\u0119\16\u011c\2\u0119\1\u011c"+
    "\4\u0119\1\0\1\u0119\1\u011d\2\u011a\1\u011b\2\u0119\2\u011c"+
    "\1\u0119\2\u011c\1\u011d\1\u011c\1\u011d\2\u0119\1\u011c\1\u0119"+
    "\1\u011d\3\u0119\1\u015d\2\u0119\5\u011c\2\u0119\1\u011c\2\u0119"+
    "\4\u011c\2\u0119\16\u011c\2\u0119\1\u011c\2\u0119\1\0\1\u0111"+
    "\1\247\77\0\1\u0121\75\0\1\253\1\u015e\1\u0121\75\253"+
    "\4\256\1\u0123\4\256\1\u015f\66\256\54\0\1\u0160\23\0"+
    "\2\u0128\1\0\75\u0128\5\0\3\u0146\2\0\2\u0146\1\0"+
    "\2\u0146\1\0\1\u0146\3\0\1\u0146\10\0\5\u0146\2\0"+
    "\1\u0146\2\0\4\u0146\2\0\16\u0146\2\0\1\u0146\6\0"+
    "\1\u0125\2\40\1\u0126\2\0\1\u0127\1\u0128\1\40\3\u0128"+
    "\1\u0127\1\u0128\2\40\1\u0127\1\40\1\u0127\4\40\1\u0161"+
    "\1\0\1\u0127\3\u0128\1\u0127\2\0\1\u0128\2\0\4\u0128"+
    "\2\0\16\u0128\2\0\1\u0128\6\0\1\u0125\2\u0128\1\u0126"+
    "\2\0\2\u0128\1\40\3\u0128\1\u0127\1\u0128\2\40\1\u0127"+
    "\1\40\1\u0127\4\40\1\u0161\1\0\5\u0128\2\0\1\u0128"+
    "\2\0\4\u0128\2\0\16\u0128\2\0\1\u0128\6\0\1\254"+
    "\2\40\3\0\2\37\12\40\1\264\3\40\1\265\1\40"+
    "\1\0\5\37\2\0\1\37\2\0\3\37\1\u0162\1\266"+
    "\1\0\16\37\2\0\1\37\6\0\1\254\2\40\3\0"+
    "\2\37\12\40\1\264\3\40\1\265\1\40\1\0\5\37"+
    "\2\0\1\37\2\0\3\37\1\u0163\1\266\1\0\16\37"+
    "\2\0\1\37\6\0\1\254\2\40\3\0\2\37\12\40"+
    "\1\264\3\40\1\265\1\40\1\0\5\37\2\0\1\37"+
    "\2\0\4\37\1\266\1\0\13\37\1\u0164\2\37\2\0"+
    "\1\37\6\0\1\254\2\40\3\0\2\37\12\40\1\264"+
    "\3\40\1\265\1\40\1\0\5\37\2\0\1\37\2\0"+
    "\4\37\1\266\1\0\1\u0165\15\37\2\0\1\37\6\0"+
    "\1\254\2\40\3\0\2\37\12\40\1\264\3\40\1\265"+
    "\1\40\1\0\5\37\2\0\1\37\2\0\3\37\1\u0166"+
    "\1\266\1\0\16\37\2\0\1\37\6\0\1\254\2\40"+
    "\3\0\2\37\12\40\1\264\3\40\1\265\1\40\1\0"+
    "\5\37\2\0\1\37\2\0\4\37\1\266\1\0\6\37"+
    "\1\u0167\7\37\2\0\1\37\6\0\1\254\2\40\3\0"+
    "\2\37\12\40\1\264\3\40\1\265\1\40\1\0\5\37"+
    "\2\0\1\37\2\0\3\37\1\u0168\1\266\1\0\16\37"+
    "\2\0\1\37\6\0\1\254\2\40\3\0\2\37\12\40"+
    "\1\264\3\40\1\265\1\40\1\0\5\37\2\0\1\37"+
    "\2\0\3\37\1\u0169\1\266\1\0\16\37\2\0\1\37"+
    "\6\0\1\254\2\40\3\0\2\37\12\40\1\264\3\40"+
    "\1\265\1\40\1\0\5\37\2\0\1\37\2\0\4\37"+
    "\1\266\1\0\1\37\1\u016a\14\37\2\0\1\37\6\0"+
    "\1\254\2\40\3\0\2\37\12\40\1\264\3\40\1\265"+
    "\1\40\1\0\5\37\2\0\1\37\2\0\1\37\1\u016b"+
    "\2\37\1\266\1\0\16\37\2\0\1\37\6\0\1\254"+
    "\2\40\3\0\2\37\12\40\1\264\3\40\1\265\1\40"+
    "\1\0\5\37\2\0\1\37\2\0\4\37\1\266\1\0"+
    "\5\37\1\u016c\10\37\2\0\1\37\2\0\2\u013d\1\0"+
    "\75\u013d\4\0\1\u013c\2\u013d\3\0\2\u013d\1\0\3\u013d"+
    "\1\0\1\u013d\13\0\5\u013d\2\0\1\u013d\2\0\4\u013d"+
    "\2\0\16\u013d\2\0\1\u013d\2\0\2\u0140\1\0\75\u0140"+
    "\4\0\1\u013f\2\u0140\3\0\2\u0140\1\0\3\u0140\1\0"+
    "\1\u0140\13\0\5\u0140\2\0\1\u0140\2\0\4\u0140\2\0"+
    "\16\u0140\2\0\1\u0140\2\0\2\u0147\1\0\75\u0147\4\0"+
    "\1\u0145\2\0\1\u0126\2\0\1\u0146\1\u0147\1\0\3\u0147"+
    "\1\u0146\1\u0147\2\0\1\u0146\1\0\1\u0146\4\0\1\u016d"+
    "\1\0\1\u0146\3\u0147\1\u0146\2\0\1\u0147\2\0\4\u0147"+
    "\2\0\16\u0147\2\0\1\u0147\6\0\1\u0145\2\u0147\1\u0126"+
    "\2\0\2\u0147\1\0\3\u0147\1\u0146\1\u0147\2\0\1\u0146"+
    "\1\0\1\u0146\4\0\1\u016d\1\0\5\u0147\2\0\1\u0147"+
    "\2\0\4\u0147\2\0\16\u0147\2\0\1\u0147\14\0\1\u0149"+
    "\22\0\1\u0149\3\0\1\u0149\73\0\1\u016e\1\u016f\2\0"+
    "\1\u016e\42\0\1\254\2\40\3\0\2\37\12\40\1\264"+
    "\3\40\1\265\1\40\1\0\5\37\2\0\1\37\2\0"+
    "\4\37\1\266\1\0\1\37\1\u0170\14\37\2\0\1\37"+
    "\2\0\1\147\3\0\1\377\2\147\3\0\22\147\1\0"+
    "\5\147\2\0\1\147\2\0\5\147\1\0\1\147\1\u0171"+
    "\21\147\1\230\3\0\3\230\1\u0172\1\236\11\230\1\0"+
    "\11\230\1\0\7\230\3\0\31\230\7\0\1\u0173\1\u0174"+
    "\67\0\1\230\3\0\3\230\1\u0175\1\230\1\237\10\230"+
    "\1\0\11\230\1\0\7\230\3\0\31\230\7\0\1\u0176"+
    "\1\0\1\u0177\66\0\2\u0119\1\0\2\u0119\2\u011a\1\u011b"+
    "\2\u0119\2\u011c\1\u0119\2\u011c\1\u011d\1\u011c\1\u011d\2\u0119"+
    "\1\u011c\1\u0119\1\u011d\3\u0119\1\u015d\2\u0119\5\u011c\2\u0119"+
    "\1\u011c\2\u0119\4\u011c\2\u0119\16\u011c\2\u0119\1\u011c\4\u0119"+
    "\1\0\1\u0119\1\u011d\2\u015c\3\u0119\1\u015c\1\u011d\1\u0119"+
    "\3\u011d\1\u0119\1\u011d\13\u0119\1\u015c\3\u011d\1\u015c\2\u0119"+
    "\1\u011d\2\u0119\4\u011d\2\u0119\16\u011d\2\u0119\1\u011d\2\u0119"+
    "\2\0\1\u0121\1\0\1\254\2\40\3\0\22\40\1\0"+
    "\5\40\2\0\1\40\2\0\4\40\2\0\16\40\2\0"+
    "\1\40\6\0\1\254\2\40\3\0\2\37\12\40\1\264"+
    "\3\40\1\265\1\40\1\0\5\37\2\0\1\37\2\0"+
    "\4\37\1\266\1\0\1\37\1\u0178\14\37\2\0\1\37"+
    "\6\0\1\254\2\40\3\0\2\37\12\40\1\264\3\40"+
    "\1\265\1\40\1\0\5\37\2\0\1\37\2\0\1\u0179"+
    "\3\37\1\266\1\0\16\37\2\0\1\37\6\0\1\254"+
    "\2\40\3\0\2\37\12\40\1\264\3\40\1\265\1\40"+
    "\1\0\5\37\2\0\1\37\2\0\4\37\1\266\1\0"+
    "\5\37\1\u017a\10\37\2\0\1\37\6\0\1\254\2\40"+
    "\3\0\2\37\12\40\1\264\3\40\1\265\1\40\1\0"+
    "\5\37\2\0\1\37\2\0\3\37\1\u017b\1\266\1\0"+
    "\16\37\2\0\1\37\37\0\1\u016e\3\0\1\u016e\50\0"+
    "\1\u017c\22\0\1\u017c\1\0\3\u017c\10\0\1\u017c\3\0"+
    "\3\u017c\2\0\1\u017c\14\0\1\230\3\0\4\230\1\236"+
    "\11\230\1\0\11\230\1\0\7\230\3\0\31\230\10\0"+
    "\1\u0174\67\0\10\u0113\1\0\67\u0113\1\230\3\0\5\230"+
    "\1\237\10\230\1\0\11\230\1\0\7\230\3\0\31\230"+
    "\11\0\1\u0177\66\0\11\u0115\1\0\66\u0115\4\0\1\254"+
    "\2\40\3\0\2\37\12\40\1\264\3\40\1\265\1\40"+
    "\1\0\5\37\2\0\1\37\2\0\1\u017d\3\37\1\266"+
    "\1\0\16\37\2\0\1\37\6\0\1\254\2\40\3\0"+
    "\2\37\12\40\1\264\3\40\1\265\1\40\1\0\5\37"+
    "\2\0\1\37\2\0\1\37\1\u017e\2\37\1\266\1\0"+
    "\16\37\2\0\1\37\6\0\1\254\2\40\3\0\2\37"+
    "\12\40\1\264\3\40\1\265\1\40\1\0\5\37\2\0"+
    "\1\37\2\0\4\37\1\266\1\0\4\37\1\u017f\11\37"+
    "\2\0\1\37\6\0\1\254\2\40\3\0\2\37\12\40"+
    "\1\264\3\40\1\265\1\40\1\0\5\37\2\0\1\37"+
    "\2\0\4\37\1\266\1\0\1\u0180\15\37\2\0\1\37"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14784];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\23\0\1\11\1\1\2\11\4\1\1\11\10\1\1\11"+
    "\1\1\2\11\5\1\1\11\11\1\2\11\13\1\1\11"+
    "\1\1\1\11\14\1\1\11\1\1\4\11\3\1\1\11"+
    "\2\1\2\11\13\1\1\11\6\1\1\11\3\1\2\11"+
    "\3\1\1\11\2\1\1\11\2\1\2\11\1\1\2\11"+
    "\1\1\5\11\1\1\5\11\1\1\3\11\2\1\1\11"+
    "\12\1\1\0\6\1\1\0\1\11\1\0\1\1\2\11"+
    "\1\0\1\11\7\1\1\11\3\1\2\11\17\1\1\0"+
    "\2\11\1\0\1\11\1\1\1\11\6\1\3\11\1\1"+
    "\1\0\1\1\2\11\3\0\5\11\1\1\3\11\1\1"+
    "\1\0\3\11\1\1\1\11\1\1\2\0\1\11\11\1"+
    "\1\11\1\1\1\0\1\11\2\1\1\0\5\11\2\1"+
    "\1\0\1\1\1\0\2\11\1\1\7\0\1\1\1\11"+
    "\1\1\1\0\1\1\2\0\2\1\4\11\6\1\1\11"+
    "\7\1\1\11\1\0\1\1\1\11\1\0\1\1\3\11"+
    "\5\0\1\1\1\11\2\1\4\11\4\1\2\0\4\1"+
    "\2\0\3\1\1\11\14\1\1\11\1\1\1\0\3\1"+
    "\2\0\1\1\2\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[384];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
    long yychar = 0;


  public _BashLexerBase(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _BashLexerBase(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 73: 
          { setParamExpansionWord(false); setParamExpansionHash(false); setParamExpansionOther(false);
                                  backToPreviousState();
                                  return RIGHT_CURLY;
          }
        case 166: break;
        case 111: 
          { return ARITH_ASS_MOD;
          }
        case 167: break;
        case 89: 
          { if (isBash4()) {
                                        return REDIRECT_AMP_GREATER;
                                    } else {
                                        yypushback(1);
                                        return AMP;
                                    }
          }
        case 168: break;
        case 38: 
          { return ARITH_PLUS;
          }
        case 169: break;
        case 64: 
          { return PARAM_EXPANSION_OP_STAR;
          }
        case 170: break;
        case 96: 
          { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); goToState(S_ARITH); return EXPR_ARITH;
          }
        case 171: break;
        case 2: 
          { if (!isHeredocMarkersEmpty()) {
                                            goToState(S_HEREDOC);
                                        }

                                       return LINE_FEED;
          }
        case 172: break;
        case 50: 
          { backToPreviousState(); return RIGHT_PAREN;
          }
        case 173: break;
        case 78: 
          { return HEREDOC_LINE;
          }
        case 174: break;
        case 155: 
          { return THEN_KEYWORD;
          }
        case 175: break;
        case 35: 
          { return ARITH_MOD;
          }
        case 176: break;
        case 13: 
          { return SEMI;
          }
        case 177: break;
        case 112: 
          { return ARITH_MINUS_MINUS;
          }
        case 178: break;
        case 149: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { backToPreviousState(); goToState(S_ASSIGNMENT_LIST); return RIGHT_SQUARE;
          }
        case 179: break;
        case 115: 
          { return ARITH_ASS_PLUS;
          }
        case 180: break;
        case 86: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return ASSIGNMENT_WORD;
          }
        case 181: break;
        case 133: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return ASSIGNMENT_WORD;
          }
        case 182: break;
        case 65: 
          { return PARAM_EXPANSION_OP_COLON;
          }
        case 183: break;
        case 18: 
          { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); stringParsingState().enterSubshell(); goToState(S_SUBSHELL); return LEFT_PAREN;
          }
        case 184: break;
        case 57: 
          { setParamExpansionHash(isParamExpansionWord() && true); return PARAM_EXPANSION_OP_HASH;
          }
        case 185: break;
        case 101: 
          { return REDIRECT_LESS_GREATER;
          }
        case 186: break;
        case 153: 
          { return TIME_KEYWORD;
          }
        case 187: break;
        case 20: 
          { return LESS_THAN;
          }
        case 188: break;
        case 152: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 17;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 18;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { goToState(S_ARRAY); return ASSIGNMENT_WORD;
          }
        case 189: break;
        case 117: 
          { if (openParenthesisCount() > 0) {
                                    decOpenParenthesisCount();
                                    yypushback(1);

                                    return RIGHT_PAREN;
                                  } else {
                                    stringParsingState().advanceToken();
                                    backToPreviousState();

                                    return _EXPR_ARITH;
                                  }
          }
        case 190: break;
        case 127: 
          { return PARAM_EXPANSION_OP_COLON_QMARK;
          }
        case 191: break;
        case 53: 
          { goToState(S_ARITH_ARRAY_MODE); return LEFT_SQUARE;
          }
        case 192: break;
        case 165: 
          { return FUNCTION_KEYWORD;
          }
        case 193: break;
        case 45: 
          { return ARITH_GT;
          }
        case 194: break;
        case 156: 
          { return ELSE_KEYWORD;
          }
        case 195: break;
        case 4: 
          { return BACKSLASH;
          }
        case 196: break;
        case 161: 
          { backToPreviousState(); yypushback(yylength());
          }
        case 197: break;
        case 63: 
          { setParamExpansionOther(true); return PARAM_EXPANSION_OP_DOT;
          }
        case 198: break;
        case 160: 
          { backToPreviousState(); return ESAC_KEYWORD;
          }
        case 199: break;
        case 102: 
          { goToState(S_HEREDOC_MARKER);
        return HEREDOC_MARKER_TAG;
          }
        case 200: break;
        case 8: 
          { stringParsingState().reset(); goToState(S_STRINGMODE); return STRING_BEGIN;
          }
        case 201: break;
        case 62: 
          { setParamExpansionOther(true); return PARAM_EXPANSION_OP_QMARK;
          }
        case 202: break;
        case 90: 
          { return ADD_EQ;
          }
        case 203: break;
        case 37: 
          { return ARITH_BITWISE_XOR;
          }
        case 204: break;
        case 82: 
          { return VARIABLE;
          }
        case 205: break;
        case 124: 
          { goToState(S_CASE_PATTERN); return CASE_END;
          }
        case 206: break;
        case 104: 
          { return COND_OP_REGEX;
          }
        case 207: break;
        case 54: 
          { stringParsingState().advanceToken(); return STRING_DATA;
          }
        case 208: break;
        case 87: 
          { return FILEDESCRIPTOR;
          }
        case 209: break;
        case 67: 
          { return PARAM_EXPANSION_OP_MINUS;
          }
        case 210: break;
        case 26: 
          { return LEFT_PAREN;
          }
        case 211: break;
        case 105: 
          { return COND_OP_EQ_EQ;
          }
        case 212: break;
        case 58: 
          { return PARAM_EXPANSION_OP_EXCL;
          }
        case 213: break;
        case 110: 
          { return ARITH_ASS_MUL;
          }
        case 214: break;
        case 74: 
          { pushExpectedHeredocMarker(yytext());
        backToPreviousState();

        return HEREDOC_MARKER_START;
          }
        case 215: break;
        case 122: 
          { return ARITH_SHIFT_LEFT;
          }
        case 216: break;
        case 162: 
          { return UNTIL_KEYWORD;
          }
        case 217: break;
        case 32: 
          { return ARITH_MULT;
          }
        case 218: break;
        case 141: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return REDIRECT_GREATER_AMP;
          }
        case 219: break;
        case 145: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yypushback(1); return ARITH_MINUS;
          }
        case 220: break;
        case 61: 
          { return PARAM_EXPANSION_OP_AT;
          }
        case 221: break;
        case 139: 
          { return LET_KEYWORD;
          }
        case 222: break;
        case 75: 
          { return LINE_FEED;
          }
        case 223: break;
        case 137: 
          { yypushback(1); goToState(S_TEST); setEmptyConditionalCommand(true); return EXPR_CONDITIONAL;
          }
        case 224: break;
        case 79: 
          { if (isHeredocEnd(yytext().toString())) {
             popHeredocMarker(yytext().toString());

             if (isHeredocMarkersEmpty()) {
                 backToPreviousState();
             }

             return HEREDOC_MARKER_END;
         }

         return HEREDOC_LINE;
          }
        case 225: break;
        case 22: 
          { if (yystate() == S_HEREDOC && !isHeredocEvaluating()) return HEREDOC_LINE; return RIGHT_CURLY;
          }
        case 226: break;
        case 97: 
          { return DO_KEYWORD;
          }
        case 227: break;
        case 109: 
          { return ARITH_EXPONENT;
          }
        case 228: break;
        case 119: 
          { return ARITH_GE;
          }
        case 229: break;
        case 70: 
          { if (!isParamExpansionOther() && (!isParamExpansionWord() || !isParamExpansionHash())) {
                                    // If we expect an array reference parse the next tokens as arithmetic expression
                                    goToState(S_ARITH_ARRAY_MODE);
                                  }

                                  return LEFT_SQUARE;
          }
        case 230: break;
        case 6: 
          { return BANG_TOKEN;
          }
        case 231: break;
        case 132: 
          { if (isHeredocEnd(yytext().toString())) {
                popHeredocMarker(yytext().toString());

                if (isHeredocMarkersEmpty()) {
                    backToPreviousState();
                }

                return HEREDOC_MARKER_END;
            }

            return isHeredocEvaluating() && !"$".equals(yytext().toString()) ? VARIABLE : HEREDOC_LINE;
          }
        case 232: break;
        case 125: 
          { if (!isInCaseBody()) { setInCaseBody(true); goToState(S_CASE_PATTERN); }; return IN_KEYWORD;
          }
        case 233: break;
        case 5: 
          { return COMMENT;
          }
        case 234: break;
        case 100: 
          { return SHIFT_RIGHT;
          }
        case 235: break;
        case 23: 
          { return COND_OP_NOT;
          }
        case 236: break;
        case 151: 
          // lookahead expression with fixed lookahead length
          yypushback(3);
          { goToState(S_ASSIGNMENT_LIST); return ASSIGNMENT_WORD;
          }
        case 237: break;
        case 134: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { goToState(S_ASSIGNMENT_LIST); return ASSIGNMENT_WORD;
          }
        case 238: break;
        case 118: 
          { return ARITH_EQ;
          }
        case 239: break;
        case 99: 
          { return REDIRECT_GREATER_BAR;
          }
        case 240: break;
        case 55: 
          { if (stringParsingState().isNewAllowed()) {
                                    stringParsingState().enterSubstring(); return STRING_BEGIN;
                                  } else if (stringParsingState().isInSubstring()) {
                                    stringParsingState().leaveSubstring(); return STRING_DATA;
                                  } else {
                                    backToPreviousState(); return STRING_END;
                                  }
          }
        case 241: break;
        case 84: 
          { if (yystate() == S_HEREDOC && !isHeredocEvaluating()) return HEREDOC_LINE; goToState(S_PARAM_EXPANSION); yypushback(1); return DOLLAR;
          }
        case 242: break;
        case 163: 
          { return WHILE_KEYWORD;
          }
        case 243: break;
        case 41: 
          { return LEFT_SQUARE;
          }
        case 244: break;
        case 131: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return LEFT_SQUARE;
          }
        case 245: break;
        case 107: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { if (yystate() == S_HEREDOC && !isHeredocEvaluating()) return HEREDOC_LINE; goToState(S_DOLLAR_PREFIXED); return DOLLAR;
          }
        case 246: break;
        case 66: 
          { setParamExpansionOther(true); return PARAM_EXPANSION_OP_PERCENT;
          }
        case 247: break;
        case 144: 
          { backToPreviousState(); return _BRACKET_KEYWORD;
          }
        case 248: break;
        case 143: 
          { return REDIRECT_LESS_LESS_LESS;
          }
        case 249: break;
        case 71: 
          { return PARAM_EXPANSION_OP_EQ;
          }
        case 250: break;
        case 33: 
          { return ARITH_COLON;
          }
        case 251: break;
        case 157: 
          { return ELIF_KEYWORD;
          }
        case 252: break;
        case 113: 
          { return ARITH_ASS_MINUS;
          }
        case 253: break;
        case 138: 
          { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); yypushback(2); goToState(S_SUBSHELL); return LEFT_PAREN;
          }
        case 254: break;
        case 16: 
          { return PIPE;
          }
        case 255: break;
        case 140: 
          { return FOR_KEYWORD;
          }
        case 256: break;
        case 52: 
          { backToPreviousState(); goToState(S_ARITH_ARRAY_MODE); return LEFT_SQUARE;
          }
        case 257: break;
        case 164: 
          { return SELECT_KEYWORD;
          }
        case 258: break;
        case 77: 
          { if (!isHeredocMarkersEmpty()) {
                                        return HEREDOC_LINE;
                                  }
                                  return LINE_FEED;
          }
        case 259: break;
        case 103: 
          { backToPreviousState(); setEmptyConditionalCommand(false); return _EXPR_CONDITIONAL;
          }
        case 260: break;
        case 40: 
          { return ARITH_BITWISE_NEGATE;
          }
        case 261: break;
        case 120: 
          { return ARITH_SHIFT_RIGHT;
          }
        case 262: break;
        case 158: 
          { setInCaseBody(false); goToState(S_CASE); return CASE_KEYWORD;
          }
        case 263: break;
        case 7: 
          { return DOLLAR;
          }
        case 264: break;
        case 3: 
          { return WHITESPACE;
          }
        case 265: break;
        case 27: 
          { return ARITH_BASE_CHAR;
          }
        case 266: break;
        case 56: 
          { stringParsingState().advanceToken(); if (yystate() == S_BACKQUOTE) backToPreviousState(); else goToState(S_BACKQUOTE); return BACKQUOTE;
          }
        case 267: break;
        case 28: 
          { return ARITH_NEGATE;
          }
        case 268: break;
        case 81: 
          { return SHEBANG;
          }
        case 269: break;
        case 59: 
          { setParamExpansionWord(true); return WORD;
          }
        case 270: break;
        case 46: 
          { return ARITH_LT;
          }
        case 271: break;
        case 72: 
          { setParamExpansionWord(false); setParamExpansionHash(false); setParamExpansionOther(false);
                                  return LEFT_CURLY;
          }
        case 272: break;
        case 108: 
          { return ARITH_ASS_DIV;
          }
        case 273: break;
        case 93: 
          { return OR_OR;
          }
        case 274: break;
        case 48: 
          { backToPreviousState(); return _EXPR_ARITH_SQUARE;
          }
        case 275: break;
        case 142: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return REDIRECT_LESS_AMP;
          }
        case 276: break;
        case 94: 
          { return IN_KEYWORD;
          }
        case 277: break;
        case 25: 
          { return COND_OP;
          }
        case 278: break;
        case 30: 
          { return ARITH_DIV;
          }
        case 279: break;
        case 24: 
          { if (isEmptyConditionalCommand()) {
                                    setEmptyConditionalCommand(false);
                                    backToPreviousState();
                                    return _EXPR_CONDITIONAL;
                                 } else {
                                    setEmptyConditionalCommand(false);
                                    return WORD;
                                 }
          }
        case 280: break;
        case 92: 
          { if (isBash4()) {
                                        return PIPE_AMP;
                                     } else {
                                        yypushback(1);
                                        return PIPE;
                                     }
          }
        case 281: break;
        case 49: 
          { backToPreviousState(); return RIGHT_SQUARE;
          }
        case 282: break;
        case 11: 
          { return AT;
          }
        case 283: break;
        case 159: 
          { return DONE_KEYWORD;
          }
        case 284: break;
        case 19: 
          { return GREATER_THAN;
          }
        case 285: break;
        case 44: 
          { incOpenParenthesisCount(); return LEFT_PAREN;
          }
        case 286: break;
        case 14: 
          { return RIGHT_PAREN;
          }
        case 287: break;
        case 80: 
          { /* ignored */
          }
        case 288: break;
        case 60: 
          { setParamExpansionOther(true); return PARAM_EXPANSION_OP_SLASH;
          }
        case 289: break;
        case 83: 
          { yypushback(1); goToState(S_ARITH_SQUARE_MODE); return DOLLAR;
          }
        case 290: break;
        case 36: 
          { return ARITH_MINUS;
          }
        case 291: break;
        case 12: 
          { return AMP;
          }
        case 292: break;
        case 114: 
          { return ARITH_PLUS_PLUS;
          }
        case 293: break;
        case 136: 
          { goToState(S_TEST_COMMAND); return BRACKET_KEYWORD;
          }
        case 294: break;
        case 146: 
          { return ARITH_HEX_NUMBER;
          }
        case 295: break;
        case 85: 
          { return STRING2;
          }
        case 296: break;
        case 106: 
          { return ARITH_NE;
          }
        case 297: break;
        case 42: 
          { return RIGHT_SQUARE;
          }
        case 298: break;
        case 147: 
          { return ARITH_ASS_SHIFT_RIGHT;
          }
        case 299: break;
        case 15: 
          { if (yystate() == S_BACKQUOTE) backToPreviousState(); else goToState(S_BACKQUOTE); return BACKQUOTE;
          }
        case 300: break;
        case 126: 
          { return STRING_DATA;
          }
        case 301: break;
        case 148: 
          { return ARITH_ASS_SHIFT_LEFT;
          }
        case 302: break;
        case 121: 
          { return ARITH_LE;
          }
        case 303: break;
        case 69: 
          { return PARAM_EXPANSION_OP_PLUS;
          }
        case 304: break;
        case 95: 
          { return IF_KEYWORD;
          }
        case 305: break;
        case 150: 
          { goToState(S_CASE_PATTERN);
                                 if (!isBash4()) {
                                    yypushback(1);
                                 }
                                 return CASE_END;
          }
        case 306: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 307: break;
        case 29: 
          { return ARITH_NUMBER;
          }
        case 308: break;
        case 154: 
          { return TRAP_KEYWORD;
          }
        case 309: break;
        case 129: 
          { return PARAM_EXPANSION_OP_COLON_PLUS;
          }
        case 310: break;
        case 116: 
          { return ARITH_OCTAL_NUMBER;
          }
        case 311: break;
        case 51: 
          { backToPreviousState(); if (stringParsingState().isInSubshell()) stringParsingState().leaveSubshell(); return RIGHT_PAREN;
          }
        case 312: break;
        case 91: 
          { goToState(S_TEST); setEmptyConditionalCommand(false); return EXPR_CONDITIONAL;
          }
        case 313: break;
        case 39: 
          { return COMMA;
          }
        case 314: break;
        case 47: 
          { return EXPR_ARITH_SQUARE;
          }
        case 315: break;
        case 34: 
          { return ARITH_BITWISE_AND;
          }
        case 316: break;
        case 21: 
          { return LEFT_CURLY;
          }
        case 317: break;
        case 43: 
          { decOpenParenthesisCount(); return RIGHT_PAREN;
          }
        case 318: break;
        case 76: 
          { if (isHeredocEnd(yytext().toString())) {
            popHeredocMarker(yytext().toString());

            if (isHeredocMarkersEmpty()) {
                backToPreviousState();
            }

            return HEREDOC_MARKER_END;
        }

        return HEREDOC_LINE;
          }
        case 319: break;
        case 17: 
          { return EQ;
          }
        case 320: break;
        case 128: 
          { return PARAM_EXPANSION_OP_COLON_MINUS;
          }
        case 321: break;
        case 130: 
          { return PARAM_EXPANSION_OP_COLON_EQ;
          }
        case 322: break;
        case 9: 
          { return INTEGER_LITERAL;
          }
        case 323: break;
        case 68: 
          { setParamExpansionOther(true); return PARAM_EXPANSION_OP_UNKNOWN;
          }
        case 324: break;
        case 98: 
          { return FI_KEYWORD;
          }
        case 325: break;
        case 10: 
          { return WORD;
          }
        case 326: break;
        case 123: 
          { goToState(S_CASE_PATTERN);
                                 if (isBash4()) {
                                    return CASE_END;
                                 }
                                 else {
                                    yypushback(1);
                                    return SEMI;
                                 }
          }
        case 327: break;
        case 88: 
          { return AND_AND;
          }
        case 328: break;
        case 31: 
          { return ARITH_QMARK;
          }
        case 329: break;
        case 135: 
          { if (isBash4()) {
                                        return REDIRECT_AMP_GREATER_GREATER;
                                    } else {
                                        yypushback(2);
                                        return AMP;
                                    }
          }
        case 330: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
